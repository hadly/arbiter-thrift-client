/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.recording.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RecordingServerService {

  /**
   * Recording Server communication interface.
   */
  public interface Iface {

    /**
     * Get the id of this recording server.
     */
    public long getServerID() throws org.apache.thrift.TException;

    /**
     * Set global recording configurations.
     * (1) configurations - Detailed global configurations for recording server, example of the json string:
     *                     {"chunk-size":15,"reserved-space":5120,"cloud-server":"core.up.uat.kaisquare.com"}
     *                     fields specification:
     *                     "chunk-size" - the duration of each video recorded, unit: minute
     *                     "reserved-space" - reserved disk space for storage, unit: MB
     *                     "cloud-server" - cloud server where the videoes synchronize, or set to "localhost" not to synchronize
     *                     flexible for future extension
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param configurations
     */
    public boolean setGlobalConfiguration(String configurations) throws org.apache.thrift.TException;

    /**
     * Set device recording configurations.
     * (1) deviceId - Device ID.
     * (2) channel - The requested channel index.
     * (3) configurations - Detailed device configurations, example of the json string:
     *                      {"stream-storage-limit":20480,"keep-days":7}
     *                      fields specification:
     *                      "stream-storage-limit" - max disk space occupied by one channel, unit: MB
     *                      "keep-days" - the days recording server keep the videoes
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param configurations
     */
    public boolean setDeviceConfiguration(long deviceId, int channel, String configurations) throws org.apache.thrift.TException;

    /**
     * Set device snapshot for recording.
     * (1) deviceId - Device ID.
     * (2) channel - Device channel.
     * (3) snapshot - Snapshot buffer.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param snapshot
     */
    public boolean setDeviceSnapshot(long deviceId, int channel, ByteBuffer snapshot) throws org.apache.thrift.TException;

    /**
     * Starts a recording task for recording server.
     * (1) deviceId - Device ID.
     * (2) channel - The requested channel.
     * (3) mediaType - Recording media type, can be "video"/"audio"/"image".
     * (4) streamProfile - Detailed device stream related parameters.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param mediaType
     * @param streamProfile
     */
    public boolean startRecordingTask(long deviceId, int channel, String mediaType, String streamProfile) throws org.apache.thrift.TException;

    /**
     * Stops a recording task for recording server.
     * The recorded media files will be kept in case started again in future.
     * (1) deviceId - Device ID.
     * (2) channel - The requested channel.
     * (3) mediaType - Recording media type, can be "video"/"audio"/"image".
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param mediaType
     */
    public boolean stopRecordingTask(long deviceId, int channel, String mediaType) throws org.apache.thrift.TException;

    /**
     * Terminates a recording task for recording server.
     * The recorded media files will be removed.
     * (1) deviceId - Device ID.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     */
    public boolean terminateRecordingTask(long deviceId) throws org.apache.thrift.TException;

    /**
     * Get recording details of the stream files.
     * (1) deviceId - Device ID.
     * (2) channel - The requested channel.
     * (3) deviceKey - The unique device key.
     * (4) mediaType - Recording media type, can be "video"/"audio"/"image".
     * (5) beginTime - Begin time.
     * (6) endTime - End time.
     * RETURN a structure of StreamFileDetails.
     * 
     * @param deviceId
     * @param channel
     * @param deviceKey
     * @param mediaType
     * @param beginTime
     * @param endTime
     */
    public List<com.kaisquare.core.thrift.StreamFileDetails> getRecordingDetails(long deviceId, int channel, String deviceKey, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException;

    /**
     * Trigger an event recording.
     * (1) deviceId - Device ID.
     * (2) channel - Channel.
     * (3) mediaType - Media type, can be "video"/"audio"/"image".
     * (4) eventId - Unique string to identify an event.
     * (5) duration - Duration of this event, unit: second.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param mediaType
     * @param eventId
     * @param duration
     */
    public boolean triggerEventRecording(long deviceId, int channel, String mediaType, String eventId, int duration) throws org.apache.thrift.TException;

    /**
     * Get an event recording.
     * (1) deviceId - Device ID.
     * (2) channel - Channel.
     * (3) mediaType - Media type, can be "video"/"audio"/"image".
     * (4) eventId - Unique string to identify an event.
     * RETURN the path of the event file.
     * 
     * @param deviceId
     * @param channel
     * @param mediaType
     * @param eventId
     */
    public String getEventRecording(long deviceId, int channel, String mediaType, String eventId) throws org.apache.thrift.TException;

    /**
     * Trigger a time specified recording, generate one video according to the begin and end time.
     * (1) deviceId - Device ID.
     * (2) channel - Channel.
     * (3) mediaType - Media type, can be "video"/"audio".
     * (4) beginTime - Begin time.
     * (5) endTime - End time.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param mediaType
     * @param beginTime
     * @param endTime
     */
    public boolean triggerSpecifiedRecording(long deviceId, int channel, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException;

    /**
     * Get a time specified recording.
     * (1) deviceId - Device ID.
     * (2) channel - Channel.
     * (3) mediaType - Media type, can be "video"/"audio".
     * (4) beginTime - Begin time.
     * (5) endTime - End time.
     * RETURN the path of the recording file.
     * 
     * @param deviceId
     * @param channel
     * @param mediaType
     * @param beginTime
     * @param endTime
     */
    public String getSpecifiedRecording(long deviceId, int channel, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException;

    /**
     * Trigger recording server to upload media files to KUP.
     * (1) deviceId - Device ID.
     * (2) channel - Channel.
     * (3) mediaType - Media type, can be "video"/"audio"/"image".
     * (4) beginTime - Begin time.
     * (5) endTime - End time.
     * RETURN file begin time list.
     * 
     * @param deviceId
     * @param channel
     * @param mediaType
     * @param beginTime
     * @param endTime
     */
    public List<String> startRecordingUpload(long deviceId, int channel, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException;

    /**
     * Trigger recording server to stop uploading media files to KUP.
     * (1) deviceId - Device ID.
     * (2) channel - Channel.
     * (3) mediaType - Media type, can be "video"/"audio"/"image".
     * (4) fileTime - File begin time list.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param mediaType
     * @param fileTime
     */
    public boolean stopRecordingUpload(long deviceId, int channel, String mediaType, List<String> fileTime) throws org.apache.thrift.TException;

    /**
     * Get the stream's uploading status.
     * 
     * (1) streamFileDetails - Please refer to CommStructures.StreamFileDetails
     * 
     * Returns list of stream file status.
     * 
     * @param streamFileDetails
     */
    public List<com.kaisquare.core.thrift.StreamFileDetails> getStreamStatus(List<com.kaisquare.core.thrift.StreamFileDetails> streamFileDetails) throws org.apache.thrift.TException;

    /**
     * Remove a media file from recording server.
     * (1) deviceId - Device ID.
     * (2) channel - Device channel.
     * (3) mediaType - Media type, can be "video"/"audio"/"image".
     * (4) mediaInfo - Additional details associated with the remove action, example of the json string:
     *                {"mac":"d0:27:88:e7:70:ad","time":"20141127140012","group":"groupX"}
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param mediaType
     * @param mediaInfo
     */
    public boolean removeMediaFile(long deviceId, int channel, String mediaType, String mediaInfo) throws org.apache.thrift.TException;

    /**
     * Returns list of recording server storage status.
     */
    public List<com.kaisquare.core.thrift.StorageInfo> getStorageStatus() throws org.apache.thrift.TException;

    /**
     * Get recording server report for diagnosis.
     * (1) deviceId - Device ID.
     * If deviceId is 0, return the general report,
     * else return the device specified report.
     * RETURN json formatted recording server report.
     * 
     * @param deviceId
     */
    public String getRecordingServerReport(long deviceId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getServerID(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getServerID_call> resultHandler) throws org.apache.thrift.TException;

    public void setGlobalConfiguration(String configurations, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setGlobalConfiguration_call> resultHandler) throws org.apache.thrift.TException;

    public void setDeviceConfiguration(long deviceId, int channel, String configurations, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setDeviceConfiguration_call> resultHandler) throws org.apache.thrift.TException;

    public void setDeviceSnapshot(long deviceId, int channel, ByteBuffer snapshot, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setDeviceSnapshot_call> resultHandler) throws org.apache.thrift.TException;

    public void startRecordingTask(long deviceId, int channel, String mediaType, String streamProfile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startRecordingTask_call> resultHandler) throws org.apache.thrift.TException;

    public void stopRecordingTask(long deviceId, int channel, String mediaType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopRecordingTask_call> resultHandler) throws org.apache.thrift.TException;

    public void terminateRecordingTask(long deviceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.terminateRecordingTask_call> resultHandler) throws org.apache.thrift.TException;

    public void getRecordingDetails(long deviceId, int channel, String deviceKey, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRecordingDetails_call> resultHandler) throws org.apache.thrift.TException;

    public void triggerEventRecording(long deviceId, int channel, String mediaType, String eventId, int duration, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.triggerEventRecording_call> resultHandler) throws org.apache.thrift.TException;

    public void getEventRecording(long deviceId, int channel, String mediaType, String eventId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEventRecording_call> resultHandler) throws org.apache.thrift.TException;

    public void triggerSpecifiedRecording(long deviceId, int channel, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.triggerSpecifiedRecording_call> resultHandler) throws org.apache.thrift.TException;

    public void getSpecifiedRecording(long deviceId, int channel, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getSpecifiedRecording_call> resultHandler) throws org.apache.thrift.TException;

    public void startRecordingUpload(long deviceId, int channel, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startRecordingUpload_call> resultHandler) throws org.apache.thrift.TException;

    public void stopRecordingUpload(long deviceId, int channel, String mediaType, List<String> fileTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopRecordingUpload_call> resultHandler) throws org.apache.thrift.TException;

    public void getStreamStatus(List<com.kaisquare.core.thrift.StreamFileDetails> streamFileDetails, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStreamStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void removeMediaFile(long deviceId, int channel, String mediaType, String mediaInfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeMediaFile_call> resultHandler) throws org.apache.thrift.TException;

    public void getStorageStatus(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStorageStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void getRecordingServerReport(long deviceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRecordingServerReport_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long getServerID() throws org.apache.thrift.TException
    {
      send_getServerID();
      return recv_getServerID();
    }

    public void send_getServerID() throws org.apache.thrift.TException
    {
      getServerID_args args = new getServerID_args();
      sendBase("getServerID", args);
    }

    public long recv_getServerID() throws org.apache.thrift.TException
    {
      getServerID_result result = new getServerID_result();
      receiveBase(result, "getServerID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServerID failed: unknown result");
    }

    public boolean setGlobalConfiguration(String configurations) throws org.apache.thrift.TException
    {
      send_setGlobalConfiguration(configurations);
      return recv_setGlobalConfiguration();
    }

    public void send_setGlobalConfiguration(String configurations) throws org.apache.thrift.TException
    {
      setGlobalConfiguration_args args = new setGlobalConfiguration_args();
      args.setConfigurations(configurations);
      sendBase("setGlobalConfiguration", args);
    }

    public boolean recv_setGlobalConfiguration() throws org.apache.thrift.TException
    {
      setGlobalConfiguration_result result = new setGlobalConfiguration_result();
      receiveBase(result, "setGlobalConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setGlobalConfiguration failed: unknown result");
    }

    public boolean setDeviceConfiguration(long deviceId, int channel, String configurations) throws org.apache.thrift.TException
    {
      send_setDeviceConfiguration(deviceId, channel, configurations);
      return recv_setDeviceConfiguration();
    }

    public void send_setDeviceConfiguration(long deviceId, int channel, String configurations) throws org.apache.thrift.TException
    {
      setDeviceConfiguration_args args = new setDeviceConfiguration_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setConfigurations(configurations);
      sendBase("setDeviceConfiguration", args);
    }

    public boolean recv_setDeviceConfiguration() throws org.apache.thrift.TException
    {
      setDeviceConfiguration_result result = new setDeviceConfiguration_result();
      receiveBase(result, "setDeviceConfiguration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setDeviceConfiguration failed: unknown result");
    }

    public boolean setDeviceSnapshot(long deviceId, int channel, ByteBuffer snapshot) throws org.apache.thrift.TException
    {
      send_setDeviceSnapshot(deviceId, channel, snapshot);
      return recv_setDeviceSnapshot();
    }

    public void send_setDeviceSnapshot(long deviceId, int channel, ByteBuffer snapshot) throws org.apache.thrift.TException
    {
      setDeviceSnapshot_args args = new setDeviceSnapshot_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setSnapshot(snapshot);
      sendBase("setDeviceSnapshot", args);
    }

    public boolean recv_setDeviceSnapshot() throws org.apache.thrift.TException
    {
      setDeviceSnapshot_result result = new setDeviceSnapshot_result();
      receiveBase(result, "setDeviceSnapshot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setDeviceSnapshot failed: unknown result");
    }

    public boolean startRecordingTask(long deviceId, int channel, String mediaType, String streamProfile) throws org.apache.thrift.TException
    {
      send_startRecordingTask(deviceId, channel, mediaType, streamProfile);
      return recv_startRecordingTask();
    }

    public void send_startRecordingTask(long deviceId, int channel, String mediaType, String streamProfile) throws org.apache.thrift.TException
    {
      startRecordingTask_args args = new startRecordingTask_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setMediaType(mediaType);
      args.setStreamProfile(streamProfile);
      sendBase("startRecordingTask", args);
    }

    public boolean recv_startRecordingTask() throws org.apache.thrift.TException
    {
      startRecordingTask_result result = new startRecordingTask_result();
      receiveBase(result, "startRecordingTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startRecordingTask failed: unknown result");
    }

    public boolean stopRecordingTask(long deviceId, int channel, String mediaType) throws org.apache.thrift.TException
    {
      send_stopRecordingTask(deviceId, channel, mediaType);
      return recv_stopRecordingTask();
    }

    public void send_stopRecordingTask(long deviceId, int channel, String mediaType) throws org.apache.thrift.TException
    {
      stopRecordingTask_args args = new stopRecordingTask_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setMediaType(mediaType);
      sendBase("stopRecordingTask", args);
    }

    public boolean recv_stopRecordingTask() throws org.apache.thrift.TException
    {
      stopRecordingTask_result result = new stopRecordingTask_result();
      receiveBase(result, "stopRecordingTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopRecordingTask failed: unknown result");
    }

    public boolean terminateRecordingTask(long deviceId) throws org.apache.thrift.TException
    {
      send_terminateRecordingTask(deviceId);
      return recv_terminateRecordingTask();
    }

    public void send_terminateRecordingTask(long deviceId) throws org.apache.thrift.TException
    {
      terminateRecordingTask_args args = new terminateRecordingTask_args();
      args.setDeviceId(deviceId);
      sendBase("terminateRecordingTask", args);
    }

    public boolean recv_terminateRecordingTask() throws org.apache.thrift.TException
    {
      terminateRecordingTask_result result = new terminateRecordingTask_result();
      receiveBase(result, "terminateRecordingTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "terminateRecordingTask failed: unknown result");
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> getRecordingDetails(long deviceId, int channel, String deviceKey, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException
    {
      send_getRecordingDetails(deviceId, channel, deviceKey, mediaType, beginTime, endTime);
      return recv_getRecordingDetails();
    }

    public void send_getRecordingDetails(long deviceId, int channel, String deviceKey, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException
    {
      getRecordingDetails_args args = new getRecordingDetails_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setDeviceKey(deviceKey);
      args.setMediaType(mediaType);
      args.setBeginTime(beginTime);
      args.setEndTime(endTime);
      sendBase("getRecordingDetails", args);
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> recv_getRecordingDetails() throws org.apache.thrift.TException
    {
      getRecordingDetails_result result = new getRecordingDetails_result();
      receiveBase(result, "getRecordingDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordingDetails failed: unknown result");
    }

    public boolean triggerEventRecording(long deviceId, int channel, String mediaType, String eventId, int duration) throws org.apache.thrift.TException
    {
      send_triggerEventRecording(deviceId, channel, mediaType, eventId, duration);
      return recv_triggerEventRecording();
    }

    public void send_triggerEventRecording(long deviceId, int channel, String mediaType, String eventId, int duration) throws org.apache.thrift.TException
    {
      triggerEventRecording_args args = new triggerEventRecording_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setMediaType(mediaType);
      args.setEventId(eventId);
      args.setDuration(duration);
      sendBase("triggerEventRecording", args);
    }

    public boolean recv_triggerEventRecording() throws org.apache.thrift.TException
    {
      triggerEventRecording_result result = new triggerEventRecording_result();
      receiveBase(result, "triggerEventRecording");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "triggerEventRecording failed: unknown result");
    }

    public String getEventRecording(long deviceId, int channel, String mediaType, String eventId) throws org.apache.thrift.TException
    {
      send_getEventRecording(deviceId, channel, mediaType, eventId);
      return recv_getEventRecording();
    }

    public void send_getEventRecording(long deviceId, int channel, String mediaType, String eventId) throws org.apache.thrift.TException
    {
      getEventRecording_args args = new getEventRecording_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setMediaType(mediaType);
      args.setEventId(eventId);
      sendBase("getEventRecording", args);
    }

    public String recv_getEventRecording() throws org.apache.thrift.TException
    {
      getEventRecording_result result = new getEventRecording_result();
      receiveBase(result, "getEventRecording");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEventRecording failed: unknown result");
    }

    public boolean triggerSpecifiedRecording(long deviceId, int channel, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException
    {
      send_triggerSpecifiedRecording(deviceId, channel, mediaType, beginTime, endTime);
      return recv_triggerSpecifiedRecording();
    }

    public void send_triggerSpecifiedRecording(long deviceId, int channel, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException
    {
      triggerSpecifiedRecording_args args = new triggerSpecifiedRecording_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setMediaType(mediaType);
      args.setBeginTime(beginTime);
      args.setEndTime(endTime);
      sendBase("triggerSpecifiedRecording", args);
    }

    public boolean recv_triggerSpecifiedRecording() throws org.apache.thrift.TException
    {
      triggerSpecifiedRecording_result result = new triggerSpecifiedRecording_result();
      receiveBase(result, "triggerSpecifiedRecording");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "triggerSpecifiedRecording failed: unknown result");
    }

    public String getSpecifiedRecording(long deviceId, int channel, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException
    {
      send_getSpecifiedRecording(deviceId, channel, mediaType, beginTime, endTime);
      return recv_getSpecifiedRecording();
    }

    public void send_getSpecifiedRecording(long deviceId, int channel, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException
    {
      getSpecifiedRecording_args args = new getSpecifiedRecording_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setMediaType(mediaType);
      args.setBeginTime(beginTime);
      args.setEndTime(endTime);
      sendBase("getSpecifiedRecording", args);
    }

    public String recv_getSpecifiedRecording() throws org.apache.thrift.TException
    {
      getSpecifiedRecording_result result = new getSpecifiedRecording_result();
      receiveBase(result, "getSpecifiedRecording");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSpecifiedRecording failed: unknown result");
    }

    public List<String> startRecordingUpload(long deviceId, int channel, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException
    {
      send_startRecordingUpload(deviceId, channel, mediaType, beginTime, endTime);
      return recv_startRecordingUpload();
    }

    public void send_startRecordingUpload(long deviceId, int channel, String mediaType, String beginTime, String endTime) throws org.apache.thrift.TException
    {
      startRecordingUpload_args args = new startRecordingUpload_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setMediaType(mediaType);
      args.setBeginTime(beginTime);
      args.setEndTime(endTime);
      sendBase("startRecordingUpload", args);
    }

    public List<String> recv_startRecordingUpload() throws org.apache.thrift.TException
    {
      startRecordingUpload_result result = new startRecordingUpload_result();
      receiveBase(result, "startRecordingUpload");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startRecordingUpload failed: unknown result");
    }

    public boolean stopRecordingUpload(long deviceId, int channel, String mediaType, List<String> fileTime) throws org.apache.thrift.TException
    {
      send_stopRecordingUpload(deviceId, channel, mediaType, fileTime);
      return recv_stopRecordingUpload();
    }

    public void send_stopRecordingUpload(long deviceId, int channel, String mediaType, List<String> fileTime) throws org.apache.thrift.TException
    {
      stopRecordingUpload_args args = new stopRecordingUpload_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setMediaType(mediaType);
      args.setFileTime(fileTime);
      sendBase("stopRecordingUpload", args);
    }

    public boolean recv_stopRecordingUpload() throws org.apache.thrift.TException
    {
      stopRecordingUpload_result result = new stopRecordingUpload_result();
      receiveBase(result, "stopRecordingUpload");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopRecordingUpload failed: unknown result");
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> getStreamStatus(List<com.kaisquare.core.thrift.StreamFileDetails> streamFileDetails) throws org.apache.thrift.TException
    {
      send_getStreamStatus(streamFileDetails);
      return recv_getStreamStatus();
    }

    public void send_getStreamStatus(List<com.kaisquare.core.thrift.StreamFileDetails> streamFileDetails) throws org.apache.thrift.TException
    {
      getStreamStatus_args args = new getStreamStatus_args();
      args.setStreamFileDetails(streamFileDetails);
      sendBase("getStreamStatus", args);
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> recv_getStreamStatus() throws org.apache.thrift.TException
    {
      getStreamStatus_result result = new getStreamStatus_result();
      receiveBase(result, "getStreamStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStreamStatus failed: unknown result");
    }

    public boolean removeMediaFile(long deviceId, int channel, String mediaType, String mediaInfo) throws org.apache.thrift.TException
    {
      send_removeMediaFile(deviceId, channel, mediaType, mediaInfo);
      return recv_removeMediaFile();
    }

    public void send_removeMediaFile(long deviceId, int channel, String mediaType, String mediaInfo) throws org.apache.thrift.TException
    {
      removeMediaFile_args args = new removeMediaFile_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setMediaType(mediaType);
      args.setMediaInfo(mediaInfo);
      sendBase("removeMediaFile", args);
    }

    public boolean recv_removeMediaFile() throws org.apache.thrift.TException
    {
      removeMediaFile_result result = new removeMediaFile_result();
      receiveBase(result, "removeMediaFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeMediaFile failed: unknown result");
    }

    public List<com.kaisquare.core.thrift.StorageInfo> getStorageStatus() throws org.apache.thrift.TException
    {
      send_getStorageStatus();
      return recv_getStorageStatus();
    }

    public void send_getStorageStatus() throws org.apache.thrift.TException
    {
      getStorageStatus_args args = new getStorageStatus_args();
      sendBase("getStorageStatus", args);
    }

    public List<com.kaisquare.core.thrift.StorageInfo> recv_getStorageStatus() throws org.apache.thrift.TException
    {
      getStorageStatus_result result = new getStorageStatus_result();
      receiveBase(result, "getStorageStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStorageStatus failed: unknown result");
    }

    public String getRecordingServerReport(long deviceId) throws org.apache.thrift.TException
    {
      send_getRecordingServerReport(deviceId);
      return recv_getRecordingServerReport();
    }

    public void send_getRecordingServerReport(long deviceId) throws org.apache.thrift.TException
    {
      getRecordingServerReport_args args = new getRecordingServerReport_args();
      args.setDeviceId(deviceId);
      sendBase("getRecordingServerReport", args);
    }

    public String recv_getRecordingServerReport() throws org.apache.thrift.TException
    {
      getRecordingServerReport_result result = new getRecordingServerReport_result();
      receiveBase(result, "getRecordingServerReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordingServerReport failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getServerID(org.apache.thrift.async.AsyncMethodCallback<getServerID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getServerID_call method_call = new getServerID_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getServerID_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getServerID_call(org.apache.thrift.async.AsyncMethodCallback<getServerID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServerID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getServerID_args args = new getServerID_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getServerID();
      }
    }

    public void setGlobalConfiguration(String configurations, org.apache.thrift.async.AsyncMethodCallback<setGlobalConfiguration_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setGlobalConfiguration_call method_call = new setGlobalConfiguration_call(configurations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setGlobalConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String configurations;
      public setGlobalConfiguration_call(String configurations, org.apache.thrift.async.AsyncMethodCallback<setGlobalConfiguration_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.configurations = configurations;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setGlobalConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setGlobalConfiguration_args args = new setGlobalConfiguration_args();
        args.setConfigurations(configurations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setGlobalConfiguration();
      }
    }

    public void setDeviceConfiguration(long deviceId, int channel, String configurations, org.apache.thrift.async.AsyncMethodCallback<setDeviceConfiguration_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDeviceConfiguration_call method_call = new setDeviceConfiguration_call(deviceId, channel, configurations, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDeviceConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String configurations;
      public setDeviceConfiguration_call(long deviceId, int channel, String configurations, org.apache.thrift.async.AsyncMethodCallback<setDeviceConfiguration_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.configurations = configurations;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDeviceConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDeviceConfiguration_args args = new setDeviceConfiguration_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setConfigurations(configurations);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setDeviceConfiguration();
      }
    }

    public void setDeviceSnapshot(long deviceId, int channel, ByteBuffer snapshot, org.apache.thrift.async.AsyncMethodCallback<setDeviceSnapshot_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDeviceSnapshot_call method_call = new setDeviceSnapshot_call(deviceId, channel, snapshot, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDeviceSnapshot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private ByteBuffer snapshot;
      public setDeviceSnapshot_call(long deviceId, int channel, ByteBuffer snapshot, org.apache.thrift.async.AsyncMethodCallback<setDeviceSnapshot_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.snapshot = snapshot;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDeviceSnapshot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDeviceSnapshot_args args = new setDeviceSnapshot_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setSnapshot(snapshot);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setDeviceSnapshot();
      }
    }

    public void startRecordingTask(long deviceId, int channel, String mediaType, String streamProfile, org.apache.thrift.async.AsyncMethodCallback<startRecordingTask_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startRecordingTask_call method_call = new startRecordingTask_call(deviceId, channel, mediaType, streamProfile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startRecordingTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String mediaType;
      private String streamProfile;
      public startRecordingTask_call(long deviceId, int channel, String mediaType, String streamProfile, org.apache.thrift.async.AsyncMethodCallback<startRecordingTask_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.mediaType = mediaType;
        this.streamProfile = streamProfile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startRecordingTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startRecordingTask_args args = new startRecordingTask_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setMediaType(mediaType);
        args.setStreamProfile(streamProfile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startRecordingTask();
      }
    }

    public void stopRecordingTask(long deviceId, int channel, String mediaType, org.apache.thrift.async.AsyncMethodCallback<stopRecordingTask_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopRecordingTask_call method_call = new stopRecordingTask_call(deviceId, channel, mediaType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopRecordingTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String mediaType;
      public stopRecordingTask_call(long deviceId, int channel, String mediaType, org.apache.thrift.async.AsyncMethodCallback<stopRecordingTask_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.mediaType = mediaType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopRecordingTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopRecordingTask_args args = new stopRecordingTask_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setMediaType(mediaType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopRecordingTask();
      }
    }

    public void terminateRecordingTask(long deviceId, org.apache.thrift.async.AsyncMethodCallback<terminateRecordingTask_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminateRecordingTask_call method_call = new terminateRecordingTask_call(deviceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminateRecordingTask_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      public terminateRecordingTask_call(long deviceId, org.apache.thrift.async.AsyncMethodCallback<terminateRecordingTask_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminateRecordingTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminateRecordingTask_args args = new terminateRecordingTask_args();
        args.setDeviceId(deviceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_terminateRecordingTask();
      }
    }

    public void getRecordingDetails(long deviceId, int channel, String deviceKey, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<getRecordingDetails_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordingDetails_call method_call = new getRecordingDetails_call(deviceId, channel, deviceKey, mediaType, beginTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordingDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String deviceKey;
      private String mediaType;
      private String beginTime;
      private String endTime;
      public getRecordingDetails_call(long deviceId, int channel, String deviceKey, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<getRecordingDetails_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.deviceKey = deviceKey;
        this.mediaType = mediaType;
        this.beginTime = beginTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordingDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordingDetails_args args = new getRecordingDetails_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setDeviceKey(deviceKey);
        args.setMediaType(mediaType);
        args.setBeginTime(beginTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.kaisquare.core.thrift.StreamFileDetails> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordingDetails();
      }
    }

    public void triggerEventRecording(long deviceId, int channel, String mediaType, String eventId, int duration, org.apache.thrift.async.AsyncMethodCallback<triggerEventRecording_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      triggerEventRecording_call method_call = new triggerEventRecording_call(deviceId, channel, mediaType, eventId, duration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class triggerEventRecording_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String mediaType;
      private String eventId;
      private int duration;
      public triggerEventRecording_call(long deviceId, int channel, String mediaType, String eventId, int duration, org.apache.thrift.async.AsyncMethodCallback<triggerEventRecording_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.mediaType = mediaType;
        this.eventId = eventId;
        this.duration = duration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("triggerEventRecording", org.apache.thrift.protocol.TMessageType.CALL, 0));
        triggerEventRecording_args args = new triggerEventRecording_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setMediaType(mediaType);
        args.setEventId(eventId);
        args.setDuration(duration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_triggerEventRecording();
      }
    }

    public void getEventRecording(long deviceId, int channel, String mediaType, String eventId, org.apache.thrift.async.AsyncMethodCallback<getEventRecording_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEventRecording_call method_call = new getEventRecording_call(deviceId, channel, mediaType, eventId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEventRecording_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String mediaType;
      private String eventId;
      public getEventRecording_call(long deviceId, int channel, String mediaType, String eventId, org.apache.thrift.async.AsyncMethodCallback<getEventRecording_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.mediaType = mediaType;
        this.eventId = eventId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEventRecording", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEventRecording_args args = new getEventRecording_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setMediaType(mediaType);
        args.setEventId(eventId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEventRecording();
      }
    }

    public void triggerSpecifiedRecording(long deviceId, int channel, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<triggerSpecifiedRecording_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      triggerSpecifiedRecording_call method_call = new triggerSpecifiedRecording_call(deviceId, channel, mediaType, beginTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class triggerSpecifiedRecording_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String mediaType;
      private String beginTime;
      private String endTime;
      public triggerSpecifiedRecording_call(long deviceId, int channel, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<triggerSpecifiedRecording_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.mediaType = mediaType;
        this.beginTime = beginTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("triggerSpecifiedRecording", org.apache.thrift.protocol.TMessageType.CALL, 0));
        triggerSpecifiedRecording_args args = new triggerSpecifiedRecording_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setMediaType(mediaType);
        args.setBeginTime(beginTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_triggerSpecifiedRecording();
      }
    }

    public void getSpecifiedRecording(long deviceId, int channel, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<getSpecifiedRecording_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSpecifiedRecording_call method_call = new getSpecifiedRecording_call(deviceId, channel, mediaType, beginTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSpecifiedRecording_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String mediaType;
      private String beginTime;
      private String endTime;
      public getSpecifiedRecording_call(long deviceId, int channel, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<getSpecifiedRecording_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.mediaType = mediaType;
        this.beginTime = beginTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSpecifiedRecording", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSpecifiedRecording_args args = new getSpecifiedRecording_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setMediaType(mediaType);
        args.setBeginTime(beginTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSpecifiedRecording();
      }
    }

    public void startRecordingUpload(long deviceId, int channel, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<startRecordingUpload_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startRecordingUpload_call method_call = new startRecordingUpload_call(deviceId, channel, mediaType, beginTime, endTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startRecordingUpload_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String mediaType;
      private String beginTime;
      private String endTime;
      public startRecordingUpload_call(long deviceId, int channel, String mediaType, String beginTime, String endTime, org.apache.thrift.async.AsyncMethodCallback<startRecordingUpload_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.mediaType = mediaType;
        this.beginTime = beginTime;
        this.endTime = endTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startRecordingUpload", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startRecordingUpload_args args = new startRecordingUpload_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setMediaType(mediaType);
        args.setBeginTime(beginTime);
        args.setEndTime(endTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startRecordingUpload();
      }
    }

    public void stopRecordingUpload(long deviceId, int channel, String mediaType, List<String> fileTime, org.apache.thrift.async.AsyncMethodCallback<stopRecordingUpload_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopRecordingUpload_call method_call = new stopRecordingUpload_call(deviceId, channel, mediaType, fileTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopRecordingUpload_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String mediaType;
      private List<String> fileTime;
      public stopRecordingUpload_call(long deviceId, int channel, String mediaType, List<String> fileTime, org.apache.thrift.async.AsyncMethodCallback<stopRecordingUpload_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.mediaType = mediaType;
        this.fileTime = fileTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopRecordingUpload", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopRecordingUpload_args args = new stopRecordingUpload_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setMediaType(mediaType);
        args.setFileTime(fileTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopRecordingUpload();
      }
    }

    public void getStreamStatus(List<com.kaisquare.core.thrift.StreamFileDetails> streamFileDetails, org.apache.thrift.async.AsyncMethodCallback<getStreamStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStreamStatus_call method_call = new getStreamStatus_call(streamFileDetails, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStreamStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.kaisquare.core.thrift.StreamFileDetails> streamFileDetails;
      public getStreamStatus_call(List<com.kaisquare.core.thrift.StreamFileDetails> streamFileDetails, org.apache.thrift.async.AsyncMethodCallback<getStreamStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.streamFileDetails = streamFileDetails;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStreamStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStreamStatus_args args = new getStreamStatus_args();
        args.setStreamFileDetails(streamFileDetails);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.kaisquare.core.thrift.StreamFileDetails> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStreamStatus();
      }
    }

    public void removeMediaFile(long deviceId, int channel, String mediaType, String mediaInfo, org.apache.thrift.async.AsyncMethodCallback<removeMediaFile_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeMediaFile_call method_call = new removeMediaFile_call(deviceId, channel, mediaType, mediaInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeMediaFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String mediaType;
      private String mediaInfo;
      public removeMediaFile_call(long deviceId, int channel, String mediaType, String mediaInfo, org.apache.thrift.async.AsyncMethodCallback<removeMediaFile_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.mediaType = mediaType;
        this.mediaInfo = mediaInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeMediaFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeMediaFile_args args = new removeMediaFile_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setMediaType(mediaType);
        args.setMediaInfo(mediaInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeMediaFile();
      }
    }

    public void getStorageStatus(org.apache.thrift.async.AsyncMethodCallback<getStorageStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStorageStatus_call method_call = new getStorageStatus_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStorageStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getStorageStatus_call(org.apache.thrift.async.AsyncMethodCallback<getStorageStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStorageStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStorageStatus_args args = new getStorageStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.kaisquare.core.thrift.StorageInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStorageStatus();
      }
    }

    public void getRecordingServerReport(long deviceId, org.apache.thrift.async.AsyncMethodCallback<getRecordingServerReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordingServerReport_call method_call = new getRecordingServerReport_call(deviceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordingServerReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      public getRecordingServerReport_call(long deviceId, org.apache.thrift.async.AsyncMethodCallback<getRecordingServerReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordingServerReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordingServerReport_args args = new getRecordingServerReport_args();
        args.setDeviceId(deviceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordingServerReport();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getServerID", new getServerID());
      processMap.put("setGlobalConfiguration", new setGlobalConfiguration());
      processMap.put("setDeviceConfiguration", new setDeviceConfiguration());
      processMap.put("setDeviceSnapshot", new setDeviceSnapshot());
      processMap.put("startRecordingTask", new startRecordingTask());
      processMap.put("stopRecordingTask", new stopRecordingTask());
      processMap.put("terminateRecordingTask", new terminateRecordingTask());
      processMap.put("getRecordingDetails", new getRecordingDetails());
      processMap.put("triggerEventRecording", new triggerEventRecording());
      processMap.put("getEventRecording", new getEventRecording());
      processMap.put("triggerSpecifiedRecording", new triggerSpecifiedRecording());
      processMap.put("getSpecifiedRecording", new getSpecifiedRecording());
      processMap.put("startRecordingUpload", new startRecordingUpload());
      processMap.put("stopRecordingUpload", new stopRecordingUpload());
      processMap.put("getStreamStatus", new getStreamStatus());
      processMap.put("removeMediaFile", new removeMediaFile());
      processMap.put("getStorageStatus", new getStorageStatus());
      processMap.put("getRecordingServerReport", new getRecordingServerReport());
      return processMap;
    }

    private static class getServerID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServerID_args> {
      public getServerID() {
        super("getServerID");
      }

      protected getServerID_args getEmptyArgsInstance() {
        return new getServerID_args();
      }

      protected getServerID_result getResult(I iface, getServerID_args args) throws org.apache.thrift.TException {
        getServerID_result result = new getServerID_result();
        result.success = iface.getServerID();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class setGlobalConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setGlobalConfiguration_args> {
      public setGlobalConfiguration() {
        super("setGlobalConfiguration");
      }

      protected setGlobalConfiguration_args getEmptyArgsInstance() {
        return new setGlobalConfiguration_args();
      }

      protected setGlobalConfiguration_result getResult(I iface, setGlobalConfiguration_args args) throws org.apache.thrift.TException {
        setGlobalConfiguration_result result = new setGlobalConfiguration_result();
        result.success = iface.setGlobalConfiguration(args.configurations);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class setDeviceConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDeviceConfiguration_args> {
      public setDeviceConfiguration() {
        super("setDeviceConfiguration");
      }

      protected setDeviceConfiguration_args getEmptyArgsInstance() {
        return new setDeviceConfiguration_args();
      }

      protected setDeviceConfiguration_result getResult(I iface, setDeviceConfiguration_args args) throws org.apache.thrift.TException {
        setDeviceConfiguration_result result = new setDeviceConfiguration_result();
        result.success = iface.setDeviceConfiguration(args.deviceId, args.channel, args.configurations);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class setDeviceSnapshot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDeviceSnapshot_args> {
      public setDeviceSnapshot() {
        super("setDeviceSnapshot");
      }

      protected setDeviceSnapshot_args getEmptyArgsInstance() {
        return new setDeviceSnapshot_args();
      }

      protected setDeviceSnapshot_result getResult(I iface, setDeviceSnapshot_args args) throws org.apache.thrift.TException {
        setDeviceSnapshot_result result = new setDeviceSnapshot_result();
        result.success = iface.setDeviceSnapshot(args.deviceId, args.channel, args.snapshot);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class startRecordingTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startRecordingTask_args> {
      public startRecordingTask() {
        super("startRecordingTask");
      }

      protected startRecordingTask_args getEmptyArgsInstance() {
        return new startRecordingTask_args();
      }

      protected startRecordingTask_result getResult(I iface, startRecordingTask_args args) throws org.apache.thrift.TException {
        startRecordingTask_result result = new startRecordingTask_result();
        result.success = iface.startRecordingTask(args.deviceId, args.channel, args.mediaType, args.streamProfile);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class stopRecordingTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopRecordingTask_args> {
      public stopRecordingTask() {
        super("stopRecordingTask");
      }

      protected stopRecordingTask_args getEmptyArgsInstance() {
        return new stopRecordingTask_args();
      }

      protected stopRecordingTask_result getResult(I iface, stopRecordingTask_args args) throws org.apache.thrift.TException {
        stopRecordingTask_result result = new stopRecordingTask_result();
        result.success = iface.stopRecordingTask(args.deviceId, args.channel, args.mediaType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class terminateRecordingTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminateRecordingTask_args> {
      public terminateRecordingTask() {
        super("terminateRecordingTask");
      }

      protected terminateRecordingTask_args getEmptyArgsInstance() {
        return new terminateRecordingTask_args();
      }

      protected terminateRecordingTask_result getResult(I iface, terminateRecordingTask_args args) throws org.apache.thrift.TException {
        terminateRecordingTask_result result = new terminateRecordingTask_result();
        result.success = iface.terminateRecordingTask(args.deviceId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getRecordingDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordingDetails_args> {
      public getRecordingDetails() {
        super("getRecordingDetails");
      }

      protected getRecordingDetails_args getEmptyArgsInstance() {
        return new getRecordingDetails_args();
      }

      protected getRecordingDetails_result getResult(I iface, getRecordingDetails_args args) throws org.apache.thrift.TException {
        getRecordingDetails_result result = new getRecordingDetails_result();
        result.success = iface.getRecordingDetails(args.deviceId, args.channel, args.deviceKey, args.mediaType, args.beginTime, args.endTime);
        return result;
      }
    }

    private static class triggerEventRecording<I extends Iface> extends org.apache.thrift.ProcessFunction<I, triggerEventRecording_args> {
      public triggerEventRecording() {
        super("triggerEventRecording");
      }

      protected triggerEventRecording_args getEmptyArgsInstance() {
        return new triggerEventRecording_args();
      }

      protected triggerEventRecording_result getResult(I iface, triggerEventRecording_args args) throws org.apache.thrift.TException {
        triggerEventRecording_result result = new triggerEventRecording_result();
        result.success = iface.triggerEventRecording(args.deviceId, args.channel, args.mediaType, args.eventId, args.duration);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getEventRecording<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEventRecording_args> {
      public getEventRecording() {
        super("getEventRecording");
      }

      protected getEventRecording_args getEmptyArgsInstance() {
        return new getEventRecording_args();
      }

      protected getEventRecording_result getResult(I iface, getEventRecording_args args) throws org.apache.thrift.TException {
        getEventRecording_result result = new getEventRecording_result();
        result.success = iface.getEventRecording(args.deviceId, args.channel, args.mediaType, args.eventId);
        return result;
      }
    }

    private static class triggerSpecifiedRecording<I extends Iface> extends org.apache.thrift.ProcessFunction<I, triggerSpecifiedRecording_args> {
      public triggerSpecifiedRecording() {
        super("triggerSpecifiedRecording");
      }

      protected triggerSpecifiedRecording_args getEmptyArgsInstance() {
        return new triggerSpecifiedRecording_args();
      }

      protected triggerSpecifiedRecording_result getResult(I iface, triggerSpecifiedRecording_args args) throws org.apache.thrift.TException {
        triggerSpecifiedRecording_result result = new triggerSpecifiedRecording_result();
        result.success = iface.triggerSpecifiedRecording(args.deviceId, args.channel, args.mediaType, args.beginTime, args.endTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getSpecifiedRecording<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSpecifiedRecording_args> {
      public getSpecifiedRecording() {
        super("getSpecifiedRecording");
      }

      protected getSpecifiedRecording_args getEmptyArgsInstance() {
        return new getSpecifiedRecording_args();
      }

      protected getSpecifiedRecording_result getResult(I iface, getSpecifiedRecording_args args) throws org.apache.thrift.TException {
        getSpecifiedRecording_result result = new getSpecifiedRecording_result();
        result.success = iface.getSpecifiedRecording(args.deviceId, args.channel, args.mediaType, args.beginTime, args.endTime);
        return result;
      }
    }

    private static class startRecordingUpload<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startRecordingUpload_args> {
      public startRecordingUpload() {
        super("startRecordingUpload");
      }

      protected startRecordingUpload_args getEmptyArgsInstance() {
        return new startRecordingUpload_args();
      }

      protected startRecordingUpload_result getResult(I iface, startRecordingUpload_args args) throws org.apache.thrift.TException {
        startRecordingUpload_result result = new startRecordingUpload_result();
        result.success = iface.startRecordingUpload(args.deviceId, args.channel, args.mediaType, args.beginTime, args.endTime);
        return result;
      }
    }

    private static class stopRecordingUpload<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopRecordingUpload_args> {
      public stopRecordingUpload() {
        super("stopRecordingUpload");
      }

      protected stopRecordingUpload_args getEmptyArgsInstance() {
        return new stopRecordingUpload_args();
      }

      protected stopRecordingUpload_result getResult(I iface, stopRecordingUpload_args args) throws org.apache.thrift.TException {
        stopRecordingUpload_result result = new stopRecordingUpload_result();
        result.success = iface.stopRecordingUpload(args.deviceId, args.channel, args.mediaType, args.fileTime);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getStreamStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStreamStatus_args> {
      public getStreamStatus() {
        super("getStreamStatus");
      }

      protected getStreamStatus_args getEmptyArgsInstance() {
        return new getStreamStatus_args();
      }

      protected getStreamStatus_result getResult(I iface, getStreamStatus_args args) throws org.apache.thrift.TException {
        getStreamStatus_result result = new getStreamStatus_result();
        result.success = iface.getStreamStatus(args.streamFileDetails);
        return result;
      }
    }

    private static class removeMediaFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeMediaFile_args> {
      public removeMediaFile() {
        super("removeMediaFile");
      }

      protected removeMediaFile_args getEmptyArgsInstance() {
        return new removeMediaFile_args();
      }

      protected removeMediaFile_result getResult(I iface, removeMediaFile_args args) throws org.apache.thrift.TException {
        removeMediaFile_result result = new removeMediaFile_result();
        result.success = iface.removeMediaFile(args.deviceId, args.channel, args.mediaType, args.mediaInfo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getStorageStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStorageStatus_args> {
      public getStorageStatus() {
        super("getStorageStatus");
      }

      protected getStorageStatus_args getEmptyArgsInstance() {
        return new getStorageStatus_args();
      }

      protected getStorageStatus_result getResult(I iface, getStorageStatus_args args) throws org.apache.thrift.TException {
        getStorageStatus_result result = new getStorageStatus_result();
        result.success = iface.getStorageStatus();
        return result;
      }
    }

    private static class getRecordingServerReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordingServerReport_args> {
      public getRecordingServerReport() {
        super("getRecordingServerReport");
      }

      protected getRecordingServerReport_args getEmptyArgsInstance() {
        return new getRecordingServerReport_args();
      }

      protected getRecordingServerReport_result getResult(I iface, getRecordingServerReport_args args) throws org.apache.thrift.TException {
        getRecordingServerReport_result result = new getRecordingServerReport_result();
        result.success = iface.getRecordingServerReport(args.deviceId);
        return result;
      }
    }

  }

  public static class getServerID_args implements org.apache.thrift.TBase<getServerID_args, getServerID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerID_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerID_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerID_args.class, metaDataMap);
    }

    public getServerID_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerID_args(getServerID_args other) {
    }

    public getServerID_args deepCopy() {
      return new getServerID_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerID_args)
        return this.equals((getServerID_args)that);
      return false;
    }

    public boolean equals(getServerID_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerID_args typedOther = (getServerID_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerID_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerID_argsStandardSchemeFactory implements SchemeFactory {
      public getServerID_argsStandardScheme getScheme() {
        return new getServerID_argsStandardScheme();
      }
    }

    private static class getServerID_argsStandardScheme extends StandardScheme<getServerID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerID_argsTupleSchemeFactory implements SchemeFactory {
      public getServerID_argsTupleScheme getScheme() {
        return new getServerID_argsTupleScheme();
      }
    }

    private static class getServerID_argsTupleScheme extends TupleScheme<getServerID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getServerID_result implements org.apache.thrift.TBase<getServerID_result, getServerID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerID_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerID_result.class, metaDataMap);
    }

    public getServerID_result() {
    }

    public getServerID_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerID_result(getServerID_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public getServerID_result deepCopy() {
      return new getServerID_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getServerID_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerID_result)
        return this.equals((getServerID_result)that);
      return false;
    }

    public boolean equals(getServerID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerID_result typedOther = (getServerID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerID_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerID_resultStandardSchemeFactory implements SchemeFactory {
      public getServerID_resultStandardScheme getScheme() {
        return new getServerID_resultStandardScheme();
      }
    }

    private static class getServerID_resultStandardScheme extends StandardScheme<getServerID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerID_resultTupleSchemeFactory implements SchemeFactory {
      public getServerID_resultTupleScheme getScheme() {
        return new getServerID_resultTupleScheme();
      }
    }

    private static class getServerID_resultTupleScheme extends TupleScheme<getServerID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setGlobalConfiguration_args implements org.apache.thrift.TBase<setGlobalConfiguration_args, setGlobalConfiguration_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setGlobalConfiguration_args");

    private static final org.apache.thrift.protocol.TField CONFIGURATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("configurations", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setGlobalConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setGlobalConfiguration_argsTupleSchemeFactory());
    }

    public String configurations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONFIGURATIONS((short)1, "configurations");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONFIGURATIONS
            return CONFIGURATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONFIGURATIONS, new org.apache.thrift.meta_data.FieldMetaData("configurations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setGlobalConfiguration_args.class, metaDataMap);
    }

    public setGlobalConfiguration_args() {
    }

    public setGlobalConfiguration_args(
      String configurations)
    {
      this();
      this.configurations = configurations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setGlobalConfiguration_args(setGlobalConfiguration_args other) {
      if (other.isSetConfigurations()) {
        this.configurations = other.configurations;
      }
    }

    public setGlobalConfiguration_args deepCopy() {
      return new setGlobalConfiguration_args(this);
    }

    @Override
    public void clear() {
      this.configurations = null;
    }

    public String getConfigurations() {
      return this.configurations;
    }

    public setGlobalConfiguration_args setConfigurations(String configurations) {
      this.configurations = configurations;
      return this;
    }

    public void unsetConfigurations() {
      this.configurations = null;
    }

    /** Returns true if field configurations is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurations() {
      return this.configurations != null;
    }

    public void setConfigurationsIsSet(boolean value) {
      if (!value) {
        this.configurations = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONFIGURATIONS:
        if (value == null) {
          unsetConfigurations();
        } else {
          setConfigurations((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONFIGURATIONS:
        return getConfigurations();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONFIGURATIONS:
        return isSetConfigurations();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setGlobalConfiguration_args)
        return this.equals((setGlobalConfiguration_args)that);
      return false;
    }

    public boolean equals(setGlobalConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_configurations = true && this.isSetConfigurations();
      boolean that_present_configurations = true && that.isSetConfigurations();
      if (this_present_configurations || that_present_configurations) {
        if (!(this_present_configurations && that_present_configurations))
          return false;
        if (!this.configurations.equals(that.configurations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setGlobalConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setGlobalConfiguration_args typedOther = (setGlobalConfiguration_args)other;

      lastComparison = Boolean.valueOf(isSetConfigurations()).compareTo(typedOther.isSetConfigurations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurations, typedOther.configurations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setGlobalConfiguration_args(");
      boolean first = true;

      sb.append("configurations:");
      if (this.configurations == null) {
        sb.append("null");
      } else {
        sb.append(this.configurations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setGlobalConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public setGlobalConfiguration_argsStandardScheme getScheme() {
        return new setGlobalConfiguration_argsStandardScheme();
      }
    }

    private static class setGlobalConfiguration_argsStandardScheme extends StandardScheme<setGlobalConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setGlobalConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONFIGURATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configurations = iprot.readString();
                struct.setConfigurationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setGlobalConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.configurations != null) {
          oprot.writeFieldBegin(CONFIGURATIONS_FIELD_DESC);
          oprot.writeString(struct.configurations);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setGlobalConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public setGlobalConfiguration_argsTupleScheme getScheme() {
        return new setGlobalConfiguration_argsTupleScheme();
      }
    }

    private static class setGlobalConfiguration_argsTupleScheme extends TupleScheme<setGlobalConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setGlobalConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConfigurations()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConfigurations()) {
          oprot.writeString(struct.configurations);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setGlobalConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.configurations = iprot.readString();
          struct.setConfigurationsIsSet(true);
        }
      }
    }

  }

  public static class setGlobalConfiguration_result implements org.apache.thrift.TBase<setGlobalConfiguration_result, setGlobalConfiguration_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setGlobalConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setGlobalConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setGlobalConfiguration_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setGlobalConfiguration_result.class, metaDataMap);
    }

    public setGlobalConfiguration_result() {
    }

    public setGlobalConfiguration_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setGlobalConfiguration_result(setGlobalConfiguration_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public setGlobalConfiguration_result deepCopy() {
      return new setGlobalConfiguration_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setGlobalConfiguration_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setGlobalConfiguration_result)
        return this.equals((setGlobalConfiguration_result)that);
      return false;
    }

    public boolean equals(setGlobalConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setGlobalConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setGlobalConfiguration_result typedOther = (setGlobalConfiguration_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setGlobalConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setGlobalConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public setGlobalConfiguration_resultStandardScheme getScheme() {
        return new setGlobalConfiguration_resultStandardScheme();
      }
    }

    private static class setGlobalConfiguration_resultStandardScheme extends StandardScheme<setGlobalConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setGlobalConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setGlobalConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setGlobalConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public setGlobalConfiguration_resultTupleScheme getScheme() {
        return new setGlobalConfiguration_resultTupleScheme();
      }
    }

    private static class setGlobalConfiguration_resultTupleScheme extends TupleScheme<setGlobalConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setGlobalConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setGlobalConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setDeviceConfiguration_args implements org.apache.thrift.TBase<setDeviceConfiguration_args, setDeviceConfiguration_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDeviceConfiguration_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CONFIGURATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("configurations", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDeviceConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDeviceConfiguration_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String configurations; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      CONFIGURATIONS((short)3, "configurations");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // CONFIGURATIONS
            return CONFIGURATIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONFIGURATIONS, new org.apache.thrift.meta_data.FieldMetaData("configurations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDeviceConfiguration_args.class, metaDataMap);
    }

    public setDeviceConfiguration_args() {
    }

    public setDeviceConfiguration_args(
      long deviceId,
      int channel,
      String configurations)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.configurations = configurations;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDeviceConfiguration_args(setDeviceConfiguration_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetConfigurations()) {
        this.configurations = other.configurations;
      }
    }

    public setDeviceConfiguration_args deepCopy() {
      return new setDeviceConfiguration_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.configurations = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public setDeviceConfiguration_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public setDeviceConfiguration_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getConfigurations() {
      return this.configurations;
    }

    public setDeviceConfiguration_args setConfigurations(String configurations) {
      this.configurations = configurations;
      return this;
    }

    public void unsetConfigurations() {
      this.configurations = null;
    }

    /** Returns true if field configurations is set (has been assigned a value) and false otherwise */
    public boolean isSetConfigurations() {
      return this.configurations != null;
    }

    public void setConfigurationsIsSet(boolean value) {
      if (!value) {
        this.configurations = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case CONFIGURATIONS:
        if (value == null) {
          unsetConfigurations();
        } else {
          setConfigurations((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case CONFIGURATIONS:
        return getConfigurations();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case CONFIGURATIONS:
        return isSetConfigurations();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDeviceConfiguration_args)
        return this.equals((setDeviceConfiguration_args)that);
      return false;
    }

    public boolean equals(setDeviceConfiguration_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_configurations = true && this.isSetConfigurations();
      boolean that_present_configurations = true && that.isSetConfigurations();
      if (this_present_configurations || that_present_configurations) {
        if (!(this_present_configurations && that_present_configurations))
          return false;
        if (!this.configurations.equals(that.configurations))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDeviceConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDeviceConfiguration_args typedOther = (setDeviceConfiguration_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfigurations()).compareTo(typedOther.isSetConfigurations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfigurations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configurations, typedOther.configurations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDeviceConfiguration_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("configurations:");
      if (this.configurations == null) {
        sb.append("null");
      } else {
        sb.append(this.configurations);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDeviceConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public setDeviceConfiguration_argsStandardScheme getScheme() {
        return new setDeviceConfiguration_argsStandardScheme();
      }
    }

    private static class setDeviceConfiguration_argsStandardScheme extends StandardScheme<setDeviceConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDeviceConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONFIGURATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.configurations = iprot.readString();
                struct.setConfigurationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDeviceConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.configurations != null) {
          oprot.writeFieldBegin(CONFIGURATIONS_FIELD_DESC);
          oprot.writeString(struct.configurations);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDeviceConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public setDeviceConfiguration_argsTupleScheme getScheme() {
        return new setDeviceConfiguration_argsTupleScheme();
      }
    }

    private static class setDeviceConfiguration_argsTupleScheme extends TupleScheme<setDeviceConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDeviceConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetConfigurations()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetConfigurations()) {
          oprot.writeString(struct.configurations);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDeviceConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.configurations = iprot.readString();
          struct.setConfigurationsIsSet(true);
        }
      }
    }

  }

  public static class setDeviceConfiguration_result implements org.apache.thrift.TBase<setDeviceConfiguration_result, setDeviceConfiguration_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDeviceConfiguration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDeviceConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDeviceConfiguration_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDeviceConfiguration_result.class, metaDataMap);
    }

    public setDeviceConfiguration_result() {
    }

    public setDeviceConfiguration_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDeviceConfiguration_result(setDeviceConfiguration_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public setDeviceConfiguration_result deepCopy() {
      return new setDeviceConfiguration_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setDeviceConfiguration_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDeviceConfiguration_result)
        return this.equals((setDeviceConfiguration_result)that);
      return false;
    }

    public boolean equals(setDeviceConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDeviceConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDeviceConfiguration_result typedOther = (setDeviceConfiguration_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDeviceConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDeviceConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public setDeviceConfiguration_resultStandardScheme getScheme() {
        return new setDeviceConfiguration_resultStandardScheme();
      }
    }

    private static class setDeviceConfiguration_resultStandardScheme extends StandardScheme<setDeviceConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDeviceConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDeviceConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDeviceConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public setDeviceConfiguration_resultTupleScheme getScheme() {
        return new setDeviceConfiguration_resultTupleScheme();
      }
    }

    private static class setDeviceConfiguration_resultTupleScheme extends TupleScheme<setDeviceConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDeviceConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDeviceConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setDeviceSnapshot_args implements org.apache.thrift.TBase<setDeviceSnapshot_args, setDeviceSnapshot_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDeviceSnapshot_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDeviceSnapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDeviceSnapshot_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public ByteBuffer snapshot; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      SNAPSHOT((short)3, "snapshot");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // SNAPSHOT
            return SNAPSHOT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("snapshot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDeviceSnapshot_args.class, metaDataMap);
    }

    public setDeviceSnapshot_args() {
    }

    public setDeviceSnapshot_args(
      long deviceId,
      int channel,
      ByteBuffer snapshot)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.snapshot = snapshot;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDeviceSnapshot_args(setDeviceSnapshot_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetSnapshot()) {
        this.snapshot = org.apache.thrift.TBaseHelper.copyBinary(other.snapshot);
;
      }
    }

    public setDeviceSnapshot_args deepCopy() {
      return new setDeviceSnapshot_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.snapshot = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public setDeviceSnapshot_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public setDeviceSnapshot_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public byte[] getSnapshot() {
      setSnapshot(org.apache.thrift.TBaseHelper.rightSize(snapshot));
      return snapshot == null ? null : snapshot.array();
    }

    public ByteBuffer bufferForSnapshot() {
      return snapshot;
    }

    public setDeviceSnapshot_args setSnapshot(byte[] snapshot) {
      setSnapshot(snapshot == null ? (ByteBuffer)null : ByteBuffer.wrap(snapshot));
      return this;
    }

    public setDeviceSnapshot_args setSnapshot(ByteBuffer snapshot) {
      this.snapshot = snapshot;
      return this;
    }

    public void unsetSnapshot() {
      this.snapshot = null;
    }

    /** Returns true if field snapshot is set (has been assigned a value) and false otherwise */
    public boolean isSetSnapshot() {
      return this.snapshot != null;
    }

    public void setSnapshotIsSet(boolean value) {
      if (!value) {
        this.snapshot = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case SNAPSHOT:
        if (value == null) {
          unsetSnapshot();
        } else {
          setSnapshot((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case SNAPSHOT:
        return getSnapshot();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case SNAPSHOT:
        return isSetSnapshot();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDeviceSnapshot_args)
        return this.equals((setDeviceSnapshot_args)that);
      return false;
    }

    public boolean equals(setDeviceSnapshot_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_snapshot = true && this.isSetSnapshot();
      boolean that_present_snapshot = true && that.isSetSnapshot();
      if (this_present_snapshot || that_present_snapshot) {
        if (!(this_present_snapshot && that_present_snapshot))
          return false;
        if (!this.snapshot.equals(that.snapshot))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDeviceSnapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDeviceSnapshot_args typedOther = (setDeviceSnapshot_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSnapshot()).compareTo(typedOther.isSetSnapshot());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnapshot()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot, typedOther.snapshot);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDeviceSnapshot_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("snapshot:");
      if (this.snapshot == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.snapshot, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDeviceSnapshot_argsStandardSchemeFactory implements SchemeFactory {
      public setDeviceSnapshot_argsStandardScheme getScheme() {
        return new setDeviceSnapshot_argsStandardScheme();
      }
    }

    private static class setDeviceSnapshot_argsStandardScheme extends StandardScheme<setDeviceSnapshot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDeviceSnapshot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SNAPSHOT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.snapshot = iprot.readBinary();
                struct.setSnapshotIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDeviceSnapshot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.snapshot != null) {
          oprot.writeFieldBegin(SNAPSHOT_FIELD_DESC);
          oprot.writeBinary(struct.snapshot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDeviceSnapshot_argsTupleSchemeFactory implements SchemeFactory {
      public setDeviceSnapshot_argsTupleScheme getScheme() {
        return new setDeviceSnapshot_argsTupleScheme();
      }
    }

    private static class setDeviceSnapshot_argsTupleScheme extends TupleScheme<setDeviceSnapshot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDeviceSnapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetSnapshot()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetSnapshot()) {
          oprot.writeBinary(struct.snapshot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDeviceSnapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.snapshot = iprot.readBinary();
          struct.setSnapshotIsSet(true);
        }
      }
    }

  }

  public static class setDeviceSnapshot_result implements org.apache.thrift.TBase<setDeviceSnapshot_result, setDeviceSnapshot_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDeviceSnapshot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDeviceSnapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDeviceSnapshot_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDeviceSnapshot_result.class, metaDataMap);
    }

    public setDeviceSnapshot_result() {
    }

    public setDeviceSnapshot_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDeviceSnapshot_result(setDeviceSnapshot_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public setDeviceSnapshot_result deepCopy() {
      return new setDeviceSnapshot_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setDeviceSnapshot_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDeviceSnapshot_result)
        return this.equals((setDeviceSnapshot_result)that);
      return false;
    }

    public boolean equals(setDeviceSnapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDeviceSnapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDeviceSnapshot_result typedOther = (setDeviceSnapshot_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDeviceSnapshot_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDeviceSnapshot_resultStandardSchemeFactory implements SchemeFactory {
      public setDeviceSnapshot_resultStandardScheme getScheme() {
        return new setDeviceSnapshot_resultStandardScheme();
      }
    }

    private static class setDeviceSnapshot_resultStandardScheme extends StandardScheme<setDeviceSnapshot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDeviceSnapshot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDeviceSnapshot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDeviceSnapshot_resultTupleSchemeFactory implements SchemeFactory {
      public setDeviceSnapshot_resultTupleScheme getScheme() {
        return new setDeviceSnapshot_resultTupleScheme();
      }
    }

    private static class setDeviceSnapshot_resultTupleScheme extends TupleScheme<setDeviceSnapshot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDeviceSnapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDeviceSnapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class startRecordingTask_args implements org.apache.thrift.TBase<startRecordingTask_args, startRecordingTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startRecordingTask_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField STREAM_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("streamProfile", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startRecordingTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startRecordingTask_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String mediaType; // required
    public String streamProfile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      MEDIA_TYPE((short)3, "mediaType"),
      STREAM_PROFILE((short)4, "streamProfile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 4: // STREAM_PROFILE
            return STREAM_PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("streamProfile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startRecordingTask_args.class, metaDataMap);
    }

    public startRecordingTask_args() {
    }

    public startRecordingTask_args(
      long deviceId,
      int channel,
      String mediaType,
      String streamProfile)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.mediaType = mediaType;
      this.streamProfile = streamProfile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startRecordingTask_args(startRecordingTask_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetStreamProfile()) {
        this.streamProfile = other.streamProfile;
      }
    }

    public startRecordingTask_args deepCopy() {
      return new startRecordingTask_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.mediaType = null;
      this.streamProfile = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public startRecordingTask_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public startRecordingTask_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public startRecordingTask_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getStreamProfile() {
      return this.streamProfile;
    }

    public startRecordingTask_args setStreamProfile(String streamProfile) {
      this.streamProfile = streamProfile;
      return this;
    }

    public void unsetStreamProfile() {
      this.streamProfile = null;
    }

    /** Returns true if field streamProfile is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamProfile() {
      return this.streamProfile != null;
    }

    public void setStreamProfileIsSet(boolean value) {
      if (!value) {
        this.streamProfile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case STREAM_PROFILE:
        if (value == null) {
          unsetStreamProfile();
        } else {
          setStreamProfile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case MEDIA_TYPE:
        return getMediaType();

      case STREAM_PROFILE:
        return getStreamProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case MEDIA_TYPE:
        return isSetMediaType();
      case STREAM_PROFILE:
        return isSetStreamProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startRecordingTask_args)
        return this.equals((startRecordingTask_args)that);
      return false;
    }

    public boolean equals(startRecordingTask_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_streamProfile = true && this.isSetStreamProfile();
      boolean that_present_streamProfile = true && that.isSetStreamProfile();
      if (this_present_streamProfile || that_present_streamProfile) {
        if (!(this_present_streamProfile && that_present_streamProfile))
          return false;
        if (!this.streamProfile.equals(that.streamProfile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startRecordingTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startRecordingTask_args typedOther = (startRecordingTask_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStreamProfile()).compareTo(typedOther.isSetStreamProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamProfile, typedOther.streamProfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startRecordingTask_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamProfile:");
      if (this.streamProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.streamProfile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startRecordingTask_argsStandardSchemeFactory implements SchemeFactory {
      public startRecordingTask_argsStandardScheme getScheme() {
        return new startRecordingTask_argsStandardScheme();
      }
    }

    private static class startRecordingTask_argsStandardScheme extends StandardScheme<startRecordingTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startRecordingTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STREAM_PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamProfile = iprot.readString();
                struct.setStreamProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startRecordingTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.streamProfile != null) {
          oprot.writeFieldBegin(STREAM_PROFILE_FIELD_DESC);
          oprot.writeString(struct.streamProfile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startRecordingTask_argsTupleSchemeFactory implements SchemeFactory {
      public startRecordingTask_argsTupleScheme getScheme() {
        return new startRecordingTask_argsTupleScheme();
      }
    }

    private static class startRecordingTask_argsTupleScheme extends TupleScheme<startRecordingTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetMediaType()) {
          optionals.set(2);
        }
        if (struct.isSetStreamProfile()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetStreamProfile()) {
          oprot.writeString(struct.streamProfile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.streamProfile = iprot.readString();
          struct.setStreamProfileIsSet(true);
        }
      }
    }

  }

  public static class startRecordingTask_result implements org.apache.thrift.TBase<startRecordingTask_result, startRecordingTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startRecordingTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startRecordingTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startRecordingTask_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startRecordingTask_result.class, metaDataMap);
    }

    public startRecordingTask_result() {
    }

    public startRecordingTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startRecordingTask_result(startRecordingTask_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public startRecordingTask_result deepCopy() {
      return new startRecordingTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public startRecordingTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startRecordingTask_result)
        return this.equals((startRecordingTask_result)that);
      return false;
    }

    public boolean equals(startRecordingTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startRecordingTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startRecordingTask_result typedOther = (startRecordingTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startRecordingTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startRecordingTask_resultStandardSchemeFactory implements SchemeFactory {
      public startRecordingTask_resultStandardScheme getScheme() {
        return new startRecordingTask_resultStandardScheme();
      }
    }

    private static class startRecordingTask_resultStandardScheme extends StandardScheme<startRecordingTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startRecordingTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startRecordingTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startRecordingTask_resultTupleSchemeFactory implements SchemeFactory {
      public startRecordingTask_resultTupleScheme getScheme() {
        return new startRecordingTask_resultTupleScheme();
      }
    }

    private static class startRecordingTask_resultTupleScheme extends TupleScheme<startRecordingTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stopRecordingTask_args implements org.apache.thrift.TBase<stopRecordingTask_args, stopRecordingTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopRecordingTask_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopRecordingTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopRecordingTask_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String mediaType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      MEDIA_TYPE((short)3, "mediaType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // MEDIA_TYPE
            return MEDIA_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopRecordingTask_args.class, metaDataMap);
    }

    public stopRecordingTask_args() {
    }

    public stopRecordingTask_args(
      long deviceId,
      int channel,
      String mediaType)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.mediaType = mediaType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopRecordingTask_args(stopRecordingTask_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
    }

    public stopRecordingTask_args deepCopy() {
      return new stopRecordingTask_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.mediaType = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public stopRecordingTask_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public stopRecordingTask_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public stopRecordingTask_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case MEDIA_TYPE:
        return getMediaType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case MEDIA_TYPE:
        return isSetMediaType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopRecordingTask_args)
        return this.equals((stopRecordingTask_args)that);
      return false;
    }

    public boolean equals(stopRecordingTask_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopRecordingTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopRecordingTask_args typedOther = (stopRecordingTask_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopRecordingTask_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopRecordingTask_argsStandardSchemeFactory implements SchemeFactory {
      public stopRecordingTask_argsStandardScheme getScheme() {
        return new stopRecordingTask_argsStandardScheme();
      }
    }

    private static class stopRecordingTask_argsStandardScheme extends StandardScheme<stopRecordingTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopRecordingTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopRecordingTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopRecordingTask_argsTupleSchemeFactory implements SchemeFactory {
      public stopRecordingTask_argsTupleScheme getScheme() {
        return new stopRecordingTask_argsTupleScheme();
      }
    }

    private static class stopRecordingTask_argsTupleScheme extends TupleScheme<stopRecordingTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetMediaType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
      }
    }

  }

  public static class stopRecordingTask_result implements org.apache.thrift.TBase<stopRecordingTask_result, stopRecordingTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopRecordingTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopRecordingTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopRecordingTask_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopRecordingTask_result.class, metaDataMap);
    }

    public stopRecordingTask_result() {
    }

    public stopRecordingTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopRecordingTask_result(stopRecordingTask_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public stopRecordingTask_result deepCopy() {
      return new stopRecordingTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public stopRecordingTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopRecordingTask_result)
        return this.equals((stopRecordingTask_result)that);
      return false;
    }

    public boolean equals(stopRecordingTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopRecordingTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopRecordingTask_result typedOther = (stopRecordingTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopRecordingTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopRecordingTask_resultStandardSchemeFactory implements SchemeFactory {
      public stopRecordingTask_resultStandardScheme getScheme() {
        return new stopRecordingTask_resultStandardScheme();
      }
    }

    private static class stopRecordingTask_resultStandardScheme extends StandardScheme<stopRecordingTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopRecordingTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopRecordingTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopRecordingTask_resultTupleSchemeFactory implements SchemeFactory {
      public stopRecordingTask_resultTupleScheme getScheme() {
        return new stopRecordingTask_resultTupleScheme();
      }
    }

    private static class stopRecordingTask_resultTupleScheme extends TupleScheme<stopRecordingTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class terminateRecordingTask_args implements org.apache.thrift.TBase<terminateRecordingTask_args, terminateRecordingTask_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateRecordingTask_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terminateRecordingTask_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terminateRecordingTask_argsTupleSchemeFactory());
    }

    public long deviceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateRecordingTask_args.class, metaDataMap);
    }

    public terminateRecordingTask_args() {
    }

    public terminateRecordingTask_args(
      long deviceId)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateRecordingTask_args(terminateRecordingTask_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
    }

    public terminateRecordingTask_args deepCopy() {
      return new terminateRecordingTask_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public terminateRecordingTask_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateRecordingTask_args)
        return this.equals((terminateRecordingTask_args)that);
      return false;
    }

    public boolean equals(terminateRecordingTask_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(terminateRecordingTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      terminateRecordingTask_args typedOther = (terminateRecordingTask_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terminateRecordingTask_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateRecordingTask_argsStandardSchemeFactory implements SchemeFactory {
      public terminateRecordingTask_argsStandardScheme getScheme() {
        return new terminateRecordingTask_argsStandardScheme();
      }
    }

    private static class terminateRecordingTask_argsStandardScheme extends StandardScheme<terminateRecordingTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateRecordingTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateRecordingTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateRecordingTask_argsTupleSchemeFactory implements SchemeFactory {
      public terminateRecordingTask_argsTupleScheme getScheme() {
        return new terminateRecordingTask_argsTupleScheme();
      }
    }

    private static class terminateRecordingTask_argsTupleScheme extends TupleScheme<terminateRecordingTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateRecordingTask_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
      }
    }

  }

  public static class terminateRecordingTask_result implements org.apache.thrift.TBase<terminateRecordingTask_result, terminateRecordingTask_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateRecordingTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new terminateRecordingTask_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new terminateRecordingTask_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateRecordingTask_result.class, metaDataMap);
    }

    public terminateRecordingTask_result() {
    }

    public terminateRecordingTask_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateRecordingTask_result(terminateRecordingTask_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public terminateRecordingTask_result deepCopy() {
      return new terminateRecordingTask_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public terminateRecordingTask_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateRecordingTask_result)
        return this.equals((terminateRecordingTask_result)that);
      return false;
    }

    public boolean equals(terminateRecordingTask_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(terminateRecordingTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      terminateRecordingTask_result typedOther = (terminateRecordingTask_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("terminateRecordingTask_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateRecordingTask_resultStandardSchemeFactory implements SchemeFactory {
      public terminateRecordingTask_resultStandardScheme getScheme() {
        return new terminateRecordingTask_resultStandardScheme();
      }
    }

    private static class terminateRecordingTask_resultStandardScheme extends StandardScheme<terminateRecordingTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateRecordingTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateRecordingTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateRecordingTask_resultTupleSchemeFactory implements SchemeFactory {
      public terminateRecordingTask_resultTupleScheme getScheme() {
        return new terminateRecordingTask_resultTupleScheme();
      }
    }

    private static class terminateRecordingTask_resultTupleScheme extends TupleScheme<terminateRecordingTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateRecordingTask_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecordingDetails_args implements org.apache.thrift.TBase<getRecordingDetails_args, getRecordingDetails_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingDetails_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField DEVICE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceKey", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingDetails_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String deviceKey; // required
    public String mediaType; // required
    public String beginTime; // required
    public String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      DEVICE_KEY((short)3, "deviceKey"),
      MEDIA_TYPE((short)4, "mediaType"),
      BEGIN_TIME((short)5, "beginTime"),
      END_TIME((short)6, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // DEVICE_KEY
            return DEVICE_KEY;
          case 4: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 5: // BEGIN_TIME
            return BEGIN_TIME;
          case 6: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DEVICE_KEY, new org.apache.thrift.meta_data.FieldMetaData("deviceKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingDetails_args.class, metaDataMap);
    }

    public getRecordingDetails_args() {
    }

    public getRecordingDetails_args(
      long deviceId,
      int channel,
      String deviceKey,
      String mediaType,
      String beginTime,
      String endTime)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.deviceKey = deviceKey;
      this.mediaType = mediaType;
      this.beginTime = beginTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingDetails_args(getRecordingDetails_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetDeviceKey()) {
        this.deviceKey = other.deviceKey;
      }
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetBeginTime()) {
        this.beginTime = other.beginTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public getRecordingDetails_args deepCopy() {
      return new getRecordingDetails_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.deviceKey = null;
      this.mediaType = null;
      this.beginTime = null;
      this.endTime = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public getRecordingDetails_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public getRecordingDetails_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getDeviceKey() {
      return this.deviceKey;
    }

    public getRecordingDetails_args setDeviceKey(String deviceKey) {
      this.deviceKey = deviceKey;
      return this;
    }

    public void unsetDeviceKey() {
      this.deviceKey = null;
    }

    /** Returns true if field deviceKey is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceKey() {
      return this.deviceKey != null;
    }

    public void setDeviceKeyIsSet(boolean value) {
      if (!value) {
        this.deviceKey = null;
      }
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public getRecordingDetails_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getBeginTime() {
      return this.beginTime;
    }

    public getRecordingDetails_args setBeginTime(String beginTime) {
      this.beginTime = beginTime;
      return this;
    }

    public void unsetBeginTime() {
      this.beginTime = null;
    }

    /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginTime() {
      return this.beginTime != null;
    }

    public void setBeginTimeIsSet(boolean value) {
      if (!value) {
        this.beginTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public getRecordingDetails_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case DEVICE_KEY:
        if (value == null) {
          unsetDeviceKey();
        } else {
          setDeviceKey((String)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case BEGIN_TIME:
        if (value == null) {
          unsetBeginTime();
        } else {
          setBeginTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case DEVICE_KEY:
        return getDeviceKey();

      case MEDIA_TYPE:
        return getMediaType();

      case BEGIN_TIME:
        return getBeginTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case DEVICE_KEY:
        return isSetDeviceKey();
      case MEDIA_TYPE:
        return isSetMediaType();
      case BEGIN_TIME:
        return isSetBeginTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingDetails_args)
        return this.equals((getRecordingDetails_args)that);
      return false;
    }

    public boolean equals(getRecordingDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_deviceKey = true && this.isSetDeviceKey();
      boolean that_present_deviceKey = true && that.isSetDeviceKey();
      if (this_present_deviceKey || that_present_deviceKey) {
        if (!(this_present_deviceKey && that_present_deviceKey))
          return false;
        if (!this.deviceKey.equals(that.deviceKey))
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_beginTime = true && this.isSetBeginTime();
      boolean that_present_beginTime = true && that.isSetBeginTime();
      if (this_present_beginTime || that_present_beginTime) {
        if (!(this_present_beginTime && that_present_beginTime))
          return false;
        if (!this.beginTime.equals(that.beginTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecordingDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecordingDetails_args typedOther = (getRecordingDetails_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeviceKey()).compareTo(typedOther.isSetDeviceKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceKey, typedOther.deviceKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeginTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingDetails_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceKey:");
      if (this.deviceKey == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("beginTime:");
      if (this.beginTime == null) {
        sb.append("null");
      } else {
        sb.append(this.beginTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordingDetails_argsStandardScheme getScheme() {
        return new getRecordingDetails_argsStandardScheme();
      }
    }

    private static class getRecordingDetails_argsStandardScheme extends StandardScheme<getRecordingDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DEVICE_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceKey = iprot.readString();
                struct.setDeviceKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BEGIN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.beginTime = iprot.readString();
                struct.setBeginTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.deviceKey != null) {
          oprot.writeFieldBegin(DEVICE_KEY_FIELD_DESC);
          oprot.writeString(struct.deviceKey);
          oprot.writeFieldEnd();
        }
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.beginTime != null) {
          oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.beginTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordingDetails_argsTupleScheme getScheme() {
        return new getRecordingDetails_argsTupleScheme();
      }
    }

    private static class getRecordingDetails_argsTupleScheme extends TupleScheme<getRecordingDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetDeviceKey()) {
          optionals.set(2);
        }
        if (struct.isSetMediaType()) {
          optionals.set(3);
        }
        if (struct.isSetBeginTime()) {
          optionals.set(4);
        }
        if (struct.isSetEndTime()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetDeviceKey()) {
          oprot.writeString(struct.deviceKey);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetBeginTime()) {
          oprot.writeString(struct.beginTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.deviceKey = iprot.readString();
          struct.setDeviceKeyIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.beginTime = iprot.readString();
          struct.setBeginTimeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class getRecordingDetails_result implements org.apache.thrift.TBase<getRecordingDetails_result, getRecordingDetails_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingDetails_resultTupleSchemeFactory());
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.core.thrift.StreamFileDetails.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingDetails_result.class, metaDataMap);
    }

    public getRecordingDetails_result() {
    }

    public getRecordingDetails_result(
      List<com.kaisquare.core.thrift.StreamFileDetails> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingDetails_result(getRecordingDetails_result other) {
      if (other.isSetSuccess()) {
        List<com.kaisquare.core.thrift.StreamFileDetails> __this__success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>();
        for (com.kaisquare.core.thrift.StreamFileDetails other_element : other.success) {
          __this__success.add(new com.kaisquare.core.thrift.StreamFileDetails(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRecordingDetails_result deepCopy() {
      return new getRecordingDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.kaisquare.core.thrift.StreamFileDetails> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.kaisquare.core.thrift.StreamFileDetails elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>();
      }
      this.success.add(elem);
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> getSuccess() {
      return this.success;
    }

    public getRecordingDetails_result setSuccess(List<com.kaisquare.core.thrift.StreamFileDetails> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.kaisquare.core.thrift.StreamFileDetails>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingDetails_result)
        return this.equals((getRecordingDetails_result)that);
      return false;
    }

    public boolean equals(getRecordingDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecordingDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecordingDetails_result typedOther = (getRecordingDetails_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordingDetails_resultStandardScheme getScheme() {
        return new getRecordingDetails_resultStandardScheme();
      }
    }

    private static class getRecordingDetails_resultStandardScheme extends StandardScheme<getRecordingDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.kaisquare.core.thrift.StreamFileDetails _elem2; // required
                    _elem2 = new com.kaisquare.core.thrift.StreamFileDetails();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.kaisquare.core.thrift.StreamFileDetails _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordingDetails_resultTupleScheme getScheme() {
        return new getRecordingDetails_resultTupleScheme();
      }
    }

    private static class getRecordingDetails_resultTupleScheme extends TupleScheme<getRecordingDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.kaisquare.core.thrift.StreamFileDetails _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.kaisquare.core.thrift.StreamFileDetails _elem7; // required
              _elem7 = new com.kaisquare.core.thrift.StreamFileDetails();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class triggerEventRecording_args implements org.apache.thrift.TBase<triggerEventRecording_args, triggerEventRecording_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerEventRecording_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new triggerEventRecording_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new triggerEventRecording_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String mediaType; // required
    public String eventId; // required
    public int duration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      MEDIA_TYPE((short)3, "mediaType"),
      EVENT_ID((short)4, "eventId"),
      DURATION((short)5, "duration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 4: // EVENT_ID
            return EVENT_ID;
          case 5: // DURATION
            return DURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private static final int __DURATION_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerEventRecording_args.class, metaDataMap);
    }

    public triggerEventRecording_args() {
    }

    public triggerEventRecording_args(
      long deviceId,
      int channel,
      String mediaType,
      String eventId,
      int duration)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.mediaType = mediaType;
      this.eventId = eventId;
      this.duration = duration;
      setDurationIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public triggerEventRecording_args(triggerEventRecording_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetEventId()) {
        this.eventId = other.eventId;
      }
      this.duration = other.duration;
    }

    public triggerEventRecording_args deepCopy() {
      return new triggerEventRecording_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.mediaType = null;
      this.eventId = null;
      setDurationIsSet(false);
      this.duration = 0;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public triggerEventRecording_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public triggerEventRecording_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public triggerEventRecording_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getEventId() {
      return this.eventId;
    }

    public triggerEventRecording_args setEventId(String eventId) {
      this.eventId = eventId;
      return this;
    }

    public void unsetEventId() {
      this.eventId = null;
    }

    /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventId() {
      return this.eventId != null;
    }

    public void setEventIdIsSet(boolean value) {
      if (!value) {
        this.eventId = null;
      }
    }

    public int getDuration() {
      return this.duration;
    }

    public triggerEventRecording_args setDuration(int duration) {
      this.duration = duration;
      setDurationIsSet(true);
      return this;
    }

    public void unsetDuration() {
      __isset_bit_vector.clear(__DURATION_ISSET_ID);
    }

    /** Returns true if field duration is set (has been assigned a value) and false otherwise */
    public boolean isSetDuration() {
      return __isset_bit_vector.get(__DURATION_ISSET_ID);
    }

    public void setDurationIsSet(boolean value) {
      __isset_bit_vector.set(__DURATION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case EVENT_ID:
        if (value == null) {
          unsetEventId();
        } else {
          setEventId((String)value);
        }
        break;

      case DURATION:
        if (value == null) {
          unsetDuration();
        } else {
          setDuration((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case MEDIA_TYPE:
        return getMediaType();

      case EVENT_ID:
        return getEventId();

      case DURATION:
        return Integer.valueOf(getDuration());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case MEDIA_TYPE:
        return isSetMediaType();
      case EVENT_ID:
        return isSetEventId();
      case DURATION:
        return isSetDuration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerEventRecording_args)
        return this.equals((triggerEventRecording_args)that);
      return false;
    }

    public boolean equals(triggerEventRecording_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_eventId = true && this.isSetEventId();
      boolean that_present_eventId = true && that.isSetEventId();
      if (this_present_eventId || that_present_eventId) {
        if (!(this_present_eventId && that_present_eventId))
          return false;
        if (!this.eventId.equals(that.eventId))
          return false;
      }

      boolean this_present_duration = true;
      boolean that_present_duration = true;
      if (this_present_duration || that_present_duration) {
        if (!(this_present_duration && that_present_duration))
          return false;
        if (this.duration != that.duration)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(triggerEventRecording_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      triggerEventRecording_args typedOther = (triggerEventRecording_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEventId()).compareTo(typedOther.isSetEventId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, typedOther.eventId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDuration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("triggerEventRecording_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eventId:");
      if (this.eventId == null) {
        sb.append("null");
      } else {
        sb.append(this.eventId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("duration:");
      sb.append(this.duration);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class triggerEventRecording_argsStandardSchemeFactory implements SchemeFactory {
      public triggerEventRecording_argsStandardScheme getScheme() {
        return new triggerEventRecording_argsStandardScheme();
      }
    }

    private static class triggerEventRecording_argsStandardScheme extends StandardScheme<triggerEventRecording_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerEventRecording_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eventId = iprot.readString();
                struct.setEventIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.duration = iprot.readI32();
                struct.setDurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerEventRecording_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.eventId != null) {
          oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
          oprot.writeString(struct.eventId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DURATION_FIELD_DESC);
        oprot.writeI32(struct.duration);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class triggerEventRecording_argsTupleSchemeFactory implements SchemeFactory {
      public triggerEventRecording_argsTupleScheme getScheme() {
        return new triggerEventRecording_argsTupleScheme();
      }
    }

    private static class triggerEventRecording_argsTupleScheme extends TupleScheme<triggerEventRecording_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerEventRecording_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetMediaType()) {
          optionals.set(2);
        }
        if (struct.isSetEventId()) {
          optionals.set(3);
        }
        if (struct.isSetDuration()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetEventId()) {
          oprot.writeString(struct.eventId);
        }
        if (struct.isSetDuration()) {
          oprot.writeI32(struct.duration);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerEventRecording_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eventId = iprot.readString();
          struct.setEventIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.duration = iprot.readI32();
          struct.setDurationIsSet(true);
        }
      }
    }

  }

  public static class triggerEventRecording_result implements org.apache.thrift.TBase<triggerEventRecording_result, triggerEventRecording_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerEventRecording_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new triggerEventRecording_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new triggerEventRecording_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerEventRecording_result.class, metaDataMap);
    }

    public triggerEventRecording_result() {
    }

    public triggerEventRecording_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public triggerEventRecording_result(triggerEventRecording_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public triggerEventRecording_result deepCopy() {
      return new triggerEventRecording_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public triggerEventRecording_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerEventRecording_result)
        return this.equals((triggerEventRecording_result)that);
      return false;
    }

    public boolean equals(triggerEventRecording_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(triggerEventRecording_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      triggerEventRecording_result typedOther = (triggerEventRecording_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("triggerEventRecording_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class triggerEventRecording_resultStandardSchemeFactory implements SchemeFactory {
      public triggerEventRecording_resultStandardScheme getScheme() {
        return new triggerEventRecording_resultStandardScheme();
      }
    }

    private static class triggerEventRecording_resultStandardScheme extends StandardScheme<triggerEventRecording_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerEventRecording_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerEventRecording_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class triggerEventRecording_resultTupleSchemeFactory implements SchemeFactory {
      public triggerEventRecording_resultTupleScheme getScheme() {
        return new triggerEventRecording_resultTupleScheme();
      }
    }

    private static class triggerEventRecording_resultTupleScheme extends TupleScheme<triggerEventRecording_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerEventRecording_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerEventRecording_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEventRecording_args implements org.apache.thrift.TBase<getEventRecording_args, getEventRecording_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventRecording_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventRecording_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventRecording_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String mediaType; // required
    public String eventId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      MEDIA_TYPE((short)3, "mediaType"),
      EVENT_ID((short)4, "eventId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 4: // EVENT_ID
            return EVENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventRecording_args.class, metaDataMap);
    }

    public getEventRecording_args() {
    }

    public getEventRecording_args(
      long deviceId,
      int channel,
      String mediaType,
      String eventId)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.mediaType = mediaType;
      this.eventId = eventId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventRecording_args(getEventRecording_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetEventId()) {
        this.eventId = other.eventId;
      }
    }

    public getEventRecording_args deepCopy() {
      return new getEventRecording_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.mediaType = null;
      this.eventId = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public getEventRecording_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public getEventRecording_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public getEventRecording_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getEventId() {
      return this.eventId;
    }

    public getEventRecording_args setEventId(String eventId) {
      this.eventId = eventId;
      return this;
    }

    public void unsetEventId() {
      this.eventId = null;
    }

    /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventId() {
      return this.eventId != null;
    }

    public void setEventIdIsSet(boolean value) {
      if (!value) {
        this.eventId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case EVENT_ID:
        if (value == null) {
          unsetEventId();
        } else {
          setEventId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case MEDIA_TYPE:
        return getMediaType();

      case EVENT_ID:
        return getEventId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case MEDIA_TYPE:
        return isSetMediaType();
      case EVENT_ID:
        return isSetEventId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventRecording_args)
        return this.equals((getEventRecording_args)that);
      return false;
    }

    public boolean equals(getEventRecording_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_eventId = true && this.isSetEventId();
      boolean that_present_eventId = true && that.isSetEventId();
      if (this_present_eventId || that_present_eventId) {
        if (!(this_present_eventId && that_present_eventId))
          return false;
        if (!this.eventId.equals(that.eventId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEventRecording_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEventRecording_args typedOther = (getEventRecording_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEventId()).compareTo(typedOther.isSetEventId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, typedOther.eventId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventRecording_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eventId:");
      if (this.eventId == null) {
        sb.append("null");
      } else {
        sb.append(this.eventId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventRecording_argsStandardSchemeFactory implements SchemeFactory {
      public getEventRecording_argsStandardScheme getScheme() {
        return new getEventRecording_argsStandardScheme();
      }
    }

    private static class getEventRecording_argsStandardScheme extends StandardScheme<getEventRecording_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventRecording_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eventId = iprot.readString();
                struct.setEventIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventRecording_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.eventId != null) {
          oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
          oprot.writeString(struct.eventId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventRecording_argsTupleSchemeFactory implements SchemeFactory {
      public getEventRecording_argsTupleScheme getScheme() {
        return new getEventRecording_argsTupleScheme();
      }
    }

    private static class getEventRecording_argsTupleScheme extends TupleScheme<getEventRecording_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventRecording_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetMediaType()) {
          optionals.set(2);
        }
        if (struct.isSetEventId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetEventId()) {
          oprot.writeString(struct.eventId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventRecording_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eventId = iprot.readString();
          struct.setEventIdIsSet(true);
        }
      }
    }

  }

  public static class getEventRecording_result implements org.apache.thrift.TBase<getEventRecording_result, getEventRecording_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEventRecording_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEventRecording_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEventRecording_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEventRecording_result.class, metaDataMap);
    }

    public getEventRecording_result() {
    }

    public getEventRecording_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventRecording_result(getEventRecording_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getEventRecording_result deepCopy() {
      return new getEventRecording_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getEventRecording_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventRecording_result)
        return this.equals((getEventRecording_result)that);
      return false;
    }

    public boolean equals(getEventRecording_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEventRecording_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEventRecording_result typedOther = (getEventRecording_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEventRecording_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEventRecording_resultStandardSchemeFactory implements SchemeFactory {
      public getEventRecording_resultStandardScheme getScheme() {
        return new getEventRecording_resultStandardScheme();
      }
    }

    private static class getEventRecording_resultStandardScheme extends StandardScheme<getEventRecording_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEventRecording_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEventRecording_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEventRecording_resultTupleSchemeFactory implements SchemeFactory {
      public getEventRecording_resultTupleScheme getScheme() {
        return new getEventRecording_resultTupleScheme();
      }
    }

    private static class getEventRecording_resultTupleScheme extends TupleScheme<getEventRecording_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEventRecording_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEventRecording_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class triggerSpecifiedRecording_args implements org.apache.thrift.TBase<triggerSpecifiedRecording_args, triggerSpecifiedRecording_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerSpecifiedRecording_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new triggerSpecifiedRecording_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new triggerSpecifiedRecording_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String mediaType; // required
    public String beginTime; // required
    public String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      MEDIA_TYPE((short)3, "mediaType"),
      BEGIN_TIME((short)4, "beginTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 4: // BEGIN_TIME
            return BEGIN_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerSpecifiedRecording_args.class, metaDataMap);
    }

    public triggerSpecifiedRecording_args() {
    }

    public triggerSpecifiedRecording_args(
      long deviceId,
      int channel,
      String mediaType,
      String beginTime,
      String endTime)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.mediaType = mediaType;
      this.beginTime = beginTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public triggerSpecifiedRecording_args(triggerSpecifiedRecording_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetBeginTime()) {
        this.beginTime = other.beginTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public triggerSpecifiedRecording_args deepCopy() {
      return new triggerSpecifiedRecording_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.mediaType = null;
      this.beginTime = null;
      this.endTime = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public triggerSpecifiedRecording_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public triggerSpecifiedRecording_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public triggerSpecifiedRecording_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getBeginTime() {
      return this.beginTime;
    }

    public triggerSpecifiedRecording_args setBeginTime(String beginTime) {
      this.beginTime = beginTime;
      return this;
    }

    public void unsetBeginTime() {
      this.beginTime = null;
    }

    /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginTime() {
      return this.beginTime != null;
    }

    public void setBeginTimeIsSet(boolean value) {
      if (!value) {
        this.beginTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public triggerSpecifiedRecording_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case BEGIN_TIME:
        if (value == null) {
          unsetBeginTime();
        } else {
          setBeginTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case MEDIA_TYPE:
        return getMediaType();

      case BEGIN_TIME:
        return getBeginTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case MEDIA_TYPE:
        return isSetMediaType();
      case BEGIN_TIME:
        return isSetBeginTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerSpecifiedRecording_args)
        return this.equals((triggerSpecifiedRecording_args)that);
      return false;
    }

    public boolean equals(triggerSpecifiedRecording_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_beginTime = true && this.isSetBeginTime();
      boolean that_present_beginTime = true && that.isSetBeginTime();
      if (this_present_beginTime || that_present_beginTime) {
        if (!(this_present_beginTime && that_present_beginTime))
          return false;
        if (!this.beginTime.equals(that.beginTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(triggerSpecifiedRecording_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      triggerSpecifiedRecording_args typedOther = (triggerSpecifiedRecording_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeginTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("triggerSpecifiedRecording_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("beginTime:");
      if (this.beginTime == null) {
        sb.append("null");
      } else {
        sb.append(this.beginTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class triggerSpecifiedRecording_argsStandardSchemeFactory implements SchemeFactory {
      public triggerSpecifiedRecording_argsStandardScheme getScheme() {
        return new triggerSpecifiedRecording_argsStandardScheme();
      }
    }

    private static class triggerSpecifiedRecording_argsStandardScheme extends StandardScheme<triggerSpecifiedRecording_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerSpecifiedRecording_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BEGIN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.beginTime = iprot.readString();
                struct.setBeginTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerSpecifiedRecording_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.beginTime != null) {
          oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.beginTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class triggerSpecifiedRecording_argsTupleSchemeFactory implements SchemeFactory {
      public triggerSpecifiedRecording_argsTupleScheme getScheme() {
        return new triggerSpecifiedRecording_argsTupleScheme();
      }
    }

    private static class triggerSpecifiedRecording_argsTupleScheme extends TupleScheme<triggerSpecifiedRecording_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerSpecifiedRecording_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetMediaType()) {
          optionals.set(2);
        }
        if (struct.isSetBeginTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetBeginTime()) {
          oprot.writeString(struct.beginTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerSpecifiedRecording_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.beginTime = iprot.readString();
          struct.setBeginTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class triggerSpecifiedRecording_result implements org.apache.thrift.TBase<triggerSpecifiedRecording_result, triggerSpecifiedRecording_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerSpecifiedRecording_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new triggerSpecifiedRecording_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new triggerSpecifiedRecording_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerSpecifiedRecording_result.class, metaDataMap);
    }

    public triggerSpecifiedRecording_result() {
    }

    public triggerSpecifiedRecording_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public triggerSpecifiedRecording_result(triggerSpecifiedRecording_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public triggerSpecifiedRecording_result deepCopy() {
      return new triggerSpecifiedRecording_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public triggerSpecifiedRecording_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerSpecifiedRecording_result)
        return this.equals((triggerSpecifiedRecording_result)that);
      return false;
    }

    public boolean equals(triggerSpecifiedRecording_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(triggerSpecifiedRecording_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      triggerSpecifiedRecording_result typedOther = (triggerSpecifiedRecording_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("triggerSpecifiedRecording_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class triggerSpecifiedRecording_resultStandardSchemeFactory implements SchemeFactory {
      public triggerSpecifiedRecording_resultStandardScheme getScheme() {
        return new triggerSpecifiedRecording_resultStandardScheme();
      }
    }

    private static class triggerSpecifiedRecording_resultStandardScheme extends StandardScheme<triggerSpecifiedRecording_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerSpecifiedRecording_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerSpecifiedRecording_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class triggerSpecifiedRecording_resultTupleSchemeFactory implements SchemeFactory {
      public triggerSpecifiedRecording_resultTupleScheme getScheme() {
        return new triggerSpecifiedRecording_resultTupleScheme();
      }
    }

    private static class triggerSpecifiedRecording_resultTupleScheme extends TupleScheme<triggerSpecifiedRecording_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerSpecifiedRecording_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerSpecifiedRecording_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getSpecifiedRecording_args implements org.apache.thrift.TBase<getSpecifiedRecording_args, getSpecifiedRecording_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpecifiedRecording_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpecifiedRecording_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpecifiedRecording_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String mediaType; // required
    public String beginTime; // required
    public String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      MEDIA_TYPE((short)3, "mediaType"),
      BEGIN_TIME((short)4, "beginTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 4: // BEGIN_TIME
            return BEGIN_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecifiedRecording_args.class, metaDataMap);
    }

    public getSpecifiedRecording_args() {
    }

    public getSpecifiedRecording_args(
      long deviceId,
      int channel,
      String mediaType,
      String beginTime,
      String endTime)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.mediaType = mediaType;
      this.beginTime = beginTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpecifiedRecording_args(getSpecifiedRecording_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetBeginTime()) {
        this.beginTime = other.beginTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public getSpecifiedRecording_args deepCopy() {
      return new getSpecifiedRecording_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.mediaType = null;
      this.beginTime = null;
      this.endTime = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public getSpecifiedRecording_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public getSpecifiedRecording_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public getSpecifiedRecording_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getBeginTime() {
      return this.beginTime;
    }

    public getSpecifiedRecording_args setBeginTime(String beginTime) {
      this.beginTime = beginTime;
      return this;
    }

    public void unsetBeginTime() {
      this.beginTime = null;
    }

    /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginTime() {
      return this.beginTime != null;
    }

    public void setBeginTimeIsSet(boolean value) {
      if (!value) {
        this.beginTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public getSpecifiedRecording_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case BEGIN_TIME:
        if (value == null) {
          unsetBeginTime();
        } else {
          setBeginTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case MEDIA_TYPE:
        return getMediaType();

      case BEGIN_TIME:
        return getBeginTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case MEDIA_TYPE:
        return isSetMediaType();
      case BEGIN_TIME:
        return isSetBeginTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpecifiedRecording_args)
        return this.equals((getSpecifiedRecording_args)that);
      return false;
    }

    public boolean equals(getSpecifiedRecording_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_beginTime = true && this.isSetBeginTime();
      boolean that_present_beginTime = true && that.isSetBeginTime();
      if (this_present_beginTime || that_present_beginTime) {
        if (!(this_present_beginTime && that_present_beginTime))
          return false;
        if (!this.beginTime.equals(that.beginTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpecifiedRecording_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpecifiedRecording_args typedOther = (getSpecifiedRecording_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeginTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpecifiedRecording_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("beginTime:");
      if (this.beginTime == null) {
        sb.append("null");
      } else {
        sb.append(this.beginTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpecifiedRecording_argsStandardSchemeFactory implements SchemeFactory {
      public getSpecifiedRecording_argsStandardScheme getScheme() {
        return new getSpecifiedRecording_argsStandardScheme();
      }
    }

    private static class getSpecifiedRecording_argsStandardScheme extends StandardScheme<getSpecifiedRecording_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecifiedRecording_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BEGIN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.beginTime = iprot.readString();
                struct.setBeginTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecifiedRecording_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.beginTime != null) {
          oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.beginTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpecifiedRecording_argsTupleSchemeFactory implements SchemeFactory {
      public getSpecifiedRecording_argsTupleScheme getScheme() {
        return new getSpecifiedRecording_argsTupleScheme();
      }
    }

    private static class getSpecifiedRecording_argsTupleScheme extends TupleScheme<getSpecifiedRecording_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpecifiedRecording_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetMediaType()) {
          optionals.set(2);
        }
        if (struct.isSetBeginTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetBeginTime()) {
          oprot.writeString(struct.beginTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpecifiedRecording_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.beginTime = iprot.readString();
          struct.setBeginTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class getSpecifiedRecording_result implements org.apache.thrift.TBase<getSpecifiedRecording_result, getSpecifiedRecording_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSpecifiedRecording_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getSpecifiedRecording_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getSpecifiedRecording_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSpecifiedRecording_result.class, metaDataMap);
    }

    public getSpecifiedRecording_result() {
    }

    public getSpecifiedRecording_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSpecifiedRecording_result(getSpecifiedRecording_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getSpecifiedRecording_result deepCopy() {
      return new getSpecifiedRecording_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getSpecifiedRecording_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSpecifiedRecording_result)
        return this.equals((getSpecifiedRecording_result)that);
      return false;
    }

    public boolean equals(getSpecifiedRecording_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getSpecifiedRecording_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getSpecifiedRecording_result typedOther = (getSpecifiedRecording_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getSpecifiedRecording_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSpecifiedRecording_resultStandardSchemeFactory implements SchemeFactory {
      public getSpecifiedRecording_resultStandardScheme getScheme() {
        return new getSpecifiedRecording_resultStandardScheme();
      }
    }

    private static class getSpecifiedRecording_resultStandardScheme extends StandardScheme<getSpecifiedRecording_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSpecifiedRecording_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSpecifiedRecording_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSpecifiedRecording_resultTupleSchemeFactory implements SchemeFactory {
      public getSpecifiedRecording_resultTupleScheme getScheme() {
        return new getSpecifiedRecording_resultTupleScheme();
      }
    }

    private static class getSpecifiedRecording_resultTupleScheme extends TupleScheme<getSpecifiedRecording_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSpecifiedRecording_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSpecifiedRecording_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class startRecordingUpload_args implements org.apache.thrift.TBase<startRecordingUpload_args, startRecordingUpload_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startRecordingUpload_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField BEGIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTime", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startRecordingUpload_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startRecordingUpload_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String mediaType; // required
    public String beginTime; // required
    public String endTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      MEDIA_TYPE((short)3, "mediaType"),
      BEGIN_TIME((short)4, "beginTime"),
      END_TIME((short)5, "endTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 4: // BEGIN_TIME
            return BEGIN_TIME;
          case 5: // END_TIME
            return END_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("beginTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startRecordingUpload_args.class, metaDataMap);
    }

    public startRecordingUpload_args() {
    }

    public startRecordingUpload_args(
      long deviceId,
      int channel,
      String mediaType,
      String beginTime,
      String endTime)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.mediaType = mediaType;
      this.beginTime = beginTime;
      this.endTime = endTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startRecordingUpload_args(startRecordingUpload_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetBeginTime()) {
        this.beginTime = other.beginTime;
      }
      if (other.isSetEndTime()) {
        this.endTime = other.endTime;
      }
    }

    public startRecordingUpload_args deepCopy() {
      return new startRecordingUpload_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.mediaType = null;
      this.beginTime = null;
      this.endTime = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public startRecordingUpload_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public startRecordingUpload_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public startRecordingUpload_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getBeginTime() {
      return this.beginTime;
    }

    public startRecordingUpload_args setBeginTime(String beginTime) {
      this.beginTime = beginTime;
      return this;
    }

    public void unsetBeginTime() {
      this.beginTime = null;
    }

    /** Returns true if field beginTime is set (has been assigned a value) and false otherwise */
    public boolean isSetBeginTime() {
      return this.beginTime != null;
    }

    public void setBeginTimeIsSet(boolean value) {
      if (!value) {
        this.beginTime = null;
      }
    }

    public String getEndTime() {
      return this.endTime;
    }

    public startRecordingUpload_args setEndTime(String endTime) {
      this.endTime = endTime;
      return this;
    }

    public void unsetEndTime() {
      this.endTime = null;
    }

    /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTime() {
      return this.endTime != null;
    }

    public void setEndTimeIsSet(boolean value) {
      if (!value) {
        this.endTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case BEGIN_TIME:
        if (value == null) {
          unsetBeginTime();
        } else {
          setBeginTime((String)value);
        }
        break;

      case END_TIME:
        if (value == null) {
          unsetEndTime();
        } else {
          setEndTime((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case MEDIA_TYPE:
        return getMediaType();

      case BEGIN_TIME:
        return getBeginTime();

      case END_TIME:
        return getEndTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case MEDIA_TYPE:
        return isSetMediaType();
      case BEGIN_TIME:
        return isSetBeginTime();
      case END_TIME:
        return isSetEndTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startRecordingUpload_args)
        return this.equals((startRecordingUpload_args)that);
      return false;
    }

    public boolean equals(startRecordingUpload_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_beginTime = true && this.isSetBeginTime();
      boolean that_present_beginTime = true && that.isSetBeginTime();
      if (this_present_beginTime || that_present_beginTime) {
        if (!(this_present_beginTime && that_present_beginTime))
          return false;
        if (!this.beginTime.equals(that.beginTime))
          return false;
      }

      boolean this_present_endTime = true && this.isSetEndTime();
      boolean that_present_endTime = true && that.isSetEndTime();
      if (this_present_endTime || that_present_endTime) {
        if (!(this_present_endTime && that_present_endTime))
          return false;
        if (!this.endTime.equals(that.endTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startRecordingUpload_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startRecordingUpload_args typedOther = (startRecordingUpload_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBeginTime()).compareTo(typedOther.isSetBeginTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBeginTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTime, typedOther.beginTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(typedOther.isSetEndTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, typedOther.endTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startRecordingUpload_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("beginTime:");
      if (this.beginTime == null) {
        sb.append("null");
      } else {
        sb.append(this.beginTime);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTime:");
      if (this.endTime == null) {
        sb.append("null");
      } else {
        sb.append(this.endTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startRecordingUpload_argsStandardSchemeFactory implements SchemeFactory {
      public startRecordingUpload_argsStandardScheme getScheme() {
        return new startRecordingUpload_argsStandardScheme();
      }
    }

    private static class startRecordingUpload_argsStandardScheme extends StandardScheme<startRecordingUpload_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startRecordingUpload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // BEGIN_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.beginTime = iprot.readString();
                struct.setBeginTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTime = iprot.readString();
                struct.setEndTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startRecordingUpload_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.beginTime != null) {
          oprot.writeFieldBegin(BEGIN_TIME_FIELD_DESC);
          oprot.writeString(struct.beginTime);
          oprot.writeFieldEnd();
        }
        if (struct.endTime != null) {
          oprot.writeFieldBegin(END_TIME_FIELD_DESC);
          oprot.writeString(struct.endTime);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startRecordingUpload_argsTupleSchemeFactory implements SchemeFactory {
      public startRecordingUpload_argsTupleScheme getScheme() {
        return new startRecordingUpload_argsTupleScheme();
      }
    }

    private static class startRecordingUpload_argsTupleScheme extends TupleScheme<startRecordingUpload_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startRecordingUpload_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetMediaType()) {
          optionals.set(2);
        }
        if (struct.isSetBeginTime()) {
          optionals.set(3);
        }
        if (struct.isSetEndTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetBeginTime()) {
          oprot.writeString(struct.beginTime);
        }
        if (struct.isSetEndTime()) {
          oprot.writeString(struct.endTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startRecordingUpload_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.beginTime = iprot.readString();
          struct.setBeginTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTime = iprot.readString();
          struct.setEndTimeIsSet(true);
        }
      }
    }

  }

  public static class startRecordingUpload_result implements org.apache.thrift.TBase<startRecordingUpload_result, startRecordingUpload_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startRecordingUpload_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startRecordingUpload_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startRecordingUpload_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startRecordingUpload_result.class, metaDataMap);
    }

    public startRecordingUpload_result() {
    }

    public startRecordingUpload_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startRecordingUpload_result(startRecordingUpload_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public startRecordingUpload_result deepCopy() {
      return new startRecordingUpload_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public startRecordingUpload_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startRecordingUpload_result)
        return this.equals((startRecordingUpload_result)that);
      return false;
    }

    public boolean equals(startRecordingUpload_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startRecordingUpload_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startRecordingUpload_result typedOther = (startRecordingUpload_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startRecordingUpload_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startRecordingUpload_resultStandardSchemeFactory implements SchemeFactory {
      public startRecordingUpload_resultStandardScheme getScheme() {
        return new startRecordingUpload_resultStandardScheme();
      }
    }

    private static class startRecordingUpload_resultStandardScheme extends StandardScheme<startRecordingUpload_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startRecordingUpload_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startRecordingUpload_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startRecordingUpload_resultTupleSchemeFactory implements SchemeFactory {
      public startRecordingUpload_resultTupleScheme getScheme() {
        return new startRecordingUpload_resultTupleScheme();
      }
    }

    private static class startRecordingUpload_resultTupleScheme extends TupleScheme<startRecordingUpload_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startRecordingUpload_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startRecordingUpload_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15; // required
              _elem15 = iprot.readString();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stopRecordingUpload_args implements org.apache.thrift.TBase<stopRecordingUpload_args, stopRecordingUpload_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopRecordingUpload_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FILE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileTime", org.apache.thrift.protocol.TType.LIST, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopRecordingUpload_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopRecordingUpload_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String mediaType; // required
    public List<String> fileTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      MEDIA_TYPE((short)3, "mediaType"),
      FILE_TIME((short)4, "fileTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 4: // FILE_TIME
            return FILE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_TIME, new org.apache.thrift.meta_data.FieldMetaData("fileTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopRecordingUpload_args.class, metaDataMap);
    }

    public stopRecordingUpload_args() {
    }

    public stopRecordingUpload_args(
      long deviceId,
      int channel,
      String mediaType,
      List<String> fileTime)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.mediaType = mediaType;
      this.fileTime = fileTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopRecordingUpload_args(stopRecordingUpload_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetFileTime()) {
        List<String> __this__fileTime = new ArrayList<String>();
        for (String other_element : other.fileTime) {
          __this__fileTime.add(other_element);
        }
        this.fileTime = __this__fileTime;
      }
    }

    public stopRecordingUpload_args deepCopy() {
      return new stopRecordingUpload_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.mediaType = null;
      this.fileTime = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public stopRecordingUpload_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public stopRecordingUpload_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public stopRecordingUpload_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public int getFileTimeSize() {
      return (this.fileTime == null) ? 0 : this.fileTime.size();
    }

    public java.util.Iterator<String> getFileTimeIterator() {
      return (this.fileTime == null) ? null : this.fileTime.iterator();
    }

    public void addToFileTime(String elem) {
      if (this.fileTime == null) {
        this.fileTime = new ArrayList<String>();
      }
      this.fileTime.add(elem);
    }

    public List<String> getFileTime() {
      return this.fileTime;
    }

    public stopRecordingUpload_args setFileTime(List<String> fileTime) {
      this.fileTime = fileTime;
      return this;
    }

    public void unsetFileTime() {
      this.fileTime = null;
    }

    /** Returns true if field fileTime is set (has been assigned a value) and false otherwise */
    public boolean isSetFileTime() {
      return this.fileTime != null;
    }

    public void setFileTimeIsSet(boolean value) {
      if (!value) {
        this.fileTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case FILE_TIME:
        if (value == null) {
          unsetFileTime();
        } else {
          setFileTime((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case MEDIA_TYPE:
        return getMediaType();

      case FILE_TIME:
        return getFileTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case MEDIA_TYPE:
        return isSetMediaType();
      case FILE_TIME:
        return isSetFileTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopRecordingUpload_args)
        return this.equals((stopRecordingUpload_args)that);
      return false;
    }

    public boolean equals(stopRecordingUpload_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_fileTime = true && this.isSetFileTime();
      boolean that_present_fileTime = true && that.isSetFileTime();
      if (this_present_fileTime || that_present_fileTime) {
        if (!(this_present_fileTime && that_present_fileTime))
          return false;
        if (!this.fileTime.equals(that.fileTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopRecordingUpload_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopRecordingUpload_args typedOther = (stopRecordingUpload_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileTime()).compareTo(typedOther.isSetFileTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileTime, typedOther.fileTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopRecordingUpload_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileTime:");
      if (this.fileTime == null) {
        sb.append("null");
      } else {
        sb.append(this.fileTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopRecordingUpload_argsStandardSchemeFactory implements SchemeFactory {
      public stopRecordingUpload_argsStandardScheme getScheme() {
        return new stopRecordingUpload_argsStandardScheme();
      }
    }

    private static class stopRecordingUpload_argsStandardScheme extends StandardScheme<stopRecordingUpload_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopRecordingUpload_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FILE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.fileTime = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.fileTime.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setFileTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopRecordingUpload_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.fileTime != null) {
          oprot.writeFieldBegin(FILE_TIME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fileTime.size()));
            for (String _iter19 : struct.fileTime)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopRecordingUpload_argsTupleSchemeFactory implements SchemeFactory {
      public stopRecordingUpload_argsTupleScheme getScheme() {
        return new stopRecordingUpload_argsTupleScheme();
      }
    }

    private static class stopRecordingUpload_argsTupleScheme extends TupleScheme<stopRecordingUpload_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopRecordingUpload_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetMediaType()) {
          optionals.set(2);
        }
        if (struct.isSetFileTime()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetFileTime()) {
          {
            oprot.writeI32(struct.fileTime.size());
            for (String _iter20 : struct.fileTime)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopRecordingUpload_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.fileTime = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.fileTime.add(_elem23);
            }
          }
          struct.setFileTimeIsSet(true);
        }
      }
    }

  }

  public static class stopRecordingUpload_result implements org.apache.thrift.TBase<stopRecordingUpload_result, stopRecordingUpload_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopRecordingUpload_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopRecordingUpload_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopRecordingUpload_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopRecordingUpload_result.class, metaDataMap);
    }

    public stopRecordingUpload_result() {
    }

    public stopRecordingUpload_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopRecordingUpload_result(stopRecordingUpload_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public stopRecordingUpload_result deepCopy() {
      return new stopRecordingUpload_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public stopRecordingUpload_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopRecordingUpload_result)
        return this.equals((stopRecordingUpload_result)that);
      return false;
    }

    public boolean equals(stopRecordingUpload_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopRecordingUpload_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopRecordingUpload_result typedOther = (stopRecordingUpload_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopRecordingUpload_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopRecordingUpload_resultStandardSchemeFactory implements SchemeFactory {
      public stopRecordingUpload_resultStandardScheme getScheme() {
        return new stopRecordingUpload_resultStandardScheme();
      }
    }

    private static class stopRecordingUpload_resultStandardScheme extends StandardScheme<stopRecordingUpload_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopRecordingUpload_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopRecordingUpload_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopRecordingUpload_resultTupleSchemeFactory implements SchemeFactory {
      public stopRecordingUpload_resultTupleScheme getScheme() {
        return new stopRecordingUpload_resultTupleScheme();
      }
    }

    private static class stopRecordingUpload_resultTupleScheme extends TupleScheme<stopRecordingUpload_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopRecordingUpload_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopRecordingUpload_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStreamStatus_args implements org.apache.thrift.TBase<getStreamStatus_args, getStreamStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamStatus_args");

    private static final org.apache.thrift.protocol.TField STREAM_FILE_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("streamFileDetails", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStreamStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStreamStatus_argsTupleSchemeFactory());
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> streamFileDetails; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STREAM_FILE_DETAILS((short)1, "streamFileDetails");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STREAM_FILE_DETAILS
            return STREAM_FILE_DETAILS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STREAM_FILE_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("streamFileDetails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.core.thrift.StreamFileDetails.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamStatus_args.class, metaDataMap);
    }

    public getStreamStatus_args() {
    }

    public getStreamStatus_args(
      List<com.kaisquare.core.thrift.StreamFileDetails> streamFileDetails)
    {
      this();
      this.streamFileDetails = streamFileDetails;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamStatus_args(getStreamStatus_args other) {
      if (other.isSetStreamFileDetails()) {
        List<com.kaisquare.core.thrift.StreamFileDetails> __this__streamFileDetails = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>();
        for (com.kaisquare.core.thrift.StreamFileDetails other_element : other.streamFileDetails) {
          __this__streamFileDetails.add(new com.kaisquare.core.thrift.StreamFileDetails(other_element));
        }
        this.streamFileDetails = __this__streamFileDetails;
      }
    }

    public getStreamStatus_args deepCopy() {
      return new getStreamStatus_args(this);
    }

    @Override
    public void clear() {
      this.streamFileDetails = null;
    }

    public int getStreamFileDetailsSize() {
      return (this.streamFileDetails == null) ? 0 : this.streamFileDetails.size();
    }

    public java.util.Iterator<com.kaisquare.core.thrift.StreamFileDetails> getStreamFileDetailsIterator() {
      return (this.streamFileDetails == null) ? null : this.streamFileDetails.iterator();
    }

    public void addToStreamFileDetails(com.kaisquare.core.thrift.StreamFileDetails elem) {
      if (this.streamFileDetails == null) {
        this.streamFileDetails = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>();
      }
      this.streamFileDetails.add(elem);
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> getStreamFileDetails() {
      return this.streamFileDetails;
    }

    public getStreamStatus_args setStreamFileDetails(List<com.kaisquare.core.thrift.StreamFileDetails> streamFileDetails) {
      this.streamFileDetails = streamFileDetails;
      return this;
    }

    public void unsetStreamFileDetails() {
      this.streamFileDetails = null;
    }

    /** Returns true if field streamFileDetails is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamFileDetails() {
      return this.streamFileDetails != null;
    }

    public void setStreamFileDetailsIsSet(boolean value) {
      if (!value) {
        this.streamFileDetails = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case STREAM_FILE_DETAILS:
        if (value == null) {
          unsetStreamFileDetails();
        } else {
          setStreamFileDetails((List<com.kaisquare.core.thrift.StreamFileDetails>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case STREAM_FILE_DETAILS:
        return getStreamFileDetails();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case STREAM_FILE_DETAILS:
        return isSetStreamFileDetails();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamStatus_args)
        return this.equals((getStreamStatus_args)that);
      return false;
    }

    public boolean equals(getStreamStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_streamFileDetails = true && this.isSetStreamFileDetails();
      boolean that_present_streamFileDetails = true && that.isSetStreamFileDetails();
      if (this_present_streamFileDetails || that_present_streamFileDetails) {
        if (!(this_present_streamFileDetails && that_present_streamFileDetails))
          return false;
        if (!this.streamFileDetails.equals(that.streamFileDetails))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStreamStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStreamStatus_args typedOther = (getStreamStatus_args)other;

      lastComparison = Boolean.valueOf(isSetStreamFileDetails()).compareTo(typedOther.isSetStreamFileDetails());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamFileDetails()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamFileDetails, typedOther.streamFileDetails);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStreamStatus_args(");
      boolean first = true;

      sb.append("streamFileDetails:");
      if (this.streamFileDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.streamFileDetails);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getStreamStatus_argsStandardScheme getScheme() {
        return new getStreamStatus_argsStandardScheme();
      }
    }

    private static class getStreamStatus_argsStandardScheme extends StandardScheme<getStreamStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STREAM_FILE_DETAILS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.streamFileDetails = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    com.kaisquare.core.thrift.StreamFileDetails _elem26; // required
                    _elem26 = new com.kaisquare.core.thrift.StreamFileDetails();
                    _elem26.read(iprot);
                    struct.streamFileDetails.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setStreamFileDetailsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.streamFileDetails != null) {
          oprot.writeFieldBegin(STREAM_FILE_DETAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.streamFileDetails.size()));
            for (com.kaisquare.core.thrift.StreamFileDetails _iter27 : struct.streamFileDetails)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getStreamStatus_argsTupleScheme getScheme() {
        return new getStreamStatus_argsTupleScheme();
      }
    }

    private static class getStreamStatus_argsTupleScheme extends TupleScheme<getStreamStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStreamFileDetails()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStreamFileDetails()) {
          {
            oprot.writeI32(struct.streamFileDetails.size());
            for (com.kaisquare.core.thrift.StreamFileDetails _iter28 : struct.streamFileDetails)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.streamFileDetails = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              com.kaisquare.core.thrift.StreamFileDetails _elem31; // required
              _elem31 = new com.kaisquare.core.thrift.StreamFileDetails();
              _elem31.read(iprot);
              struct.streamFileDetails.add(_elem31);
            }
          }
          struct.setStreamFileDetailsIsSet(true);
        }
      }
    }

  }

  public static class getStreamStatus_result implements org.apache.thrift.TBase<getStreamStatus_result, getStreamStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStreamStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStreamStatus_resultTupleSchemeFactory());
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.core.thrift.StreamFileDetails.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamStatus_result.class, metaDataMap);
    }

    public getStreamStatus_result() {
    }

    public getStreamStatus_result(
      List<com.kaisquare.core.thrift.StreamFileDetails> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamStatus_result(getStreamStatus_result other) {
      if (other.isSetSuccess()) {
        List<com.kaisquare.core.thrift.StreamFileDetails> __this__success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>();
        for (com.kaisquare.core.thrift.StreamFileDetails other_element : other.success) {
          __this__success.add(new com.kaisquare.core.thrift.StreamFileDetails(other_element));
        }
        this.success = __this__success;
      }
    }

    public getStreamStatus_result deepCopy() {
      return new getStreamStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.kaisquare.core.thrift.StreamFileDetails> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.kaisquare.core.thrift.StreamFileDetails elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>();
      }
      this.success.add(elem);
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> getSuccess() {
      return this.success;
    }

    public getStreamStatus_result setSuccess(List<com.kaisquare.core.thrift.StreamFileDetails> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.kaisquare.core.thrift.StreamFileDetails>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamStatus_result)
        return this.equals((getStreamStatus_result)that);
      return false;
    }

    public boolean equals(getStreamStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStreamStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStreamStatus_result typedOther = (getStreamStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStreamStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getStreamStatus_resultStandardScheme getScheme() {
        return new getStreamStatus_resultStandardScheme();
      }
    }

    private static class getStreamStatus_resultStandardScheme extends StandardScheme<getStreamStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    com.kaisquare.core.thrift.StreamFileDetails _elem34; // required
                    _elem34 = new com.kaisquare.core.thrift.StreamFileDetails();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.kaisquare.core.thrift.StreamFileDetails _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getStreamStatus_resultTupleScheme getScheme() {
        return new getStreamStatus_resultTupleScheme();
      }
    }

    private static class getStreamStatus_resultTupleScheme extends TupleScheme<getStreamStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.kaisquare.core.thrift.StreamFileDetails _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              com.kaisquare.core.thrift.StreamFileDetails _elem39; // required
              _elem39 = new com.kaisquare.core.thrift.StreamFileDetails();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class removeMediaFile_args implements org.apache.thrift.TBase<removeMediaFile_args, removeMediaFile_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeMediaFile_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MEDIA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaInfo", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeMediaFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeMediaFile_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String mediaType; // required
    public String mediaInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      MEDIA_TYPE((short)3, "mediaType"),
      MEDIA_INFO((short)4, "mediaInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 4: // MEDIA_INFO
            return MEDIA_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEDIA_INFO, new org.apache.thrift.meta_data.FieldMetaData("mediaInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeMediaFile_args.class, metaDataMap);
    }

    public removeMediaFile_args() {
    }

    public removeMediaFile_args(
      long deviceId,
      int channel,
      String mediaType,
      String mediaInfo)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.mediaType = mediaType;
      this.mediaInfo = mediaInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeMediaFile_args(removeMediaFile_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetMediaInfo()) {
        this.mediaInfo = other.mediaInfo;
      }
    }

    public removeMediaFile_args deepCopy() {
      return new removeMediaFile_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.mediaType = null;
      this.mediaInfo = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public removeMediaFile_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public removeMediaFile_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public removeMediaFile_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getMediaInfo() {
      return this.mediaInfo;
    }

    public removeMediaFile_args setMediaInfo(String mediaInfo) {
      this.mediaInfo = mediaInfo;
      return this;
    }

    public void unsetMediaInfo() {
      this.mediaInfo = null;
    }

    /** Returns true if field mediaInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaInfo() {
      return this.mediaInfo != null;
    }

    public void setMediaInfoIsSet(boolean value) {
      if (!value) {
        this.mediaInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case MEDIA_INFO:
        if (value == null) {
          unsetMediaInfo();
        } else {
          setMediaInfo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case MEDIA_TYPE:
        return getMediaType();

      case MEDIA_INFO:
        return getMediaInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case MEDIA_TYPE:
        return isSetMediaType();
      case MEDIA_INFO:
        return isSetMediaInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeMediaFile_args)
        return this.equals((removeMediaFile_args)that);
      return false;
    }

    public boolean equals(removeMediaFile_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_mediaInfo = true && this.isSetMediaInfo();
      boolean that_present_mediaInfo = true && that.isSetMediaInfo();
      if (this_present_mediaInfo || that_present_mediaInfo) {
        if (!(this_present_mediaInfo && that_present_mediaInfo))
          return false;
        if (!this.mediaInfo.equals(that.mediaInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeMediaFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeMediaFile_args typedOther = (removeMediaFile_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaInfo()).compareTo(typedOther.isSetMediaInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaInfo, typedOther.mediaInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeMediaFile_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaInfo:");
      if (this.mediaInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeMediaFile_argsStandardSchemeFactory implements SchemeFactory {
      public removeMediaFile_argsStandardScheme getScheme() {
        return new removeMediaFile_argsStandardScheme();
      }
    }

    private static class removeMediaFile_argsStandardScheme extends StandardScheme<removeMediaFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeMediaFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MEDIA_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaInfo = iprot.readString();
                struct.setMediaInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeMediaFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.mediaInfo != null) {
          oprot.writeFieldBegin(MEDIA_INFO_FIELD_DESC);
          oprot.writeString(struct.mediaInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeMediaFile_argsTupleSchemeFactory implements SchemeFactory {
      public removeMediaFile_argsTupleScheme getScheme() {
        return new removeMediaFile_argsTupleScheme();
      }
    }

    private static class removeMediaFile_argsTupleScheme extends TupleScheme<removeMediaFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeMediaFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetMediaType()) {
          optionals.set(2);
        }
        if (struct.isSetMediaInfo()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetMediaInfo()) {
          oprot.writeString(struct.mediaInfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeMediaFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mediaInfo = iprot.readString();
          struct.setMediaInfoIsSet(true);
        }
      }
    }

  }

  public static class removeMediaFile_result implements org.apache.thrift.TBase<removeMediaFile_result, removeMediaFile_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeMediaFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeMediaFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeMediaFile_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeMediaFile_result.class, metaDataMap);
    }

    public removeMediaFile_result() {
    }

    public removeMediaFile_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeMediaFile_result(removeMediaFile_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public removeMediaFile_result deepCopy() {
      return new removeMediaFile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeMediaFile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeMediaFile_result)
        return this.equals((removeMediaFile_result)that);
      return false;
    }

    public boolean equals(removeMediaFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeMediaFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeMediaFile_result typedOther = (removeMediaFile_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeMediaFile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeMediaFile_resultStandardSchemeFactory implements SchemeFactory {
      public removeMediaFile_resultStandardScheme getScheme() {
        return new removeMediaFile_resultStandardScheme();
      }
    }

    private static class removeMediaFile_resultStandardScheme extends StandardScheme<removeMediaFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeMediaFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeMediaFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeMediaFile_resultTupleSchemeFactory implements SchemeFactory {
      public removeMediaFile_resultTupleScheme getScheme() {
        return new removeMediaFile_resultTupleScheme();
      }
    }

    private static class removeMediaFile_resultTupleScheme extends TupleScheme<removeMediaFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeMediaFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeMediaFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStorageStatus_args implements org.apache.thrift.TBase<getStorageStatus_args, getStorageStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStorageStatus_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStorageStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStorageStatus_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStorageStatus_args.class, metaDataMap);
    }

    public getStorageStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStorageStatus_args(getStorageStatus_args other) {
    }

    public getStorageStatus_args deepCopy() {
      return new getStorageStatus_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStorageStatus_args)
        return this.equals((getStorageStatus_args)that);
      return false;
    }

    public boolean equals(getStorageStatus_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStorageStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStorageStatus_args typedOther = (getStorageStatus_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStorageStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStorageStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getStorageStatus_argsStandardScheme getScheme() {
        return new getStorageStatus_argsStandardScheme();
      }
    }

    private static class getStorageStatus_argsStandardScheme extends StandardScheme<getStorageStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStorageStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStorageStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStorageStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getStorageStatus_argsTupleScheme getScheme() {
        return new getStorageStatus_argsTupleScheme();
      }
    }

    private static class getStorageStatus_argsTupleScheme extends TupleScheme<getStorageStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStorageStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStorageStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getStorageStatus_result implements org.apache.thrift.TBase<getStorageStatus_result, getStorageStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStorageStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStorageStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStorageStatus_resultTupleSchemeFactory());
    }

    public List<com.kaisquare.core.thrift.StorageInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.core.thrift.StorageInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStorageStatus_result.class, metaDataMap);
    }

    public getStorageStatus_result() {
    }

    public getStorageStatus_result(
      List<com.kaisquare.core.thrift.StorageInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStorageStatus_result(getStorageStatus_result other) {
      if (other.isSetSuccess()) {
        List<com.kaisquare.core.thrift.StorageInfo> __this__success = new ArrayList<com.kaisquare.core.thrift.StorageInfo>();
        for (com.kaisquare.core.thrift.StorageInfo other_element : other.success) {
          __this__success.add(new com.kaisquare.core.thrift.StorageInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getStorageStatus_result deepCopy() {
      return new getStorageStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.kaisquare.core.thrift.StorageInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.kaisquare.core.thrift.StorageInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.kaisquare.core.thrift.StorageInfo>();
      }
      this.success.add(elem);
    }

    public List<com.kaisquare.core.thrift.StorageInfo> getSuccess() {
      return this.success;
    }

    public getStorageStatus_result setSuccess(List<com.kaisquare.core.thrift.StorageInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.kaisquare.core.thrift.StorageInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStorageStatus_result)
        return this.equals((getStorageStatus_result)that);
      return false;
    }

    public boolean equals(getStorageStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStorageStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStorageStatus_result typedOther = (getStorageStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStorageStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStorageStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getStorageStatus_resultStandardScheme getScheme() {
        return new getStorageStatus_resultStandardScheme();
      }
    }

    private static class getStorageStatus_resultStandardScheme extends StandardScheme<getStorageStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStorageStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.kaisquare.core.thrift.StorageInfo>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    com.kaisquare.core.thrift.StorageInfo _elem42; // required
                    _elem42 = new com.kaisquare.core.thrift.StorageInfo();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStorageStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.kaisquare.core.thrift.StorageInfo _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStorageStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getStorageStatus_resultTupleScheme getScheme() {
        return new getStorageStatus_resultTupleScheme();
      }
    }

    private static class getStorageStatus_resultTupleScheme extends TupleScheme<getStorageStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStorageStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.kaisquare.core.thrift.StorageInfo _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStorageStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.kaisquare.core.thrift.StorageInfo>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              com.kaisquare.core.thrift.StorageInfo _elem47; // required
              _elem47 = new com.kaisquare.core.thrift.StorageInfo();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecordingServerReport_args implements org.apache.thrift.TBase<getRecordingServerReport_args, getRecordingServerReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingServerReport_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingServerReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingServerReport_argsTupleSchemeFactory());
    }

    public long deviceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingServerReport_args.class, metaDataMap);
    }

    public getRecordingServerReport_args() {
    }

    public getRecordingServerReport_args(
      long deviceId)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingServerReport_args(getRecordingServerReport_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
    }

    public getRecordingServerReport_args deepCopy() {
      return new getRecordingServerReport_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public getRecordingServerReport_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingServerReport_args)
        return this.equals((getRecordingServerReport_args)that);
      return false;
    }

    public boolean equals(getRecordingServerReport_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecordingServerReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecordingServerReport_args typedOther = (getRecordingServerReport_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingServerReport_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingServerReport_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordingServerReport_argsStandardScheme getScheme() {
        return new getRecordingServerReport_argsStandardScheme();
      }
    }

    private static class getRecordingServerReport_argsStandardScheme extends StandardScheme<getRecordingServerReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingServerReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingServerReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingServerReport_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordingServerReport_argsTupleScheme getScheme() {
        return new getRecordingServerReport_argsTupleScheme();
      }
    }

    private static class getRecordingServerReport_argsTupleScheme extends TupleScheme<getRecordingServerReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingServerReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingServerReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
      }
    }

  }

  public static class getRecordingServerReport_result implements org.apache.thrift.TBase<getRecordingServerReport_result, getRecordingServerReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordingServerReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordingServerReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordingServerReport_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordingServerReport_result.class, metaDataMap);
    }

    public getRecordingServerReport_result() {
    }

    public getRecordingServerReport_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordingServerReport_result(getRecordingServerReport_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getRecordingServerReport_result deepCopy() {
      return new getRecordingServerReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getRecordingServerReport_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordingServerReport_result)
        return this.equals((getRecordingServerReport_result)that);
      return false;
    }

    public boolean equals(getRecordingServerReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecordingServerReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecordingServerReport_result typedOther = (getRecordingServerReport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordingServerReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordingServerReport_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordingServerReport_resultStandardScheme getScheme() {
        return new getRecordingServerReport_resultStandardScheme();
      }
    }

    private static class getRecordingServerReport_resultStandardScheme extends StandardScheme<getRecordingServerReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordingServerReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordingServerReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordingServerReport_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordingServerReport_resultTupleScheme getScheme() {
        return new getRecordingServerReport_resultTupleScheme();
      }
    }

    private static class getRecordingServerReport_resultTupleScheme extends TupleScheme<getRecordingServerReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordingServerReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordingServerReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
