/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.arbiter.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ArbiterManagementService {

  /**
   * Arbiter management communication interface.
   */
  public interface Iface {

    /**
     * Register server to Arbiter Server.
     * (1) serverId - Server ID.
     * (2) serverType - Server type.
     * (3) serverDetails - Detailed information of the server.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param serverId
     * @param serverType
     * @param serverDetails
     */
    public boolean registerServer(long serverId, String serverType, ServerDetails serverDetails) throws org.apache.thrift.TException;

    /**
     * Deregister server from Arbiter Server.
     * (1) serverId - Server ID.
     * (2) serverType - Server type.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param serverId
     * @param serverType
     */
    public boolean deregisterServer(long serverId, String serverType) throws org.apache.thrift.TException;

    /**
     * Sends data generated by a task to Arbiter Server.
     * (1) deviceId - Device ID.
     * (2) channel - Device channel.
     * (3) taskType - Task type.
     * (4) stringData - Json formatted string data.
     * (5) binaryData - Binary data.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param taskType
     * @param stringData
     * @param binaryData
     */
    public boolean sendTaskData(long deviceId, int channel, String taskType, String stringData, ByteBuffer binaryData) throws org.apache.thrift.TException;

    /**
     * Sends data generated by an event to Arbiter Server.
     * (1) deviceId - Device ID.
     * (2) channel - Device channel.
     * (3) eventType - Type of the event.
     * (4) eventTime - Time of the event.
     * (5) stringData - Json formatted string data.
     * (6) binaryData - Binary data.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param eventType
     * @param eventTime
     * @param stringData
     * @param binaryData
     */
    public boolean sendEventData(long deviceId, int channel, String eventType, long eventTime, String stringData, ByteBuffer binaryData) throws org.apache.thrift.TException;

    /**
     * For V4 or lower Nodes.
     * Get device server information from arbiter server.
     * (1) deviceInfo - device information.
     * Return the detailed server information.
     * input:  {"device-key":"50:e5:49:b4:e3:21"}
     * return: {"device-id":170, server-host":"10.101.10.210", "server-port":10790}
     * or
     * input:  {"device-id":170}
     * return:
     * {"device-key":"50:e5:49:b4:e3:21:", server-host":"10.101.10.210", "server-port":10790}
     * 
     * @param deviceInfo
     */
    public String getDeviceServer(String deviceInfo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerServer(long serverId, String serverType, ServerDetails serverDetails, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.registerServer_call> resultHandler) throws org.apache.thrift.TException;

    public void deregisterServer(long serverId, String serverType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deregisterServer_call> resultHandler) throws org.apache.thrift.TException;

    public void sendTaskData(long deviceId, int channel, String taskType, String stringData, ByteBuffer binaryData, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sendTaskData_call> resultHandler) throws org.apache.thrift.TException;

    public void sendEventData(long deviceId, int channel, String eventType, long eventTime, String stringData, ByteBuffer binaryData, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sendEventData_call> resultHandler) throws org.apache.thrift.TException;

    public void getDeviceServer(String deviceInfo, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDeviceServer_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean registerServer(long serverId, String serverType, ServerDetails serverDetails) throws org.apache.thrift.TException
    {
      send_registerServer(serverId, serverType, serverDetails);
      return recv_registerServer();
    }

    public void send_registerServer(long serverId, String serverType, ServerDetails serverDetails) throws org.apache.thrift.TException
    {
      registerServer_args args = new registerServer_args();
      args.setServerId(serverId);
      args.setServerType(serverType);
      args.setServerDetails(serverDetails);
      sendBase("registerServer", args);
    }

    public boolean recv_registerServer() throws org.apache.thrift.TException
    {
      registerServer_result result = new registerServer_result();
      receiveBase(result, "registerServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerServer failed: unknown result");
    }

    public boolean deregisterServer(long serverId, String serverType) throws org.apache.thrift.TException
    {
      send_deregisterServer(serverId, serverType);
      return recv_deregisterServer();
    }

    public void send_deregisterServer(long serverId, String serverType) throws org.apache.thrift.TException
    {
      deregisterServer_args args = new deregisterServer_args();
      args.setServerId(serverId);
      args.setServerType(serverType);
      sendBase("deregisterServer", args);
    }

    public boolean recv_deregisterServer() throws org.apache.thrift.TException
    {
      deregisterServer_result result = new deregisterServer_result();
      receiveBase(result, "deregisterServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deregisterServer failed: unknown result");
    }

    public boolean sendTaskData(long deviceId, int channel, String taskType, String stringData, ByteBuffer binaryData) throws org.apache.thrift.TException
    {
      send_sendTaskData(deviceId, channel, taskType, stringData, binaryData);
      return recv_sendTaskData();
    }

    public void send_sendTaskData(long deviceId, int channel, String taskType, String stringData, ByteBuffer binaryData) throws org.apache.thrift.TException
    {
      sendTaskData_args args = new sendTaskData_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setTaskType(taskType);
      args.setStringData(stringData);
      args.setBinaryData(binaryData);
      sendBase("sendTaskData", args);
    }

    public boolean recv_sendTaskData() throws org.apache.thrift.TException
    {
      sendTaskData_result result = new sendTaskData_result();
      receiveBase(result, "sendTaskData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendTaskData failed: unknown result");
    }

    public boolean sendEventData(long deviceId, int channel, String eventType, long eventTime, String stringData, ByteBuffer binaryData) throws org.apache.thrift.TException
    {
      send_sendEventData(deviceId, channel, eventType, eventTime, stringData, binaryData);
      return recv_sendEventData();
    }

    public void send_sendEventData(long deviceId, int channel, String eventType, long eventTime, String stringData, ByteBuffer binaryData) throws org.apache.thrift.TException
    {
      sendEventData_args args = new sendEventData_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setEventType(eventType);
      args.setEventTime(eventTime);
      args.setStringData(stringData);
      args.setBinaryData(binaryData);
      sendBase("sendEventData", args);
    }

    public boolean recv_sendEventData() throws org.apache.thrift.TException
    {
      sendEventData_result result = new sendEventData_result();
      receiveBase(result, "sendEventData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendEventData failed: unknown result");
    }

    public String getDeviceServer(String deviceInfo) throws org.apache.thrift.TException
    {
      send_getDeviceServer(deviceInfo);
      return recv_getDeviceServer();
    }

    public void send_getDeviceServer(String deviceInfo) throws org.apache.thrift.TException
    {
      getDeviceServer_args args = new getDeviceServer_args();
      args.setDeviceInfo(deviceInfo);
      sendBase("getDeviceServer", args);
    }

    public String recv_getDeviceServer() throws org.apache.thrift.TException
    {
      getDeviceServer_result result = new getDeviceServer_result();
      receiveBase(result, "getDeviceServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDeviceServer failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerServer(long serverId, String serverType, ServerDetails serverDetails, org.apache.thrift.async.AsyncMethodCallback<registerServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerServer_call method_call = new registerServer_call(serverId, serverType, serverDetails, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long serverId;
      private String serverType;
      private ServerDetails serverDetails;
      public registerServer_call(long serverId, String serverType, ServerDetails serverDetails, org.apache.thrift.async.AsyncMethodCallback<registerServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverId = serverId;
        this.serverType = serverType;
        this.serverDetails = serverDetails;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerServer_args args = new registerServer_args();
        args.setServerId(serverId);
        args.setServerType(serverType);
        args.setServerDetails(serverDetails);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerServer();
      }
    }

    public void deregisterServer(long serverId, String serverType, org.apache.thrift.async.AsyncMethodCallback<deregisterServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deregisterServer_call method_call = new deregisterServer_call(serverId, serverType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deregisterServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long serverId;
      private String serverType;
      public deregisterServer_call(long serverId, String serverType, org.apache.thrift.async.AsyncMethodCallback<deregisterServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.serverId = serverId;
        this.serverType = serverType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deregisterServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deregisterServer_args args = new deregisterServer_args();
        args.setServerId(serverId);
        args.setServerType(serverType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deregisterServer();
      }
    }

    public void sendTaskData(long deviceId, int channel, String taskType, String stringData, ByteBuffer binaryData, org.apache.thrift.async.AsyncMethodCallback<sendTaskData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendTaskData_call method_call = new sendTaskData_call(deviceId, channel, taskType, stringData, binaryData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendTaskData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String taskType;
      private String stringData;
      private ByteBuffer binaryData;
      public sendTaskData_call(long deviceId, int channel, String taskType, String stringData, ByteBuffer binaryData, org.apache.thrift.async.AsyncMethodCallback<sendTaskData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.taskType = taskType;
        this.stringData = stringData;
        this.binaryData = binaryData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendTaskData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendTaskData_args args = new sendTaskData_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setTaskType(taskType);
        args.setStringData(stringData);
        args.setBinaryData(binaryData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendTaskData();
      }
    }

    public void sendEventData(long deviceId, int channel, String eventType, long eventTime, String stringData, ByteBuffer binaryData, org.apache.thrift.async.AsyncMethodCallback<sendEventData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendEventData_call method_call = new sendEventData_call(deviceId, channel, eventType, eventTime, stringData, binaryData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendEventData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private String eventType;
      private long eventTime;
      private String stringData;
      private ByteBuffer binaryData;
      public sendEventData_call(long deviceId, int channel, String eventType, long eventTime, String stringData, ByteBuffer binaryData, org.apache.thrift.async.AsyncMethodCallback<sendEventData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.eventType = eventType;
        this.eventTime = eventTime;
        this.stringData = stringData;
        this.binaryData = binaryData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendEventData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendEventData_args args = new sendEventData_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setEventType(eventType);
        args.setEventTime(eventTime);
        args.setStringData(stringData);
        args.setBinaryData(binaryData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendEventData();
      }
    }

    public void getDeviceServer(String deviceInfo, org.apache.thrift.async.AsyncMethodCallback<getDeviceServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDeviceServer_call method_call = new getDeviceServer_call(deviceInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDeviceServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceInfo;
      public getDeviceServer_call(String deviceInfo, org.apache.thrift.async.AsyncMethodCallback<getDeviceServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceInfo = deviceInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDeviceServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDeviceServer_args args = new getDeviceServer_args();
        args.setDeviceInfo(deviceInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDeviceServer();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerServer", new registerServer());
      processMap.put("deregisterServer", new deregisterServer());
      processMap.put("sendTaskData", new sendTaskData());
      processMap.put("sendEventData", new sendEventData());
      processMap.put("getDeviceServer", new getDeviceServer());
      return processMap;
    }

    private static class registerServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerServer_args> {
      public registerServer() {
        super("registerServer");
      }

      protected registerServer_args getEmptyArgsInstance() {
        return new registerServer_args();
      }

      protected registerServer_result getResult(I iface, registerServer_args args) throws org.apache.thrift.TException {
        registerServer_result result = new registerServer_result();
        result.success = iface.registerServer(args.serverId, args.serverType, args.serverDetails);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class deregisterServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deregisterServer_args> {
      public deregisterServer() {
        super("deregisterServer");
      }

      protected deregisterServer_args getEmptyArgsInstance() {
        return new deregisterServer_args();
      }

      protected deregisterServer_result getResult(I iface, deregisterServer_args args) throws org.apache.thrift.TException {
        deregisterServer_result result = new deregisterServer_result();
        result.success = iface.deregisterServer(args.serverId, args.serverType);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class sendTaskData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendTaskData_args> {
      public sendTaskData() {
        super("sendTaskData");
      }

      protected sendTaskData_args getEmptyArgsInstance() {
        return new sendTaskData_args();
      }

      protected sendTaskData_result getResult(I iface, sendTaskData_args args) throws org.apache.thrift.TException {
        sendTaskData_result result = new sendTaskData_result();
        result.success = iface.sendTaskData(args.deviceId, args.channel, args.taskType, args.stringData, args.binaryData);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class sendEventData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendEventData_args> {
      public sendEventData() {
        super("sendEventData");
      }

      protected sendEventData_args getEmptyArgsInstance() {
        return new sendEventData_args();
      }

      protected sendEventData_result getResult(I iface, sendEventData_args args) throws org.apache.thrift.TException {
        sendEventData_result result = new sendEventData_result();
        result.success = iface.sendEventData(args.deviceId, args.channel, args.eventType, args.eventTime, args.stringData, args.binaryData);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getDeviceServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDeviceServer_args> {
      public getDeviceServer() {
        super("getDeviceServer");
      }

      protected getDeviceServer_args getEmptyArgsInstance() {
        return new getDeviceServer_args();
      }

      protected getDeviceServer_result getResult(I iface, getDeviceServer_args args) throws org.apache.thrift.TException {
        getDeviceServer_result result = new getDeviceServer_result();
        result.success = iface.getDeviceServer(args.deviceInfo);
        return result;
      }
    }

  }

  public static class registerServer_args implements org.apache.thrift.TBase<registerServer_args, registerServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerServer_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SERVER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serverType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SERVER_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("serverDetails", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerServer_argsTupleSchemeFactory());
    }

    public long serverId; // required
    public String serverType; // required
    public ServerDetails serverDetails; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "serverId"),
      SERVER_TYPE((short)2, "serverType"),
      SERVER_DETAILS((short)3, "serverDetails");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // SERVER_TYPE
            return SERVER_TYPE;
          case 3: // SERVER_DETAILS
            return SERVER_DETAILS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SERVER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serverType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVER_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("serverDetails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerDetails.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerServer_args.class, metaDataMap);
    }

    public registerServer_args() {
    }

    public registerServer_args(
      long serverId,
      String serverType,
      ServerDetails serverDetails)
    {
      this();
      this.serverId = serverId;
      setServerIdIsSet(true);
      this.serverType = serverType;
      this.serverDetails = serverDetails;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerServer_args(registerServer_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.serverId = other.serverId;
      if (other.isSetServerType()) {
        this.serverType = other.serverType;
      }
      if (other.isSetServerDetails()) {
        this.serverDetails = new ServerDetails(other.serverDetails);
      }
    }

    public registerServer_args deepCopy() {
      return new registerServer_args(this);
    }

    @Override
    public void clear() {
      setServerIdIsSet(false);
      this.serverId = 0;
      this.serverType = null;
      this.serverDetails = null;
    }

    public long getServerId() {
      return this.serverId;
    }

    public registerServer_args setServerId(long serverId) {
      this.serverId = serverId;
      setServerIdIsSet(true);
      return this;
    }

    public void unsetServerId() {
      __isset_bit_vector.clear(__SERVERID_ISSET_ID);
    }

    /** Returns true if field serverId is set (has been assigned a value) and false otherwise */
    public boolean isSetServerId() {
      return __isset_bit_vector.get(__SERVERID_ISSET_ID);
    }

    public void setServerIdIsSet(boolean value) {
      __isset_bit_vector.set(__SERVERID_ISSET_ID, value);
    }

    public String getServerType() {
      return this.serverType;
    }

    public registerServer_args setServerType(String serverType) {
      this.serverType = serverType;
      return this;
    }

    public void unsetServerType() {
      this.serverType = null;
    }

    /** Returns true if field serverType is set (has been assigned a value) and false otherwise */
    public boolean isSetServerType() {
      return this.serverType != null;
    }

    public void setServerTypeIsSet(boolean value) {
      if (!value) {
        this.serverType = null;
      }
    }

    public ServerDetails getServerDetails() {
      return this.serverDetails;
    }

    public registerServer_args setServerDetails(ServerDetails serverDetails) {
      this.serverDetails = serverDetails;
      return this;
    }

    public void unsetServerDetails() {
      this.serverDetails = null;
    }

    /** Returns true if field serverDetails is set (has been assigned a value) and false otherwise */
    public boolean isSetServerDetails() {
      return this.serverDetails != null;
    }

    public void setServerDetailsIsSet(boolean value) {
      if (!value) {
        this.serverDetails = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServerId();
        } else {
          setServerId((Long)value);
        }
        break;

      case SERVER_TYPE:
        if (value == null) {
          unsetServerType();
        } else {
          setServerType((String)value);
        }
        break;

      case SERVER_DETAILS:
        if (value == null) {
          unsetServerDetails();
        } else {
          setServerDetails((ServerDetails)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Long.valueOf(getServerId());

      case SERVER_TYPE:
        return getServerType();

      case SERVER_DETAILS:
        return getServerDetails();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServerId();
      case SERVER_TYPE:
        return isSetServerType();
      case SERVER_DETAILS:
        return isSetServerDetails();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerServer_args)
        return this.equals((registerServer_args)that);
      return false;
    }

    public boolean equals(registerServer_args that) {
      if (that == null)
        return false;

      boolean this_present_serverId = true;
      boolean that_present_serverId = true;
      if (this_present_serverId || that_present_serverId) {
        if (!(this_present_serverId && that_present_serverId))
          return false;
        if (this.serverId != that.serverId)
          return false;
      }

      boolean this_present_serverType = true && this.isSetServerType();
      boolean that_present_serverType = true && that.isSetServerType();
      if (this_present_serverType || that_present_serverType) {
        if (!(this_present_serverType && that_present_serverType))
          return false;
        if (!this.serverType.equals(that.serverType))
          return false;
      }

      boolean this_present_serverDetails = true && this.isSetServerDetails();
      boolean that_present_serverDetails = true && that.isSetServerDetails();
      if (this_present_serverDetails || that_present_serverDetails) {
        if (!(this_present_serverDetails && that_present_serverDetails))
          return false;
        if (!this.serverDetails.equals(that.serverDetails))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerServer_args typedOther = (registerServer_args)other;

      lastComparison = Boolean.valueOf(isSetServerId()).compareTo(typedOther.isSetServerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, typedOther.serverId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerType()).compareTo(typedOther.isSetServerType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverType, typedOther.serverType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerDetails()).compareTo(typedOther.isSetServerDetails());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerDetails()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverDetails, typedOther.serverDetails);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerServer_args(");
      boolean first = true;

      sb.append("serverId:");
      sb.append(this.serverId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverType:");
      if (this.serverType == null) {
        sb.append("null");
      } else {
        sb.append(this.serverType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverDetails:");
      if (this.serverDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.serverDetails);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerServer_argsStandardSchemeFactory implements SchemeFactory {
      public registerServer_argsStandardScheme getScheme() {
        return new registerServer_argsStandardScheme();
      }
    }

    private static class registerServer_argsStandardScheme extends StandardScheme<registerServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.serverId = iprot.readI64();
                struct.setServerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serverType = iprot.readString();
                struct.setServerTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVER_DETAILS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverDetails = new ServerDetails();
                struct.serverDetails.read(iprot);
                struct.setServerDetailsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI64(struct.serverId);
        oprot.writeFieldEnd();
        if (struct.serverType != null) {
          oprot.writeFieldBegin(SERVER_TYPE_FIELD_DESC);
          oprot.writeString(struct.serverType);
          oprot.writeFieldEnd();
        }
        if (struct.serverDetails != null) {
          oprot.writeFieldBegin(SERVER_DETAILS_FIELD_DESC);
          struct.serverDetails.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerServer_argsTupleSchemeFactory implements SchemeFactory {
      public registerServer_argsTupleScheme getScheme() {
        return new registerServer_argsTupleScheme();
      }
    }

    private static class registerServer_argsTupleScheme extends TupleScheme<registerServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerId()) {
          optionals.set(0);
        }
        if (struct.isSetServerType()) {
          optionals.set(1);
        }
        if (struct.isSetServerDetails()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetServerId()) {
          oprot.writeI64(struct.serverId);
        }
        if (struct.isSetServerType()) {
          oprot.writeString(struct.serverType);
        }
        if (struct.isSetServerDetails()) {
          struct.serverDetails.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.serverId = iprot.readI64();
          struct.setServerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverType = iprot.readString();
          struct.setServerTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serverDetails = new ServerDetails();
          struct.serverDetails.read(iprot);
          struct.setServerDetailsIsSet(true);
        }
      }
    }

  }

  public static class registerServer_result implements org.apache.thrift.TBase<registerServer_result, registerServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerServer_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerServer_result.class, metaDataMap);
    }

    public registerServer_result() {
    }

    public registerServer_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerServer_result(registerServer_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public registerServer_result deepCopy() {
      return new registerServer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public registerServer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerServer_result)
        return this.equals((registerServer_result)that);
      return false;
    }

    public boolean equals(registerServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(registerServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      registerServer_result typedOther = (registerServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerServer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerServer_resultStandardSchemeFactory implements SchemeFactory {
      public registerServer_resultStandardScheme getScheme() {
        return new registerServer_resultStandardScheme();
      }
    }

    private static class registerServer_resultStandardScheme extends StandardScheme<registerServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerServer_resultTupleSchemeFactory implements SchemeFactory {
      public registerServer_resultTupleScheme getScheme() {
        return new registerServer_resultTupleScheme();
      }
    }

    private static class registerServer_resultTupleScheme extends TupleScheme<registerServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deregisterServer_args implements org.apache.thrift.TBase<deregisterServer_args, deregisterServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deregisterServer_args");

    private static final org.apache.thrift.protocol.TField SERVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("serverId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField SERVER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serverType", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deregisterServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deregisterServer_argsTupleSchemeFactory());
    }

    public long serverId; // required
    public String serverType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SERVER_ID((short)1, "serverId"),
      SERVER_TYPE((short)2, "serverType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SERVER_ID
            return SERVER_ID;
          case 2: // SERVER_TYPE
            return SERVER_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SERVERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SERVER_ID, new org.apache.thrift.meta_data.FieldMetaData("serverId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SERVER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serverType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deregisterServer_args.class, metaDataMap);
    }

    public deregisterServer_args() {
    }

    public deregisterServer_args(
      long serverId,
      String serverType)
    {
      this();
      this.serverId = serverId;
      setServerIdIsSet(true);
      this.serverType = serverType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deregisterServer_args(deregisterServer_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.serverId = other.serverId;
      if (other.isSetServerType()) {
        this.serverType = other.serverType;
      }
    }

    public deregisterServer_args deepCopy() {
      return new deregisterServer_args(this);
    }

    @Override
    public void clear() {
      setServerIdIsSet(false);
      this.serverId = 0;
      this.serverType = null;
    }

    public long getServerId() {
      return this.serverId;
    }

    public deregisterServer_args setServerId(long serverId) {
      this.serverId = serverId;
      setServerIdIsSet(true);
      return this;
    }

    public void unsetServerId() {
      __isset_bit_vector.clear(__SERVERID_ISSET_ID);
    }

    /** Returns true if field serverId is set (has been assigned a value) and false otherwise */
    public boolean isSetServerId() {
      return __isset_bit_vector.get(__SERVERID_ISSET_ID);
    }

    public void setServerIdIsSet(boolean value) {
      __isset_bit_vector.set(__SERVERID_ISSET_ID, value);
    }

    public String getServerType() {
      return this.serverType;
    }

    public deregisterServer_args setServerType(String serverType) {
      this.serverType = serverType;
      return this;
    }

    public void unsetServerType() {
      this.serverType = null;
    }

    /** Returns true if field serverType is set (has been assigned a value) and false otherwise */
    public boolean isSetServerType() {
      return this.serverType != null;
    }

    public void setServerTypeIsSet(boolean value) {
      if (!value) {
        this.serverType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SERVER_ID:
        if (value == null) {
          unsetServerId();
        } else {
          setServerId((Long)value);
        }
        break;

      case SERVER_TYPE:
        if (value == null) {
          unsetServerType();
        } else {
          setServerType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SERVER_ID:
        return Long.valueOf(getServerId());

      case SERVER_TYPE:
        return getServerType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SERVER_ID:
        return isSetServerId();
      case SERVER_TYPE:
        return isSetServerType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deregisterServer_args)
        return this.equals((deregisterServer_args)that);
      return false;
    }

    public boolean equals(deregisterServer_args that) {
      if (that == null)
        return false;

      boolean this_present_serverId = true;
      boolean that_present_serverId = true;
      if (this_present_serverId || that_present_serverId) {
        if (!(this_present_serverId && that_present_serverId))
          return false;
        if (this.serverId != that.serverId)
          return false;
      }

      boolean this_present_serverType = true && this.isSetServerType();
      boolean that_present_serverType = true && that.isSetServerType();
      if (this_present_serverType || that_present_serverType) {
        if (!(this_present_serverType && that_present_serverType))
          return false;
        if (!this.serverType.equals(that.serverType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deregisterServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deregisterServer_args typedOther = (deregisterServer_args)other;

      lastComparison = Boolean.valueOf(isSetServerId()).compareTo(typedOther.isSetServerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverId, typedOther.serverId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerType()).compareTo(typedOther.isSetServerType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverType, typedOther.serverType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deregisterServer_args(");
      boolean first = true;

      sb.append("serverId:");
      sb.append(this.serverId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverType:");
      if (this.serverType == null) {
        sb.append("null");
      } else {
        sb.append(this.serverType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deregisterServer_argsStandardSchemeFactory implements SchemeFactory {
      public deregisterServer_argsStandardScheme getScheme() {
        return new deregisterServer_argsStandardScheme();
      }
    }

    private static class deregisterServer_argsStandardScheme extends StandardScheme<deregisterServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deregisterServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SERVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.serverId = iprot.readI64();
                struct.setServerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVER_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serverType = iprot.readString();
                struct.setServerTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deregisterServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SERVER_ID_FIELD_DESC);
        oprot.writeI64(struct.serverId);
        oprot.writeFieldEnd();
        if (struct.serverType != null) {
          oprot.writeFieldBegin(SERVER_TYPE_FIELD_DESC);
          oprot.writeString(struct.serverType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deregisterServer_argsTupleSchemeFactory implements SchemeFactory {
      public deregisterServer_argsTupleScheme getScheme() {
        return new deregisterServer_argsTupleScheme();
      }
    }

    private static class deregisterServer_argsTupleScheme extends TupleScheme<deregisterServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deregisterServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetServerId()) {
          optionals.set(0);
        }
        if (struct.isSetServerType()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetServerId()) {
          oprot.writeI64(struct.serverId);
        }
        if (struct.isSetServerType()) {
          oprot.writeString(struct.serverType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deregisterServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.serverId = iprot.readI64();
          struct.setServerIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverType = iprot.readString();
          struct.setServerTypeIsSet(true);
        }
      }
    }

  }

  public static class deregisterServer_result implements org.apache.thrift.TBase<deregisterServer_result, deregisterServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deregisterServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deregisterServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deregisterServer_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deregisterServer_result.class, metaDataMap);
    }

    public deregisterServer_result() {
    }

    public deregisterServer_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deregisterServer_result(deregisterServer_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deregisterServer_result deepCopy() {
      return new deregisterServer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deregisterServer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deregisterServer_result)
        return this.equals((deregisterServer_result)that);
      return false;
    }

    public boolean equals(deregisterServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deregisterServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deregisterServer_result typedOther = (deregisterServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deregisterServer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deregisterServer_resultStandardSchemeFactory implements SchemeFactory {
      public deregisterServer_resultStandardScheme getScheme() {
        return new deregisterServer_resultStandardScheme();
      }
    }

    private static class deregisterServer_resultStandardScheme extends StandardScheme<deregisterServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deregisterServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deregisterServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deregisterServer_resultTupleSchemeFactory implements SchemeFactory {
      public deregisterServer_resultTupleScheme getScheme() {
        return new deregisterServer_resultTupleScheme();
      }
    }

    private static class deregisterServer_resultTupleScheme extends TupleScheme<deregisterServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deregisterServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deregisterServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendTaskData_args implements org.apache.thrift.TBase<sendTaskData_args, sendTaskData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTaskData_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField STRING_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("stringData", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BINARY_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryData", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTaskData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTaskData_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String taskType; // required
    public String stringData; // required
    public ByteBuffer binaryData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      TASK_TYPE((short)3, "taskType"),
      STRING_DATA((short)4, "stringData"),
      BINARY_DATA((short)5, "binaryData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // TASK_TYPE
            return TASK_TYPE;
          case 4: // STRING_DATA
            return STRING_DATA;
          case 5: // BINARY_DATA
            return BINARY_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_DATA, new org.apache.thrift.meta_data.FieldMetaData("stringData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BINARY_DATA, new org.apache.thrift.meta_data.FieldMetaData("binaryData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTaskData_args.class, metaDataMap);
    }

    public sendTaskData_args() {
    }

    public sendTaskData_args(
      long deviceId,
      int channel,
      String taskType,
      String stringData,
      ByteBuffer binaryData)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.taskType = taskType;
      this.stringData = stringData;
      this.binaryData = binaryData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTaskData_args(sendTaskData_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetTaskType()) {
        this.taskType = other.taskType;
      }
      if (other.isSetStringData()) {
        this.stringData = other.stringData;
      }
      if (other.isSetBinaryData()) {
        this.binaryData = org.apache.thrift.TBaseHelper.copyBinary(other.binaryData);
;
      }
    }

    public sendTaskData_args deepCopy() {
      return new sendTaskData_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.taskType = null;
      this.stringData = null;
      this.binaryData = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public sendTaskData_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public sendTaskData_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getTaskType() {
      return this.taskType;
    }

    public sendTaskData_args setTaskType(String taskType) {
      this.taskType = taskType;
      return this;
    }

    public void unsetTaskType() {
      this.taskType = null;
    }

    /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskType() {
      return this.taskType != null;
    }

    public void setTaskTypeIsSet(boolean value) {
      if (!value) {
        this.taskType = null;
      }
    }

    public String getStringData() {
      return this.stringData;
    }

    public sendTaskData_args setStringData(String stringData) {
      this.stringData = stringData;
      return this;
    }

    public void unsetStringData() {
      this.stringData = null;
    }

    /** Returns true if field stringData is set (has been assigned a value) and false otherwise */
    public boolean isSetStringData() {
      return this.stringData != null;
    }

    public void setStringDataIsSet(boolean value) {
      if (!value) {
        this.stringData = null;
      }
    }

    public byte[] getBinaryData() {
      setBinaryData(org.apache.thrift.TBaseHelper.rightSize(binaryData));
      return binaryData == null ? null : binaryData.array();
    }

    public ByteBuffer bufferForBinaryData() {
      return binaryData;
    }

    public sendTaskData_args setBinaryData(byte[] binaryData) {
      setBinaryData(binaryData == null ? (ByteBuffer)null : ByteBuffer.wrap(binaryData));
      return this;
    }

    public sendTaskData_args setBinaryData(ByteBuffer binaryData) {
      this.binaryData = binaryData;
      return this;
    }

    public void unsetBinaryData() {
      this.binaryData = null;
    }

    /** Returns true if field binaryData is set (has been assigned a value) and false otherwise */
    public boolean isSetBinaryData() {
      return this.binaryData != null;
    }

    public void setBinaryDataIsSet(boolean value) {
      if (!value) {
        this.binaryData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case TASK_TYPE:
        if (value == null) {
          unsetTaskType();
        } else {
          setTaskType((String)value);
        }
        break;

      case STRING_DATA:
        if (value == null) {
          unsetStringData();
        } else {
          setStringData((String)value);
        }
        break;

      case BINARY_DATA:
        if (value == null) {
          unsetBinaryData();
        } else {
          setBinaryData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case TASK_TYPE:
        return getTaskType();

      case STRING_DATA:
        return getStringData();

      case BINARY_DATA:
        return getBinaryData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case TASK_TYPE:
        return isSetTaskType();
      case STRING_DATA:
        return isSetStringData();
      case BINARY_DATA:
        return isSetBinaryData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTaskData_args)
        return this.equals((sendTaskData_args)that);
      return false;
    }

    public boolean equals(sendTaskData_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_taskType = true && this.isSetTaskType();
      boolean that_present_taskType = true && that.isSetTaskType();
      if (this_present_taskType || that_present_taskType) {
        if (!(this_present_taskType && that_present_taskType))
          return false;
        if (!this.taskType.equals(that.taskType))
          return false;
      }

      boolean this_present_stringData = true && this.isSetStringData();
      boolean that_present_stringData = true && that.isSetStringData();
      if (this_present_stringData || that_present_stringData) {
        if (!(this_present_stringData && that_present_stringData))
          return false;
        if (!this.stringData.equals(that.stringData))
          return false;
      }

      boolean this_present_binaryData = true && this.isSetBinaryData();
      boolean that_present_binaryData = true && that.isSetBinaryData();
      if (this_present_binaryData || that_present_binaryData) {
        if (!(this_present_binaryData && that_present_binaryData))
          return false;
        if (!this.binaryData.equals(that.binaryData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendTaskData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendTaskData_args typedOther = (sendTaskData_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(typedOther.isSetTaskType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, typedOther.taskType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringData()).compareTo(typedOther.isSetStringData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringData, typedOther.stringData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBinaryData()).compareTo(typedOther.isSetBinaryData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBinaryData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryData, typedOther.binaryData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTaskData_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskType:");
      if (this.taskType == null) {
        sb.append("null");
      } else {
        sb.append(this.taskType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringData:");
      if (this.stringData == null) {
        sb.append("null");
      } else {
        sb.append(this.stringData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("binaryData:");
      if (this.binaryData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binaryData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTaskData_argsStandardSchemeFactory implements SchemeFactory {
      public sendTaskData_argsStandardScheme getScheme() {
        return new sendTaskData_argsStandardScheme();
      }
    }

    private static class sendTaskData_argsStandardScheme extends StandardScheme<sendTaskData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTaskData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TASK_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taskType = iprot.readString();
                struct.setTaskTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // STRING_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringData = iprot.readString();
                struct.setStringDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BINARY_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.binaryData = iprot.readBinary();
                struct.setBinaryDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTaskData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.taskType != null) {
          oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
          oprot.writeString(struct.taskType);
          oprot.writeFieldEnd();
        }
        if (struct.stringData != null) {
          oprot.writeFieldBegin(STRING_DATA_FIELD_DESC);
          oprot.writeString(struct.stringData);
          oprot.writeFieldEnd();
        }
        if (struct.binaryData != null) {
          oprot.writeFieldBegin(BINARY_DATA_FIELD_DESC);
          oprot.writeBinary(struct.binaryData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTaskData_argsTupleSchemeFactory implements SchemeFactory {
      public sendTaskData_argsTupleScheme getScheme() {
        return new sendTaskData_argsTupleScheme();
      }
    }

    private static class sendTaskData_argsTupleScheme extends TupleScheme<sendTaskData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTaskData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetTaskType()) {
          optionals.set(2);
        }
        if (struct.isSetStringData()) {
          optionals.set(3);
        }
        if (struct.isSetBinaryData()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetTaskType()) {
          oprot.writeString(struct.taskType);
        }
        if (struct.isSetStringData()) {
          oprot.writeString(struct.stringData);
        }
        if (struct.isSetBinaryData()) {
          oprot.writeBinary(struct.binaryData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTaskData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.taskType = iprot.readString();
          struct.setTaskTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.stringData = iprot.readString();
          struct.setStringDataIsSet(true);
        }
        if (incoming.get(4)) {
          struct.binaryData = iprot.readBinary();
          struct.setBinaryDataIsSet(true);
        }
      }
    }

  }

  public static class sendTaskData_result implements org.apache.thrift.TBase<sendTaskData_result, sendTaskData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendTaskData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendTaskData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendTaskData_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendTaskData_result.class, metaDataMap);
    }

    public sendTaskData_result() {
    }

    public sendTaskData_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendTaskData_result(sendTaskData_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public sendTaskData_result deepCopy() {
      return new sendTaskData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendTaskData_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendTaskData_result)
        return this.equals((sendTaskData_result)that);
      return false;
    }

    public boolean equals(sendTaskData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendTaskData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendTaskData_result typedOther = (sendTaskData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendTaskData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendTaskData_resultStandardSchemeFactory implements SchemeFactory {
      public sendTaskData_resultStandardScheme getScheme() {
        return new sendTaskData_resultStandardScheme();
      }
    }

    private static class sendTaskData_resultStandardScheme extends StandardScheme<sendTaskData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendTaskData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendTaskData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendTaskData_resultTupleSchemeFactory implements SchemeFactory {
      public sendTaskData_resultTupleScheme getScheme() {
        return new sendTaskData_resultTupleScheme();
      }
    }

    private static class sendTaskData_resultTupleScheme extends TupleScheme<sendTaskData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendTaskData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendTaskData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendEventData_args implements org.apache.thrift.TBase<sendEventData_args, sendEventData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendEventData_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField EVENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("eventTime", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField STRING_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("stringData", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField BINARY_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryData", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendEventData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendEventData_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public String eventType; // required
    public long eventTime; // required
    public String stringData; // required
    public ByteBuffer binaryData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      EVENT_TYPE((short)3, "eventType"),
      EVENT_TIME((short)4, "eventTime"),
      STRING_DATA((short)5, "stringData"),
      BINARY_DATA((short)6, "binaryData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // EVENT_TYPE
            return EVENT_TYPE;
          case 4: // EVENT_TIME
            return EVENT_TIME;
          case 5: // STRING_DATA
            return STRING_DATA;
          case 6: // BINARY_DATA
            return BINARY_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private static final int __EVENTTIME_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("eventType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EVENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("eventTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STRING_DATA, new org.apache.thrift.meta_data.FieldMetaData("stringData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BINARY_DATA, new org.apache.thrift.meta_data.FieldMetaData("binaryData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendEventData_args.class, metaDataMap);
    }

    public sendEventData_args() {
    }

    public sendEventData_args(
      long deviceId,
      int channel,
      String eventType,
      long eventTime,
      String stringData,
      ByteBuffer binaryData)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.eventType = eventType;
      this.eventTime = eventTime;
      setEventTimeIsSet(true);
      this.stringData = stringData;
      this.binaryData = binaryData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendEventData_args(sendEventData_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetEventType()) {
        this.eventType = other.eventType;
      }
      this.eventTime = other.eventTime;
      if (other.isSetStringData()) {
        this.stringData = other.stringData;
      }
      if (other.isSetBinaryData()) {
        this.binaryData = org.apache.thrift.TBaseHelper.copyBinary(other.binaryData);
;
      }
    }

    public sendEventData_args deepCopy() {
      return new sendEventData_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.eventType = null;
      setEventTimeIsSet(false);
      this.eventTime = 0;
      this.stringData = null;
      this.binaryData = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public sendEventData_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public sendEventData_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getEventType() {
      return this.eventType;
    }

    public sendEventData_args setEventType(String eventType) {
      this.eventType = eventType;
      return this;
    }

    public void unsetEventType() {
      this.eventType = null;
    }

    /** Returns true if field eventType is set (has been assigned a value) and false otherwise */
    public boolean isSetEventType() {
      return this.eventType != null;
    }

    public void setEventTypeIsSet(boolean value) {
      if (!value) {
        this.eventType = null;
      }
    }

    public long getEventTime() {
      return this.eventTime;
    }

    public sendEventData_args setEventTime(long eventTime) {
      this.eventTime = eventTime;
      setEventTimeIsSet(true);
      return this;
    }

    public void unsetEventTime() {
      __isset_bit_vector.clear(__EVENTTIME_ISSET_ID);
    }

    /** Returns true if field eventTime is set (has been assigned a value) and false otherwise */
    public boolean isSetEventTime() {
      return __isset_bit_vector.get(__EVENTTIME_ISSET_ID);
    }

    public void setEventTimeIsSet(boolean value) {
      __isset_bit_vector.set(__EVENTTIME_ISSET_ID, value);
    }

    public String getStringData() {
      return this.stringData;
    }

    public sendEventData_args setStringData(String stringData) {
      this.stringData = stringData;
      return this;
    }

    public void unsetStringData() {
      this.stringData = null;
    }

    /** Returns true if field stringData is set (has been assigned a value) and false otherwise */
    public boolean isSetStringData() {
      return this.stringData != null;
    }

    public void setStringDataIsSet(boolean value) {
      if (!value) {
        this.stringData = null;
      }
    }

    public byte[] getBinaryData() {
      setBinaryData(org.apache.thrift.TBaseHelper.rightSize(binaryData));
      return binaryData == null ? null : binaryData.array();
    }

    public ByteBuffer bufferForBinaryData() {
      return binaryData;
    }

    public sendEventData_args setBinaryData(byte[] binaryData) {
      setBinaryData(binaryData == null ? (ByteBuffer)null : ByteBuffer.wrap(binaryData));
      return this;
    }

    public sendEventData_args setBinaryData(ByteBuffer binaryData) {
      this.binaryData = binaryData;
      return this;
    }

    public void unsetBinaryData() {
      this.binaryData = null;
    }

    /** Returns true if field binaryData is set (has been assigned a value) and false otherwise */
    public boolean isSetBinaryData() {
      return this.binaryData != null;
    }

    public void setBinaryDataIsSet(boolean value) {
      if (!value) {
        this.binaryData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case EVENT_TYPE:
        if (value == null) {
          unsetEventType();
        } else {
          setEventType((String)value);
        }
        break;

      case EVENT_TIME:
        if (value == null) {
          unsetEventTime();
        } else {
          setEventTime((Long)value);
        }
        break;

      case STRING_DATA:
        if (value == null) {
          unsetStringData();
        } else {
          setStringData((String)value);
        }
        break;

      case BINARY_DATA:
        if (value == null) {
          unsetBinaryData();
        } else {
          setBinaryData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case EVENT_TYPE:
        return getEventType();

      case EVENT_TIME:
        return Long.valueOf(getEventTime());

      case STRING_DATA:
        return getStringData();

      case BINARY_DATA:
        return getBinaryData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case EVENT_TYPE:
        return isSetEventType();
      case EVENT_TIME:
        return isSetEventTime();
      case STRING_DATA:
        return isSetStringData();
      case BINARY_DATA:
        return isSetBinaryData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendEventData_args)
        return this.equals((sendEventData_args)that);
      return false;
    }

    public boolean equals(sendEventData_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_eventType = true && this.isSetEventType();
      boolean that_present_eventType = true && that.isSetEventType();
      if (this_present_eventType || that_present_eventType) {
        if (!(this_present_eventType && that_present_eventType))
          return false;
        if (!this.eventType.equals(that.eventType))
          return false;
      }

      boolean this_present_eventTime = true;
      boolean that_present_eventTime = true;
      if (this_present_eventTime || that_present_eventTime) {
        if (!(this_present_eventTime && that_present_eventTime))
          return false;
        if (this.eventTime != that.eventTime)
          return false;
      }

      boolean this_present_stringData = true && this.isSetStringData();
      boolean that_present_stringData = true && that.isSetStringData();
      if (this_present_stringData || that_present_stringData) {
        if (!(this_present_stringData && that_present_stringData))
          return false;
        if (!this.stringData.equals(that.stringData))
          return false;
      }

      boolean this_present_binaryData = true && this.isSetBinaryData();
      boolean that_present_binaryData = true && that.isSetBinaryData();
      if (this_present_binaryData || that_present_binaryData) {
        if (!(this_present_binaryData && that_present_binaryData))
          return false;
        if (!this.binaryData.equals(that.binaryData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendEventData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendEventData_args typedOther = (sendEventData_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEventType()).compareTo(typedOther.isSetEventType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventType, typedOther.eventType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEventTime()).compareTo(typedOther.isSetEventTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventTime, typedOther.eventTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringData()).compareTo(typedOther.isSetStringData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringData, typedOther.stringData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBinaryData()).compareTo(typedOther.isSetBinaryData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBinaryData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryData, typedOther.binaryData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendEventData_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("eventType:");
      if (this.eventType == null) {
        sb.append("null");
      } else {
        sb.append(this.eventType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eventTime:");
      sb.append(this.eventTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringData:");
      if (this.stringData == null) {
        sb.append("null");
      } else {
        sb.append(this.stringData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("binaryData:");
      if (this.binaryData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binaryData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendEventData_argsStandardSchemeFactory implements SchemeFactory {
      public sendEventData_argsStandardScheme getScheme() {
        return new sendEventData_argsStandardScheme();
      }
    }

    private static class sendEventData_argsStandardScheme extends StandardScheme<sendEventData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendEventData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EVENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.eventType = iprot.readString();
                struct.setEventTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EVENT_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.eventTime = iprot.readI64();
                struct.setEventTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // STRING_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringData = iprot.readString();
                struct.setStringDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // BINARY_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.binaryData = iprot.readBinary();
                struct.setBinaryDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendEventData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.eventType != null) {
          oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.eventType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EVENT_TIME_FIELD_DESC);
        oprot.writeI64(struct.eventTime);
        oprot.writeFieldEnd();
        if (struct.stringData != null) {
          oprot.writeFieldBegin(STRING_DATA_FIELD_DESC);
          oprot.writeString(struct.stringData);
          oprot.writeFieldEnd();
        }
        if (struct.binaryData != null) {
          oprot.writeFieldBegin(BINARY_DATA_FIELD_DESC);
          oprot.writeBinary(struct.binaryData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendEventData_argsTupleSchemeFactory implements SchemeFactory {
      public sendEventData_argsTupleScheme getScheme() {
        return new sendEventData_argsTupleScheme();
      }
    }

    private static class sendEventData_argsTupleScheme extends TupleScheme<sendEventData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendEventData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetEventType()) {
          optionals.set(2);
        }
        if (struct.isSetEventTime()) {
          optionals.set(3);
        }
        if (struct.isSetStringData()) {
          optionals.set(4);
        }
        if (struct.isSetBinaryData()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetEventType()) {
          oprot.writeString(struct.eventType);
        }
        if (struct.isSetEventTime()) {
          oprot.writeI64(struct.eventTime);
        }
        if (struct.isSetStringData()) {
          oprot.writeString(struct.stringData);
        }
        if (struct.isSetBinaryData()) {
          oprot.writeBinary(struct.binaryData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendEventData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.eventType = iprot.readString();
          struct.setEventTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eventTime = iprot.readI64();
          struct.setEventTimeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.stringData = iprot.readString();
          struct.setStringDataIsSet(true);
        }
        if (incoming.get(5)) {
          struct.binaryData = iprot.readBinary();
          struct.setBinaryDataIsSet(true);
        }
      }
    }

  }

  public static class sendEventData_result implements org.apache.thrift.TBase<sendEventData_result, sendEventData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendEventData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendEventData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendEventData_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendEventData_result.class, metaDataMap);
    }

    public sendEventData_result() {
    }

    public sendEventData_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendEventData_result(sendEventData_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public sendEventData_result deepCopy() {
      return new sendEventData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendEventData_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendEventData_result)
        return this.equals((sendEventData_result)that);
      return false;
    }

    public boolean equals(sendEventData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendEventData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendEventData_result typedOther = (sendEventData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendEventData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendEventData_resultStandardSchemeFactory implements SchemeFactory {
      public sendEventData_resultStandardScheme getScheme() {
        return new sendEventData_resultStandardScheme();
      }
    }

    private static class sendEventData_resultStandardScheme extends StandardScheme<sendEventData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendEventData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendEventData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendEventData_resultTupleSchemeFactory implements SchemeFactory {
      public sendEventData_resultTupleScheme getScheme() {
        return new sendEventData_resultTupleScheme();
      }
    }

    private static class sendEventData_resultTupleScheme extends TupleScheme<sendEventData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendEventData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendEventData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDeviceServer_args implements org.apache.thrift.TBase<getDeviceServer_args, getDeviceServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDeviceServer_args");

    private static final org.apache.thrift.protocol.TField DEVICE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceInfo", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDeviceServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDeviceServer_argsTupleSchemeFactory());
    }

    public String deviceInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_INFO((short)1, "deviceInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_INFO
            return DEVICE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_INFO, new org.apache.thrift.meta_data.FieldMetaData("deviceInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDeviceServer_args.class, metaDataMap);
    }

    public getDeviceServer_args() {
    }

    public getDeviceServer_args(
      String deviceInfo)
    {
      this();
      this.deviceInfo = deviceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDeviceServer_args(getDeviceServer_args other) {
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = other.deviceInfo;
      }
    }

    public getDeviceServer_args deepCopy() {
      return new getDeviceServer_args(this);
    }

    @Override
    public void clear() {
      this.deviceInfo = null;
    }

    public String getDeviceInfo() {
      return this.deviceInfo;
    }

    public getDeviceServer_args setDeviceInfo(String deviceInfo) {
      this.deviceInfo = deviceInfo;
      return this;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_INFO:
        if (value == null) {
          unsetDeviceInfo();
        } else {
          setDeviceInfo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_INFO:
        return getDeviceInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_INFO:
        return isSetDeviceInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDeviceServer_args)
        return this.equals((getDeviceServer_args)that);
      return false;
    }

    public boolean equals(getDeviceServer_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDeviceServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDeviceServer_args typedOther = (getDeviceServer_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceInfo()).compareTo(typedOther.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceInfo, typedOther.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDeviceServer_args(");
      boolean first = true;

      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDeviceServer_argsStandardSchemeFactory implements SchemeFactory {
      public getDeviceServer_argsStandardScheme getScheme() {
        return new getDeviceServer_argsStandardScheme();
      }
    }

    private static class getDeviceServer_argsStandardScheme extends StandardScheme<getDeviceServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDeviceServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceInfo = iprot.readString();
                struct.setDeviceInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDeviceServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceInfo != null) {
          oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
          oprot.writeString(struct.deviceInfo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDeviceServer_argsTupleSchemeFactory implements SchemeFactory {
      public getDeviceServer_argsTupleScheme getScheme() {
        return new getDeviceServer_argsTupleScheme();
      }
    }

    private static class getDeviceServer_argsTupleScheme extends TupleScheme<getDeviceServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDeviceServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceInfo()) {
          oprot.writeString(struct.deviceInfo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDeviceServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceInfo = iprot.readString();
          struct.setDeviceInfoIsSet(true);
        }
      }
    }

  }

  public static class getDeviceServer_result implements org.apache.thrift.TBase<getDeviceServer_result, getDeviceServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDeviceServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDeviceServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDeviceServer_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDeviceServer_result.class, metaDataMap);
    }

    public getDeviceServer_result() {
    }

    public getDeviceServer_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDeviceServer_result(getDeviceServer_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getDeviceServer_result deepCopy() {
      return new getDeviceServer_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getDeviceServer_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDeviceServer_result)
        return this.equals((getDeviceServer_result)that);
      return false;
    }

    public boolean equals(getDeviceServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDeviceServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDeviceServer_result typedOther = (getDeviceServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDeviceServer_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDeviceServer_resultStandardSchemeFactory implements SchemeFactory {
      public getDeviceServer_resultStandardScheme getScheme() {
        return new getDeviceServer_resultStandardScheme();
      }
    }

    private static class getDeviceServer_resultStandardScheme extends StandardScheme<getDeviceServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDeviceServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDeviceServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDeviceServer_resultTupleSchemeFactory implements SchemeFactory {
      public getDeviceServer_resultTupleScheme getScheme() {
        return new getDeviceServer_resultTupleScheme();
      }
    }

    private static class getDeviceServer_resultTupleScheme extends TupleScheme<getDeviceServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDeviceServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDeviceServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
