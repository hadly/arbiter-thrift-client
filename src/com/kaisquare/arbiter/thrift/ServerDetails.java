/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.arbiter.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Server status.
 * (1) serverHost - Server host.
 * (2) serverPort - Server port.
 * (3) cpuUsage - Cpu usage percent, 0-100.
 * (4) memUsage - Mem usage percent, 0-100.
 * (5) availDiskSpace - Available disk space, unit: MB.
 * (6) totalDiskSpace - Total disk space, unit: MB.
 * (7) activeStreams - Number of streams processing.
 * (8) maxStreams - Number of streams can process.
 */
public class ServerDetails implements org.apache.thrift.TBase<ServerDetails, ServerDetails._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServerDetails");

  private static final org.apache.thrift.protocol.TField SERVER_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("serverHost", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverPort", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CPU_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuUsage", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MEM_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("memUsage", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AVAIL_DISK_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("availDiskSpace", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TOTAL_DISK_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalDiskSpace", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ACTIVE_STREAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("activeStreams", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_STREAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxStreams", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServerDetailsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServerDetailsTupleSchemeFactory());
  }

  public String serverHost; // required
  public int serverPort; // required
  public int cpuUsage; // required
  public int memUsage; // required
  public int availDiskSpace; // required
  public int totalDiskSpace; // required
  public int activeStreams; // required
  public int maxStreams; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_HOST((short)1, "serverHost"),
    SERVER_PORT((short)2, "serverPort"),
    CPU_USAGE((short)3, "cpuUsage"),
    MEM_USAGE((short)4, "memUsage"),
    AVAIL_DISK_SPACE((short)5, "availDiskSpace"),
    TOTAL_DISK_SPACE((short)6, "totalDiskSpace"),
    ACTIVE_STREAMS((short)7, "activeStreams"),
    MAX_STREAMS((short)8, "maxStreams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_HOST
          return SERVER_HOST;
        case 2: // SERVER_PORT
          return SERVER_PORT;
        case 3: // CPU_USAGE
          return CPU_USAGE;
        case 4: // MEM_USAGE
          return MEM_USAGE;
        case 5: // AVAIL_DISK_SPACE
          return AVAIL_DISK_SPACE;
        case 6: // TOTAL_DISK_SPACE
          return TOTAL_DISK_SPACE;
        case 7: // ACTIVE_STREAMS
          return ACTIVE_STREAMS;
        case 8: // MAX_STREAMS
          return MAX_STREAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVERPORT_ISSET_ID = 0;
  private static final int __CPUUSAGE_ISSET_ID = 1;
  private static final int __MEMUSAGE_ISSET_ID = 2;
  private static final int __AVAILDISKSPACE_ISSET_ID = 3;
  private static final int __TOTALDISKSPACE_ISSET_ID = 4;
  private static final int __ACTIVESTREAMS_ISSET_ID = 5;
  private static final int __MAXSTREAMS_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_HOST, new org.apache.thrift.meta_data.FieldMetaData("serverHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_PORT, new org.apache.thrift.meta_data.FieldMetaData("serverPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPU_USAGE, new org.apache.thrift.meta_data.FieldMetaData("cpuUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEM_USAGE, new org.apache.thrift.meta_data.FieldMetaData("memUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVAIL_DISK_SPACE, new org.apache.thrift.meta_data.FieldMetaData("availDiskSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_DISK_SPACE, new org.apache.thrift.meta_data.FieldMetaData("totalDiskSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE_STREAMS, new org.apache.thrift.meta_data.FieldMetaData("activeStreams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_STREAMS, new org.apache.thrift.meta_data.FieldMetaData("maxStreams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServerDetails.class, metaDataMap);
  }

  public ServerDetails() {
  }

  public ServerDetails(
    String serverHost,
    int serverPort,
    int cpuUsage,
    int memUsage,
    int availDiskSpace,
    int totalDiskSpace,
    int activeStreams,
    int maxStreams)
  {
    this();
    this.serverHost = serverHost;
    this.serverPort = serverPort;
    setServerPortIsSet(true);
    this.cpuUsage = cpuUsage;
    setCpuUsageIsSet(true);
    this.memUsage = memUsage;
    setMemUsageIsSet(true);
    this.availDiskSpace = availDiskSpace;
    setAvailDiskSpaceIsSet(true);
    this.totalDiskSpace = totalDiskSpace;
    setTotalDiskSpaceIsSet(true);
    this.activeStreams = activeStreams;
    setActiveStreamsIsSet(true);
    this.maxStreams = maxStreams;
    setMaxStreamsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServerDetails(ServerDetails other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetServerHost()) {
      this.serverHost = other.serverHost;
    }
    this.serverPort = other.serverPort;
    this.cpuUsage = other.cpuUsage;
    this.memUsage = other.memUsage;
    this.availDiskSpace = other.availDiskSpace;
    this.totalDiskSpace = other.totalDiskSpace;
    this.activeStreams = other.activeStreams;
    this.maxStreams = other.maxStreams;
  }

  public ServerDetails deepCopy() {
    return new ServerDetails(this);
  }

  @Override
  public void clear() {
    this.serverHost = null;
    setServerPortIsSet(false);
    this.serverPort = 0;
    setCpuUsageIsSet(false);
    this.cpuUsage = 0;
    setMemUsageIsSet(false);
    this.memUsage = 0;
    setAvailDiskSpaceIsSet(false);
    this.availDiskSpace = 0;
    setTotalDiskSpaceIsSet(false);
    this.totalDiskSpace = 0;
    setActiveStreamsIsSet(false);
    this.activeStreams = 0;
    setMaxStreamsIsSet(false);
    this.maxStreams = 0;
  }

  public String getServerHost() {
    return this.serverHost;
  }

  public ServerDetails setServerHost(String serverHost) {
    this.serverHost = serverHost;
    return this;
  }

  public void unsetServerHost() {
    this.serverHost = null;
  }

  /** Returns true if field serverHost is set (has been assigned a value) and false otherwise */
  public boolean isSetServerHost() {
    return this.serverHost != null;
  }

  public void setServerHostIsSet(boolean value) {
    if (!value) {
      this.serverHost = null;
    }
  }

  public int getServerPort() {
    return this.serverPort;
  }

  public ServerDetails setServerPort(int serverPort) {
    this.serverPort = serverPort;
    setServerPortIsSet(true);
    return this;
  }

  public void unsetServerPort() {
    __isset_bit_vector.clear(__SERVERPORT_ISSET_ID);
  }

  /** Returns true if field serverPort is set (has been assigned a value) and false otherwise */
  public boolean isSetServerPort() {
    return __isset_bit_vector.get(__SERVERPORT_ISSET_ID);
  }

  public void setServerPortIsSet(boolean value) {
    __isset_bit_vector.set(__SERVERPORT_ISSET_ID, value);
  }

  public int getCpuUsage() {
    return this.cpuUsage;
  }

  public ServerDetails setCpuUsage(int cpuUsage) {
    this.cpuUsage = cpuUsage;
    setCpuUsageIsSet(true);
    return this;
  }

  public void unsetCpuUsage() {
    __isset_bit_vector.clear(__CPUUSAGE_ISSET_ID);
  }

  /** Returns true if field cpuUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuUsage() {
    return __isset_bit_vector.get(__CPUUSAGE_ISSET_ID);
  }

  public void setCpuUsageIsSet(boolean value) {
    __isset_bit_vector.set(__CPUUSAGE_ISSET_ID, value);
  }

  public int getMemUsage() {
    return this.memUsage;
  }

  public ServerDetails setMemUsage(int memUsage) {
    this.memUsage = memUsage;
    setMemUsageIsSet(true);
    return this;
  }

  public void unsetMemUsage() {
    __isset_bit_vector.clear(__MEMUSAGE_ISSET_ID);
  }

  /** Returns true if field memUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetMemUsage() {
    return __isset_bit_vector.get(__MEMUSAGE_ISSET_ID);
  }

  public void setMemUsageIsSet(boolean value) {
    __isset_bit_vector.set(__MEMUSAGE_ISSET_ID, value);
  }

  public int getAvailDiskSpace() {
    return this.availDiskSpace;
  }

  public ServerDetails setAvailDiskSpace(int availDiskSpace) {
    this.availDiskSpace = availDiskSpace;
    setAvailDiskSpaceIsSet(true);
    return this;
  }

  public void unsetAvailDiskSpace() {
    __isset_bit_vector.clear(__AVAILDISKSPACE_ISSET_ID);
  }

  /** Returns true if field availDiskSpace is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailDiskSpace() {
    return __isset_bit_vector.get(__AVAILDISKSPACE_ISSET_ID);
  }

  public void setAvailDiskSpaceIsSet(boolean value) {
    __isset_bit_vector.set(__AVAILDISKSPACE_ISSET_ID, value);
  }

  public int getTotalDiskSpace() {
    return this.totalDiskSpace;
  }

  public ServerDetails setTotalDiskSpace(int totalDiskSpace) {
    this.totalDiskSpace = totalDiskSpace;
    setTotalDiskSpaceIsSet(true);
    return this;
  }

  public void unsetTotalDiskSpace() {
    __isset_bit_vector.clear(__TOTALDISKSPACE_ISSET_ID);
  }

  /** Returns true if field totalDiskSpace is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalDiskSpace() {
    return __isset_bit_vector.get(__TOTALDISKSPACE_ISSET_ID);
  }

  public void setTotalDiskSpaceIsSet(boolean value) {
    __isset_bit_vector.set(__TOTALDISKSPACE_ISSET_ID, value);
  }

  public int getActiveStreams() {
    return this.activeStreams;
  }

  public ServerDetails setActiveStreams(int activeStreams) {
    this.activeStreams = activeStreams;
    setActiveStreamsIsSet(true);
    return this;
  }

  public void unsetActiveStreams() {
    __isset_bit_vector.clear(__ACTIVESTREAMS_ISSET_ID);
  }

  /** Returns true if field activeStreams is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveStreams() {
    return __isset_bit_vector.get(__ACTIVESTREAMS_ISSET_ID);
  }

  public void setActiveStreamsIsSet(boolean value) {
    __isset_bit_vector.set(__ACTIVESTREAMS_ISSET_ID, value);
  }

  public int getMaxStreams() {
    return this.maxStreams;
  }

  public ServerDetails setMaxStreams(int maxStreams) {
    this.maxStreams = maxStreams;
    setMaxStreamsIsSet(true);
    return this;
  }

  public void unsetMaxStreams() {
    __isset_bit_vector.clear(__MAXSTREAMS_ISSET_ID);
  }

  /** Returns true if field maxStreams is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxStreams() {
    return __isset_bit_vector.get(__MAXSTREAMS_ISSET_ID);
  }

  public void setMaxStreamsIsSet(boolean value) {
    __isset_bit_vector.set(__MAXSTREAMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVER_HOST:
      if (value == null) {
        unsetServerHost();
      } else {
        setServerHost((String)value);
      }
      break;

    case SERVER_PORT:
      if (value == null) {
        unsetServerPort();
      } else {
        setServerPort((Integer)value);
      }
      break;

    case CPU_USAGE:
      if (value == null) {
        unsetCpuUsage();
      } else {
        setCpuUsage((Integer)value);
      }
      break;

    case MEM_USAGE:
      if (value == null) {
        unsetMemUsage();
      } else {
        setMemUsage((Integer)value);
      }
      break;

    case AVAIL_DISK_SPACE:
      if (value == null) {
        unsetAvailDiskSpace();
      } else {
        setAvailDiskSpace((Integer)value);
      }
      break;

    case TOTAL_DISK_SPACE:
      if (value == null) {
        unsetTotalDiskSpace();
      } else {
        setTotalDiskSpace((Integer)value);
      }
      break;

    case ACTIVE_STREAMS:
      if (value == null) {
        unsetActiveStreams();
      } else {
        setActiveStreams((Integer)value);
      }
      break;

    case MAX_STREAMS:
      if (value == null) {
        unsetMaxStreams();
      } else {
        setMaxStreams((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_HOST:
      return getServerHost();

    case SERVER_PORT:
      return Integer.valueOf(getServerPort());

    case CPU_USAGE:
      return Integer.valueOf(getCpuUsage());

    case MEM_USAGE:
      return Integer.valueOf(getMemUsage());

    case AVAIL_DISK_SPACE:
      return Integer.valueOf(getAvailDiskSpace());

    case TOTAL_DISK_SPACE:
      return Integer.valueOf(getTotalDiskSpace());

    case ACTIVE_STREAMS:
      return Integer.valueOf(getActiveStreams());

    case MAX_STREAMS:
      return Integer.valueOf(getMaxStreams());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVER_HOST:
      return isSetServerHost();
    case SERVER_PORT:
      return isSetServerPort();
    case CPU_USAGE:
      return isSetCpuUsage();
    case MEM_USAGE:
      return isSetMemUsage();
    case AVAIL_DISK_SPACE:
      return isSetAvailDiskSpace();
    case TOTAL_DISK_SPACE:
      return isSetTotalDiskSpace();
    case ACTIVE_STREAMS:
      return isSetActiveStreams();
    case MAX_STREAMS:
      return isSetMaxStreams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServerDetails)
      return this.equals((ServerDetails)that);
    return false;
  }

  public boolean equals(ServerDetails that) {
    if (that == null)
      return false;

    boolean this_present_serverHost = true && this.isSetServerHost();
    boolean that_present_serverHost = true && that.isSetServerHost();
    if (this_present_serverHost || that_present_serverHost) {
      if (!(this_present_serverHost && that_present_serverHost))
        return false;
      if (!this.serverHost.equals(that.serverHost))
        return false;
    }

    boolean this_present_serverPort = true;
    boolean that_present_serverPort = true;
    if (this_present_serverPort || that_present_serverPort) {
      if (!(this_present_serverPort && that_present_serverPort))
        return false;
      if (this.serverPort != that.serverPort)
        return false;
    }

    boolean this_present_cpuUsage = true;
    boolean that_present_cpuUsage = true;
    if (this_present_cpuUsage || that_present_cpuUsage) {
      if (!(this_present_cpuUsage && that_present_cpuUsage))
        return false;
      if (this.cpuUsage != that.cpuUsage)
        return false;
    }

    boolean this_present_memUsage = true;
    boolean that_present_memUsage = true;
    if (this_present_memUsage || that_present_memUsage) {
      if (!(this_present_memUsage && that_present_memUsage))
        return false;
      if (this.memUsage != that.memUsage)
        return false;
    }

    boolean this_present_availDiskSpace = true;
    boolean that_present_availDiskSpace = true;
    if (this_present_availDiskSpace || that_present_availDiskSpace) {
      if (!(this_present_availDiskSpace && that_present_availDiskSpace))
        return false;
      if (this.availDiskSpace != that.availDiskSpace)
        return false;
    }

    boolean this_present_totalDiskSpace = true;
    boolean that_present_totalDiskSpace = true;
    if (this_present_totalDiskSpace || that_present_totalDiskSpace) {
      if (!(this_present_totalDiskSpace && that_present_totalDiskSpace))
        return false;
      if (this.totalDiskSpace != that.totalDiskSpace)
        return false;
    }

    boolean this_present_activeStreams = true;
    boolean that_present_activeStreams = true;
    if (this_present_activeStreams || that_present_activeStreams) {
      if (!(this_present_activeStreams && that_present_activeStreams))
        return false;
      if (this.activeStreams != that.activeStreams)
        return false;
    }

    boolean this_present_maxStreams = true;
    boolean that_present_maxStreams = true;
    if (this_present_maxStreams || that_present_maxStreams) {
      if (!(this_present_maxStreams && that_present_maxStreams))
        return false;
      if (this.maxStreams != that.maxStreams)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ServerDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ServerDetails typedOther = (ServerDetails)other;

    lastComparison = Boolean.valueOf(isSetServerHost()).compareTo(typedOther.isSetServerHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverHost, typedOther.serverHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerPort()).compareTo(typedOther.isSetServerPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverPort, typedOther.serverPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuUsage()).compareTo(typedOther.isSetCpuUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuUsage, typedOther.cpuUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemUsage()).compareTo(typedOther.isSetMemUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memUsage, typedOther.memUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailDiskSpace()).compareTo(typedOther.isSetAvailDiskSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailDiskSpace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availDiskSpace, typedOther.availDiskSpace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalDiskSpace()).compareTo(typedOther.isSetTotalDiskSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalDiskSpace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalDiskSpace, typedOther.totalDiskSpace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveStreams()).compareTo(typedOther.isSetActiveStreams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveStreams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeStreams, typedOther.activeStreams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxStreams()).compareTo(typedOther.isSetMaxStreams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxStreams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxStreams, typedOther.maxStreams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServerDetails(");
    boolean first = true;

    sb.append("serverHost:");
    if (this.serverHost == null) {
      sb.append("null");
    } else {
      sb.append(this.serverHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverPort:");
    sb.append(this.serverPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuUsage:");
    sb.append(this.cpuUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memUsage:");
    sb.append(this.memUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("availDiskSpace:");
    sb.append(this.availDiskSpace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalDiskSpace:");
    sb.append(this.totalDiskSpace);
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeStreams:");
    sb.append(this.activeStreams);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxStreams:");
    sb.append(this.maxStreams);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServerDetailsStandardSchemeFactory implements SchemeFactory {
    public ServerDetailsStandardScheme getScheme() {
      return new ServerDetailsStandardScheme();
    }
  }

  private static class ServerDetailsStandardScheme extends StandardScheme<ServerDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServerDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverHost = iprot.readString();
              struct.setServerHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serverPort = iprot.readI32();
              struct.setServerPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CPU_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuUsage = iprot.readI32();
              struct.setCpuUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEM_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memUsage = iprot.readI32();
              struct.setMemUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVAIL_DISK_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.availDiskSpace = iprot.readI32();
              struct.setAvailDiskSpaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOTAL_DISK_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalDiskSpace = iprot.readI32();
              struct.setTotalDiskSpaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACTIVE_STREAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeStreams = iprot.readI32();
              struct.setActiveStreamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_STREAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxStreams = iprot.readI32();
              struct.setMaxStreamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServerDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serverHost != null) {
        oprot.writeFieldBegin(SERVER_HOST_FIELD_DESC);
        oprot.writeString(struct.serverHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SERVER_PORT_FIELD_DESC);
      oprot.writeI32(struct.serverPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CPU_USAGE_FIELD_DESC);
      oprot.writeI32(struct.cpuUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEM_USAGE_FIELD_DESC);
      oprot.writeI32(struct.memUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVAIL_DISK_SPACE_FIELD_DESC);
      oprot.writeI32(struct.availDiskSpace);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_DISK_SPACE_FIELD_DESC);
      oprot.writeI32(struct.totalDiskSpace);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_STREAMS_FIELD_DESC);
      oprot.writeI32(struct.activeStreams);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_STREAMS_FIELD_DESC);
      oprot.writeI32(struct.maxStreams);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServerDetailsTupleSchemeFactory implements SchemeFactory {
    public ServerDetailsTupleScheme getScheme() {
      return new ServerDetailsTupleScheme();
    }
  }

  private static class ServerDetailsTupleScheme extends TupleScheme<ServerDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServerDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetServerHost()) {
        optionals.set(0);
      }
      if (struct.isSetServerPort()) {
        optionals.set(1);
      }
      if (struct.isSetCpuUsage()) {
        optionals.set(2);
      }
      if (struct.isSetMemUsage()) {
        optionals.set(3);
      }
      if (struct.isSetAvailDiskSpace()) {
        optionals.set(4);
      }
      if (struct.isSetTotalDiskSpace()) {
        optionals.set(5);
      }
      if (struct.isSetActiveStreams()) {
        optionals.set(6);
      }
      if (struct.isSetMaxStreams()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetServerHost()) {
        oprot.writeString(struct.serverHost);
      }
      if (struct.isSetServerPort()) {
        oprot.writeI32(struct.serverPort);
      }
      if (struct.isSetCpuUsage()) {
        oprot.writeI32(struct.cpuUsage);
      }
      if (struct.isSetMemUsage()) {
        oprot.writeI32(struct.memUsage);
      }
      if (struct.isSetAvailDiskSpace()) {
        oprot.writeI32(struct.availDiskSpace);
      }
      if (struct.isSetTotalDiskSpace()) {
        oprot.writeI32(struct.totalDiskSpace);
      }
      if (struct.isSetActiveStreams()) {
        oprot.writeI32(struct.activeStreams);
      }
      if (struct.isSetMaxStreams()) {
        oprot.writeI32(struct.maxStreams);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServerDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.serverHost = iprot.readString();
        struct.setServerHostIsSet(true);
      }
      if (incoming.get(1)) {
        struct.serverPort = iprot.readI32();
        struct.setServerPortIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cpuUsage = iprot.readI32();
        struct.setCpuUsageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.memUsage = iprot.readI32();
        struct.setMemUsageIsSet(true);
      }
      if (incoming.get(4)) {
        struct.availDiskSpace = iprot.readI32();
        struct.setAvailDiskSpaceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.totalDiskSpace = iprot.readI32();
        struct.setTotalDiskSpaceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.activeStreams = iprot.readI32();
        struct.setActiveStreamsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.maxStreams = iprot.readI32();
        struct.setMaxStreamsIsSet(true);
      }
    }
  }

}

