/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.platform.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NodeService {

  /**
   * NodeService - this service provides API for KAI Nodes to push information to Platform Cloud Server.
   */
  public interface Iface {

    /**
     * Add camera.
     * 
     * (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
     * (2) cameraName - Name of the camera
     * (3) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
     * (4) nodeCoreDeviceId - ID of the camera (core side deviceID on the Node)
     * (5) channels - Number of channels that this camera supports
     * 
     * @param nodeId
     * @param cameraName
     * @param nodePlatformDeviceId
     * @param nodeCoreDeviceId
     * @param channels
     */
    public boolean addCamera(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels) throws PlatformException, org.apache.thrift.TException;

    /**
     * Update camera.
     * 
     * (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
     * (2) cameraName - Name of the camera
     * (3) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
     * (4) nodeCoreDeviceId - ID of the camera (core side deviceID on the Node)
     * (5) channels - Number of channels that this camera supports
     * 
     * @param nodeId
     * @param cameraName
     * @param nodePlatformDeviceId
     * @param nodeCoreDeviceId
     * @param channels
     */
    public boolean updateCamera(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels) throws PlatformException, org.apache.thrift.TException;

    /**
     * Remove camera.
     * 
     * (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
     * (2) cameraId - ID of the camera (platform side deviceID on the Node)
     * 
     * @param nodeId
     * @param nodePlatformDeviceId
     */
    public boolean removeCamera(String nodeId, String nodePlatformDeviceId) throws PlatformException, org.apache.thrift.TException;

    /**
     * Started a VCA on Node.
     * 
     * (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
     * (2) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
     * (3) channelNo - The channel number of camera on which VCA is started.
     * (4) vcaType - Type of the VCA that is started.
     * 
     * @param nodeId
     * @param nodePlatformDeviceId
     * @param channelNo
     * @param vcaType
     */
    public boolean startVca(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType) throws PlatformException, org.apache.thrift.TException;

    /**
     * Stopped a VCA on Node.
     * 
     * (1) nodeId - ID of the Node (platform side deviceId of the Node on Cloud server).
     * (2) nodePlatformDeviceId - ID of the camera (platform side deviceID on the Node)
     * (3) channelNo - The channel number of camera on which VCA is started.
     * (4) vcaType - Type of the VCA that is started.
     * 
     * @param nodeId
     * @param nodePlatformDeviceId
     * @param channelNo
     * @param vcaType
     */
    public boolean stopVca(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType) throws PlatformException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addCamera(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addCamera_call> resultHandler) throws org.apache.thrift.TException;

    public void updateCamera(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateCamera_call> resultHandler) throws org.apache.thrift.TException;

    public void removeCamera(String nodeId, String nodePlatformDeviceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.removeCamera_call> resultHandler) throws org.apache.thrift.TException;

    public void startVca(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startVca_call> resultHandler) throws org.apache.thrift.TException;

    public void stopVca(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopVca_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean addCamera(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels) throws PlatformException, org.apache.thrift.TException
    {
      send_addCamera(nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels);
      return recv_addCamera();
    }

    public void send_addCamera(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels) throws org.apache.thrift.TException
    {
      addCamera_args args = new addCamera_args();
      args.setNodeId(nodeId);
      args.setCameraName(cameraName);
      args.setNodePlatformDeviceId(nodePlatformDeviceId);
      args.setNodeCoreDeviceId(nodeCoreDeviceId);
      args.setChannels(channels);
      sendBase("addCamera", args);
    }

    public boolean recv_addCamera() throws PlatformException, org.apache.thrift.TException
    {
      addCamera_result result = new addCamera_result();
      receiveBase(result, "addCamera");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.platformExp != null) {
        throw result.platformExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCamera failed: unknown result");
    }

    public boolean updateCamera(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels) throws PlatformException, org.apache.thrift.TException
    {
      send_updateCamera(nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels);
      return recv_updateCamera();
    }

    public void send_updateCamera(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels) throws org.apache.thrift.TException
    {
      updateCamera_args args = new updateCamera_args();
      args.setNodeId(nodeId);
      args.setCameraName(cameraName);
      args.setNodePlatformDeviceId(nodePlatformDeviceId);
      args.setNodeCoreDeviceId(nodeCoreDeviceId);
      args.setChannels(channels);
      sendBase("updateCamera", args);
    }

    public boolean recv_updateCamera() throws PlatformException, org.apache.thrift.TException
    {
      updateCamera_result result = new updateCamera_result();
      receiveBase(result, "updateCamera");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.platformExp != null) {
        throw result.platformExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCamera failed: unknown result");
    }

    public boolean removeCamera(String nodeId, String nodePlatformDeviceId) throws PlatformException, org.apache.thrift.TException
    {
      send_removeCamera(nodeId, nodePlatformDeviceId);
      return recv_removeCamera();
    }

    public void send_removeCamera(String nodeId, String nodePlatformDeviceId) throws org.apache.thrift.TException
    {
      removeCamera_args args = new removeCamera_args();
      args.setNodeId(nodeId);
      args.setNodePlatformDeviceId(nodePlatformDeviceId);
      sendBase("removeCamera", args);
    }

    public boolean recv_removeCamera() throws PlatformException, org.apache.thrift.TException
    {
      removeCamera_result result = new removeCamera_result();
      receiveBase(result, "removeCamera");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.platformExp != null) {
        throw result.platformExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeCamera failed: unknown result");
    }

    public boolean startVca(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType) throws PlatformException, org.apache.thrift.TException
    {
      send_startVca(nodeId, nodePlatformDeviceId, channelNo, vcaType);
      return recv_startVca();
    }

    public void send_startVca(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType) throws org.apache.thrift.TException
    {
      startVca_args args = new startVca_args();
      args.setNodeId(nodeId);
      args.setNodePlatformDeviceId(nodePlatformDeviceId);
      args.setChannelNo(channelNo);
      args.setVcaType(vcaType);
      sendBase("startVca", args);
    }

    public boolean recv_startVca() throws PlatformException, org.apache.thrift.TException
    {
      startVca_result result = new startVca_result();
      receiveBase(result, "startVca");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.platformExp != null) {
        throw result.platformExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startVca failed: unknown result");
    }

    public boolean stopVca(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType) throws PlatformException, org.apache.thrift.TException
    {
      send_stopVca(nodeId, nodePlatformDeviceId, channelNo, vcaType);
      return recv_stopVca();
    }

    public void send_stopVca(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType) throws org.apache.thrift.TException
    {
      stopVca_args args = new stopVca_args();
      args.setNodeId(nodeId);
      args.setNodePlatformDeviceId(nodePlatformDeviceId);
      args.setChannelNo(channelNo);
      args.setVcaType(vcaType);
      sendBase("stopVca", args);
    }

    public boolean recv_stopVca() throws PlatformException, org.apache.thrift.TException
    {
      stopVca_result result = new stopVca_result();
      receiveBase(result, "stopVca");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.platformExp != null) {
        throw result.platformExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopVca failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addCamera(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels, org.apache.thrift.async.AsyncMethodCallback<addCamera_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCamera_call method_call = new addCamera_call(nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCamera_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeId;
      private String cameraName;
      private String nodePlatformDeviceId;
      private String nodeCoreDeviceId;
      private int channels;
      public addCamera_call(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels, org.apache.thrift.async.AsyncMethodCallback<addCamera_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.cameraName = cameraName;
        this.nodePlatformDeviceId = nodePlatformDeviceId;
        this.nodeCoreDeviceId = nodeCoreDeviceId;
        this.channels = channels;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCamera", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCamera_args args = new addCamera_args();
        args.setNodeId(nodeId);
        args.setCameraName(cameraName);
        args.setNodePlatformDeviceId(nodePlatformDeviceId);
        args.setNodeCoreDeviceId(nodeCoreDeviceId);
        args.setChannels(channels);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws PlatformException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addCamera();
      }
    }

    public void updateCamera(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels, org.apache.thrift.async.AsyncMethodCallback<updateCamera_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCamera_call method_call = new updateCamera_call(nodeId, cameraName, nodePlatformDeviceId, nodeCoreDeviceId, channels, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCamera_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeId;
      private String cameraName;
      private String nodePlatformDeviceId;
      private String nodeCoreDeviceId;
      private int channels;
      public updateCamera_call(String nodeId, String cameraName, String nodePlatformDeviceId, String nodeCoreDeviceId, int channels, org.apache.thrift.async.AsyncMethodCallback<updateCamera_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.cameraName = cameraName;
        this.nodePlatformDeviceId = nodePlatformDeviceId;
        this.nodeCoreDeviceId = nodeCoreDeviceId;
        this.channels = channels;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCamera", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCamera_args args = new updateCamera_args();
        args.setNodeId(nodeId);
        args.setCameraName(cameraName);
        args.setNodePlatformDeviceId(nodePlatformDeviceId);
        args.setNodeCoreDeviceId(nodeCoreDeviceId);
        args.setChannels(channels);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws PlatformException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCamera();
      }
    }

    public void removeCamera(String nodeId, String nodePlatformDeviceId, org.apache.thrift.async.AsyncMethodCallback<removeCamera_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeCamera_call method_call = new removeCamera_call(nodeId, nodePlatformDeviceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeCamera_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeId;
      private String nodePlatformDeviceId;
      public removeCamera_call(String nodeId, String nodePlatformDeviceId, org.apache.thrift.async.AsyncMethodCallback<removeCamera_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.nodePlatformDeviceId = nodePlatformDeviceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeCamera", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeCamera_args args = new removeCamera_args();
        args.setNodeId(nodeId);
        args.setNodePlatformDeviceId(nodePlatformDeviceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws PlatformException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeCamera();
      }
    }

    public void startVca(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType, org.apache.thrift.async.AsyncMethodCallback<startVca_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startVca_call method_call = new startVca_call(nodeId, nodePlatformDeviceId, channelNo, vcaType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startVca_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeId;
      private String nodePlatformDeviceId;
      private int channelNo;
      private String vcaType;
      public startVca_call(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType, org.apache.thrift.async.AsyncMethodCallback<startVca_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.nodePlatformDeviceId = nodePlatformDeviceId;
        this.channelNo = channelNo;
        this.vcaType = vcaType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startVca", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startVca_args args = new startVca_args();
        args.setNodeId(nodeId);
        args.setNodePlatformDeviceId(nodePlatformDeviceId);
        args.setChannelNo(channelNo);
        args.setVcaType(vcaType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws PlatformException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startVca();
      }
    }

    public void stopVca(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType, org.apache.thrift.async.AsyncMethodCallback<stopVca_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopVca_call method_call = new stopVca_call(nodeId, nodePlatformDeviceId, channelNo, vcaType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopVca_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String nodeId;
      private String nodePlatformDeviceId;
      private int channelNo;
      private String vcaType;
      public stopVca_call(String nodeId, String nodePlatformDeviceId, int channelNo, String vcaType, org.apache.thrift.async.AsyncMethodCallback<stopVca_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nodeId = nodeId;
        this.nodePlatformDeviceId = nodePlatformDeviceId;
        this.channelNo = channelNo;
        this.vcaType = vcaType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopVca", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopVca_args args = new stopVca_args();
        args.setNodeId(nodeId);
        args.setNodePlatformDeviceId(nodePlatformDeviceId);
        args.setChannelNo(channelNo);
        args.setVcaType(vcaType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws PlatformException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopVca();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addCamera", new addCamera());
      processMap.put("updateCamera", new updateCamera());
      processMap.put("removeCamera", new removeCamera());
      processMap.put("startVca", new startVca());
      processMap.put("stopVca", new stopVca());
      return processMap;
    }

    private static class addCamera<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCamera_args> {
      public addCamera() {
        super("addCamera");
      }

      protected addCamera_args getEmptyArgsInstance() {
        return new addCamera_args();
      }

      protected addCamera_result getResult(I iface, addCamera_args args) throws org.apache.thrift.TException {
        addCamera_result result = new addCamera_result();
        try {
          result.success = iface.addCamera(args.nodeId, args.cameraName, args.nodePlatformDeviceId, args.nodeCoreDeviceId, args.channels);
          result.setSuccessIsSet(true);
        } catch (PlatformException platformExp) {
          result.platformExp = platformExp;
        }
        return result;
      }
    }

    private static class updateCamera<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCamera_args> {
      public updateCamera() {
        super("updateCamera");
      }

      protected updateCamera_args getEmptyArgsInstance() {
        return new updateCamera_args();
      }

      protected updateCamera_result getResult(I iface, updateCamera_args args) throws org.apache.thrift.TException {
        updateCamera_result result = new updateCamera_result();
        try {
          result.success = iface.updateCamera(args.nodeId, args.cameraName, args.nodePlatformDeviceId, args.nodeCoreDeviceId, args.channels);
          result.setSuccessIsSet(true);
        } catch (PlatformException platformExp) {
          result.platformExp = platformExp;
        }
        return result;
      }
    }

    private static class removeCamera<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeCamera_args> {
      public removeCamera() {
        super("removeCamera");
      }

      protected removeCamera_args getEmptyArgsInstance() {
        return new removeCamera_args();
      }

      protected removeCamera_result getResult(I iface, removeCamera_args args) throws org.apache.thrift.TException {
        removeCamera_result result = new removeCamera_result();
        try {
          result.success = iface.removeCamera(args.nodeId, args.nodePlatformDeviceId);
          result.setSuccessIsSet(true);
        } catch (PlatformException platformExp) {
          result.platformExp = platformExp;
        }
        return result;
      }
    }

    private static class startVca<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startVca_args> {
      public startVca() {
        super("startVca");
      }

      protected startVca_args getEmptyArgsInstance() {
        return new startVca_args();
      }

      protected startVca_result getResult(I iface, startVca_args args) throws org.apache.thrift.TException {
        startVca_result result = new startVca_result();
        try {
          result.success = iface.startVca(args.nodeId, args.nodePlatformDeviceId, args.channelNo, args.vcaType);
          result.setSuccessIsSet(true);
        } catch (PlatformException platformExp) {
          result.platformExp = platformExp;
        }
        return result;
      }
    }

    private static class stopVca<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopVca_args> {
      public stopVca() {
        super("stopVca");
      }

      protected stopVca_args getEmptyArgsInstance() {
        return new stopVca_args();
      }

      protected stopVca_result getResult(I iface, stopVca_args args) throws org.apache.thrift.TException {
        stopVca_result result = new stopVca_result();
        try {
          result.success = iface.stopVca(args.nodeId, args.nodePlatformDeviceId, args.channelNo, args.vcaType);
          result.setSuccessIsSet(true);
        } catch (PlatformException platformExp) {
          result.platformExp = platformExp;
        }
        return result;
      }
    }

  }

  public static class addCamera_args implements org.apache.thrift.TBase<addCamera_args, addCamera_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCamera_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CAMERA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cameraName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NODE_PLATFORM_DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePlatformDeviceId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NODE_CORE_DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeCoreDeviceId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CHANNELS_FIELD_DESC = new org.apache.thrift.protocol.TField("channels", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCamera_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCamera_argsTupleSchemeFactory());
    }

    public String nodeId; // required
    public String cameraName; // required
    public String nodePlatformDeviceId; // required
    public String nodeCoreDeviceId; // required
    public int channels; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      CAMERA_NAME((short)2, "cameraName"),
      NODE_PLATFORM_DEVICE_ID((short)3, "nodePlatformDeviceId"),
      NODE_CORE_DEVICE_ID((short)4, "nodeCoreDeviceId"),
      CHANNELS((short)5, "channels");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // CAMERA_NAME
            return CAMERA_NAME;
          case 3: // NODE_PLATFORM_DEVICE_ID
            return NODE_PLATFORM_DEVICE_ID;
          case 4: // NODE_CORE_DEVICE_ID
            return NODE_CORE_DEVICE_ID;
          case 5: // CHANNELS
            return CHANNELS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHANNELS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CAMERA_NAME, new org.apache.thrift.meta_data.FieldMetaData("cameraName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_PLATFORM_DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodePlatformDeviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_CORE_DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeCoreDeviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNELS, new org.apache.thrift.meta_data.FieldMetaData("channels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCamera_args.class, metaDataMap);
    }

    public addCamera_args() {
    }

    public addCamera_args(
      String nodeId,
      String cameraName,
      String nodePlatformDeviceId,
      String nodeCoreDeviceId,
      int channels)
    {
      this();
      this.nodeId = nodeId;
      this.cameraName = cameraName;
      this.nodePlatformDeviceId = nodePlatformDeviceId;
      this.nodeCoreDeviceId = nodeCoreDeviceId;
      this.channels = channels;
      setChannelsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCamera_args(addCamera_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      if (other.isSetCameraName()) {
        this.cameraName = other.cameraName;
      }
      if (other.isSetNodePlatformDeviceId()) {
        this.nodePlatformDeviceId = other.nodePlatformDeviceId;
      }
      if (other.isSetNodeCoreDeviceId()) {
        this.nodeCoreDeviceId = other.nodeCoreDeviceId;
      }
      this.channels = other.channels;
    }

    public addCamera_args deepCopy() {
      return new addCamera_args(this);
    }

    @Override
    public void clear() {
      this.nodeId = null;
      this.cameraName = null;
      this.nodePlatformDeviceId = null;
      this.nodeCoreDeviceId = null;
      setChannelsIsSet(false);
      this.channels = 0;
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public addCamera_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public String getCameraName() {
      return this.cameraName;
    }

    public addCamera_args setCameraName(String cameraName) {
      this.cameraName = cameraName;
      return this;
    }

    public void unsetCameraName() {
      this.cameraName = null;
    }

    /** Returns true if field cameraName is set (has been assigned a value) and false otherwise */
    public boolean isSetCameraName() {
      return this.cameraName != null;
    }

    public void setCameraNameIsSet(boolean value) {
      if (!value) {
        this.cameraName = null;
      }
    }

    public String getNodePlatformDeviceId() {
      return this.nodePlatformDeviceId;
    }

    public addCamera_args setNodePlatformDeviceId(String nodePlatformDeviceId) {
      this.nodePlatformDeviceId = nodePlatformDeviceId;
      return this;
    }

    public void unsetNodePlatformDeviceId() {
      this.nodePlatformDeviceId = null;
    }

    /** Returns true if field nodePlatformDeviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodePlatformDeviceId() {
      return this.nodePlatformDeviceId != null;
    }

    public void setNodePlatformDeviceIdIsSet(boolean value) {
      if (!value) {
        this.nodePlatformDeviceId = null;
      }
    }

    public String getNodeCoreDeviceId() {
      return this.nodeCoreDeviceId;
    }

    public addCamera_args setNodeCoreDeviceId(String nodeCoreDeviceId) {
      this.nodeCoreDeviceId = nodeCoreDeviceId;
      return this;
    }

    public void unsetNodeCoreDeviceId() {
      this.nodeCoreDeviceId = null;
    }

    /** Returns true if field nodeCoreDeviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeCoreDeviceId() {
      return this.nodeCoreDeviceId != null;
    }

    public void setNodeCoreDeviceIdIsSet(boolean value) {
      if (!value) {
        this.nodeCoreDeviceId = null;
      }
    }

    public int getChannels() {
      return this.channels;
    }

    public addCamera_args setChannels(int channels) {
      this.channels = channels;
      setChannelsIsSet(true);
      return this;
    }

    public void unsetChannels() {
      __isset_bit_vector.clear(__CHANNELS_ISSET_ID);
    }

    /** Returns true if field channels is set (has been assigned a value) and false otherwise */
    public boolean isSetChannels() {
      return __isset_bit_vector.get(__CHANNELS_ISSET_ID);
    }

    public void setChannelsIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNELS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case CAMERA_NAME:
        if (value == null) {
          unsetCameraName();
        } else {
          setCameraName((String)value);
        }
        break;

      case NODE_PLATFORM_DEVICE_ID:
        if (value == null) {
          unsetNodePlatformDeviceId();
        } else {
          setNodePlatformDeviceId((String)value);
        }
        break;

      case NODE_CORE_DEVICE_ID:
        if (value == null) {
          unsetNodeCoreDeviceId();
        } else {
          setNodeCoreDeviceId((String)value);
        }
        break;

      case CHANNELS:
        if (value == null) {
          unsetChannels();
        } else {
          setChannels((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case CAMERA_NAME:
        return getCameraName();

      case NODE_PLATFORM_DEVICE_ID:
        return getNodePlatformDeviceId();

      case NODE_CORE_DEVICE_ID:
        return getNodeCoreDeviceId();

      case CHANNELS:
        return Integer.valueOf(getChannels());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case CAMERA_NAME:
        return isSetCameraName();
      case NODE_PLATFORM_DEVICE_ID:
        return isSetNodePlatformDeviceId();
      case NODE_CORE_DEVICE_ID:
        return isSetNodeCoreDeviceId();
      case CHANNELS:
        return isSetChannels();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCamera_args)
        return this.equals((addCamera_args)that);
      return false;
    }

    public boolean equals(addCamera_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_cameraName = true && this.isSetCameraName();
      boolean that_present_cameraName = true && that.isSetCameraName();
      if (this_present_cameraName || that_present_cameraName) {
        if (!(this_present_cameraName && that_present_cameraName))
          return false;
        if (!this.cameraName.equals(that.cameraName))
          return false;
      }

      boolean this_present_nodePlatformDeviceId = true && this.isSetNodePlatformDeviceId();
      boolean that_present_nodePlatformDeviceId = true && that.isSetNodePlatformDeviceId();
      if (this_present_nodePlatformDeviceId || that_present_nodePlatformDeviceId) {
        if (!(this_present_nodePlatformDeviceId && that_present_nodePlatformDeviceId))
          return false;
        if (!this.nodePlatformDeviceId.equals(that.nodePlatformDeviceId))
          return false;
      }

      boolean this_present_nodeCoreDeviceId = true && this.isSetNodeCoreDeviceId();
      boolean that_present_nodeCoreDeviceId = true && that.isSetNodeCoreDeviceId();
      if (this_present_nodeCoreDeviceId || that_present_nodeCoreDeviceId) {
        if (!(this_present_nodeCoreDeviceId && that_present_nodeCoreDeviceId))
          return false;
        if (!this.nodeCoreDeviceId.equals(that.nodeCoreDeviceId))
          return false;
      }

      boolean this_present_channels = true;
      boolean that_present_channels = true;
      if (this_present_channels || that_present_channels) {
        if (!(this_present_channels && that_present_channels))
          return false;
        if (this.channels != that.channels)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addCamera_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addCamera_args typedOther = (addCamera_args)other;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCameraName()).compareTo(typedOther.isSetCameraName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCameraName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cameraName, typedOther.cameraName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodePlatformDeviceId()).compareTo(typedOther.isSetNodePlatformDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodePlatformDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePlatformDeviceId, typedOther.nodePlatformDeviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeCoreDeviceId()).compareTo(typedOther.isSetNodeCoreDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeCoreDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeCoreDeviceId, typedOther.nodeCoreDeviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannels()).compareTo(typedOther.isSetChannels());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannels()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channels, typedOther.channels);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCamera_args(");
      boolean first = true;

      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cameraName:");
      if (this.cameraName == null) {
        sb.append("null");
      } else {
        sb.append(this.cameraName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodePlatformDeviceId:");
      if (this.nodePlatformDeviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodePlatformDeviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeCoreDeviceId:");
      if (this.nodeCoreDeviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeCoreDeviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channels:");
      sb.append(this.channels);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCamera_argsStandardSchemeFactory implements SchemeFactory {
      public addCamera_argsStandardScheme getScheme() {
        return new addCamera_argsStandardScheme();
      }
    }

    private static class addCamera_argsStandardScheme extends StandardScheme<addCamera_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCamera_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CAMERA_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cameraName = iprot.readString();
                struct.setCameraNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE_PLATFORM_DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodePlatformDeviceId = iprot.readString();
                struct.setNodePlatformDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NODE_CORE_DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeCoreDeviceId = iprot.readString();
                struct.setNodeCoreDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CHANNELS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channels = iprot.readI32();
                struct.setChannelsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCamera_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        if (struct.cameraName != null) {
          oprot.writeFieldBegin(CAMERA_NAME_FIELD_DESC);
          oprot.writeString(struct.cameraName);
          oprot.writeFieldEnd();
        }
        if (struct.nodePlatformDeviceId != null) {
          oprot.writeFieldBegin(NODE_PLATFORM_DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.nodePlatformDeviceId);
          oprot.writeFieldEnd();
        }
        if (struct.nodeCoreDeviceId != null) {
          oprot.writeFieldBegin(NODE_CORE_DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeCoreDeviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CHANNELS_FIELD_DESC);
        oprot.writeI32(struct.channels);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCamera_argsTupleSchemeFactory implements SchemeFactory {
      public addCamera_argsTupleScheme getScheme() {
        return new addCamera_argsTupleScheme();
      }
    }

    private static class addCamera_argsTupleScheme extends TupleScheme<addCamera_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCamera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        if (struct.isSetCameraName()) {
          optionals.set(1);
        }
        if (struct.isSetNodePlatformDeviceId()) {
          optionals.set(2);
        }
        if (struct.isSetNodeCoreDeviceId()) {
          optionals.set(3);
        }
        if (struct.isSetChannels()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
        if (struct.isSetCameraName()) {
          oprot.writeString(struct.cameraName);
        }
        if (struct.isSetNodePlatformDeviceId()) {
          oprot.writeString(struct.nodePlatformDeviceId);
        }
        if (struct.isSetNodeCoreDeviceId()) {
          oprot.writeString(struct.nodeCoreDeviceId);
        }
        if (struct.isSetChannels()) {
          oprot.writeI32(struct.channels);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCamera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cameraName = iprot.readString();
          struct.setCameraNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nodePlatformDeviceId = iprot.readString();
          struct.setNodePlatformDeviceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.nodeCoreDeviceId = iprot.readString();
          struct.setNodeCoreDeviceIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.channels = iprot.readI32();
          struct.setChannelsIsSet(true);
        }
      }
    }

  }

  public static class addCamera_result implements org.apache.thrift.TBase<addCamera_result, addCamera_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCamera_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField PLATFORM_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("platformExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addCamera_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addCamera_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public PlatformException platformExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PLATFORM_EXP((short)1, "platformExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PLATFORM_EXP
            return PLATFORM_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PLATFORM_EXP, new org.apache.thrift.meta_data.FieldMetaData("platformExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCamera_result.class, metaDataMap);
    }

    public addCamera_result() {
    }

    public addCamera_result(
      boolean success,
      PlatformException platformExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.platformExp = platformExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCamera_result(addCamera_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetPlatformExp()) {
        this.platformExp = new PlatformException(other.platformExp);
      }
    }

    public addCamera_result deepCopy() {
      return new addCamera_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.platformExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addCamera_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public PlatformException getPlatformExp() {
      return this.platformExp;
    }

    public addCamera_result setPlatformExp(PlatformException platformExp) {
      this.platformExp = platformExp;
      return this;
    }

    public void unsetPlatformExp() {
      this.platformExp = null;
    }

    /** Returns true if field platformExp is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformExp() {
      return this.platformExp != null;
    }

    public void setPlatformExpIsSet(boolean value) {
      if (!value) {
        this.platformExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case PLATFORM_EXP:
        if (value == null) {
          unsetPlatformExp();
        } else {
          setPlatformExp((PlatformException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case PLATFORM_EXP:
        return getPlatformExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PLATFORM_EXP:
        return isSetPlatformExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addCamera_result)
        return this.equals((addCamera_result)that);
      return false;
    }

    public boolean equals(addCamera_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_platformExp = true && this.isSetPlatformExp();
      boolean that_present_platformExp = true && that.isSetPlatformExp();
      if (this_present_platformExp || that_present_platformExp) {
        if (!(this_present_platformExp && that_present_platformExp))
          return false;
        if (!this.platformExp.equals(that.platformExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addCamera_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addCamera_result typedOther = (addCamera_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatformExp()).compareTo(typedOther.isSetPlatformExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformExp, typedOther.platformExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addCamera_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platformExp:");
      if (this.platformExp == null) {
        sb.append("null");
      } else {
        sb.append(this.platformExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCamera_resultStandardSchemeFactory implements SchemeFactory {
      public addCamera_resultStandardScheme getScheme() {
        return new addCamera_resultStandardScheme();
      }
    }

    private static class addCamera_resultStandardScheme extends StandardScheme<addCamera_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCamera_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PLATFORM_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformExp = new PlatformException();
                struct.platformExp.read(iprot);
                struct.setPlatformExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCamera_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.platformExp != null) {
          oprot.writeFieldBegin(PLATFORM_EXP_FIELD_DESC);
          struct.platformExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCamera_resultTupleSchemeFactory implements SchemeFactory {
      public addCamera_resultTupleScheme getScheme() {
        return new addCamera_resultTupleScheme();
      }
    }

    private static class addCamera_resultTupleScheme extends TupleScheme<addCamera_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCamera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetPlatformExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetPlatformExp()) {
          struct.platformExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCamera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.platformExp = new PlatformException();
          struct.platformExp.read(iprot);
          struct.setPlatformExpIsSet(true);
        }
      }
    }

  }

  public static class updateCamera_args implements org.apache.thrift.TBase<updateCamera_args, updateCamera_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCamera_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CAMERA_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cameraName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NODE_PLATFORM_DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePlatformDeviceId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NODE_CORE_DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeCoreDeviceId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField CHANNELS_FIELD_DESC = new org.apache.thrift.protocol.TField("channels", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCamera_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCamera_argsTupleSchemeFactory());
    }

    public String nodeId; // required
    public String cameraName; // required
    public String nodePlatformDeviceId; // required
    public String nodeCoreDeviceId; // required
    public int channels; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      CAMERA_NAME((short)2, "cameraName"),
      NODE_PLATFORM_DEVICE_ID((short)3, "nodePlatformDeviceId"),
      NODE_CORE_DEVICE_ID((short)4, "nodeCoreDeviceId"),
      CHANNELS((short)5, "channels");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // CAMERA_NAME
            return CAMERA_NAME;
          case 3: // NODE_PLATFORM_DEVICE_ID
            return NODE_PLATFORM_DEVICE_ID;
          case 4: // NODE_CORE_DEVICE_ID
            return NODE_CORE_DEVICE_ID;
          case 5: // CHANNELS
            return CHANNELS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHANNELS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CAMERA_NAME, new org.apache.thrift.meta_data.FieldMetaData("cameraName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_PLATFORM_DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodePlatformDeviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_CORE_DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeCoreDeviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNELS, new org.apache.thrift.meta_data.FieldMetaData("channels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCamera_args.class, metaDataMap);
    }

    public updateCamera_args() {
    }

    public updateCamera_args(
      String nodeId,
      String cameraName,
      String nodePlatformDeviceId,
      String nodeCoreDeviceId,
      int channels)
    {
      this();
      this.nodeId = nodeId;
      this.cameraName = cameraName;
      this.nodePlatformDeviceId = nodePlatformDeviceId;
      this.nodeCoreDeviceId = nodeCoreDeviceId;
      this.channels = channels;
      setChannelsIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCamera_args(updateCamera_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      if (other.isSetCameraName()) {
        this.cameraName = other.cameraName;
      }
      if (other.isSetNodePlatformDeviceId()) {
        this.nodePlatformDeviceId = other.nodePlatformDeviceId;
      }
      if (other.isSetNodeCoreDeviceId()) {
        this.nodeCoreDeviceId = other.nodeCoreDeviceId;
      }
      this.channels = other.channels;
    }

    public updateCamera_args deepCopy() {
      return new updateCamera_args(this);
    }

    @Override
    public void clear() {
      this.nodeId = null;
      this.cameraName = null;
      this.nodePlatformDeviceId = null;
      this.nodeCoreDeviceId = null;
      setChannelsIsSet(false);
      this.channels = 0;
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public updateCamera_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public String getCameraName() {
      return this.cameraName;
    }

    public updateCamera_args setCameraName(String cameraName) {
      this.cameraName = cameraName;
      return this;
    }

    public void unsetCameraName() {
      this.cameraName = null;
    }

    /** Returns true if field cameraName is set (has been assigned a value) and false otherwise */
    public boolean isSetCameraName() {
      return this.cameraName != null;
    }

    public void setCameraNameIsSet(boolean value) {
      if (!value) {
        this.cameraName = null;
      }
    }

    public String getNodePlatformDeviceId() {
      return this.nodePlatformDeviceId;
    }

    public updateCamera_args setNodePlatformDeviceId(String nodePlatformDeviceId) {
      this.nodePlatformDeviceId = nodePlatformDeviceId;
      return this;
    }

    public void unsetNodePlatformDeviceId() {
      this.nodePlatformDeviceId = null;
    }

    /** Returns true if field nodePlatformDeviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodePlatformDeviceId() {
      return this.nodePlatformDeviceId != null;
    }

    public void setNodePlatformDeviceIdIsSet(boolean value) {
      if (!value) {
        this.nodePlatformDeviceId = null;
      }
    }

    public String getNodeCoreDeviceId() {
      return this.nodeCoreDeviceId;
    }

    public updateCamera_args setNodeCoreDeviceId(String nodeCoreDeviceId) {
      this.nodeCoreDeviceId = nodeCoreDeviceId;
      return this;
    }

    public void unsetNodeCoreDeviceId() {
      this.nodeCoreDeviceId = null;
    }

    /** Returns true if field nodeCoreDeviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeCoreDeviceId() {
      return this.nodeCoreDeviceId != null;
    }

    public void setNodeCoreDeviceIdIsSet(boolean value) {
      if (!value) {
        this.nodeCoreDeviceId = null;
      }
    }

    public int getChannels() {
      return this.channels;
    }

    public updateCamera_args setChannels(int channels) {
      this.channels = channels;
      setChannelsIsSet(true);
      return this;
    }

    public void unsetChannels() {
      __isset_bit_vector.clear(__CHANNELS_ISSET_ID);
    }

    /** Returns true if field channels is set (has been assigned a value) and false otherwise */
    public boolean isSetChannels() {
      return __isset_bit_vector.get(__CHANNELS_ISSET_ID);
    }

    public void setChannelsIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNELS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case CAMERA_NAME:
        if (value == null) {
          unsetCameraName();
        } else {
          setCameraName((String)value);
        }
        break;

      case NODE_PLATFORM_DEVICE_ID:
        if (value == null) {
          unsetNodePlatformDeviceId();
        } else {
          setNodePlatformDeviceId((String)value);
        }
        break;

      case NODE_CORE_DEVICE_ID:
        if (value == null) {
          unsetNodeCoreDeviceId();
        } else {
          setNodeCoreDeviceId((String)value);
        }
        break;

      case CHANNELS:
        if (value == null) {
          unsetChannels();
        } else {
          setChannels((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case CAMERA_NAME:
        return getCameraName();

      case NODE_PLATFORM_DEVICE_ID:
        return getNodePlatformDeviceId();

      case NODE_CORE_DEVICE_ID:
        return getNodeCoreDeviceId();

      case CHANNELS:
        return Integer.valueOf(getChannels());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case CAMERA_NAME:
        return isSetCameraName();
      case NODE_PLATFORM_DEVICE_ID:
        return isSetNodePlatformDeviceId();
      case NODE_CORE_DEVICE_ID:
        return isSetNodeCoreDeviceId();
      case CHANNELS:
        return isSetChannels();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCamera_args)
        return this.equals((updateCamera_args)that);
      return false;
    }

    public boolean equals(updateCamera_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_cameraName = true && this.isSetCameraName();
      boolean that_present_cameraName = true && that.isSetCameraName();
      if (this_present_cameraName || that_present_cameraName) {
        if (!(this_present_cameraName && that_present_cameraName))
          return false;
        if (!this.cameraName.equals(that.cameraName))
          return false;
      }

      boolean this_present_nodePlatformDeviceId = true && this.isSetNodePlatformDeviceId();
      boolean that_present_nodePlatformDeviceId = true && that.isSetNodePlatformDeviceId();
      if (this_present_nodePlatformDeviceId || that_present_nodePlatformDeviceId) {
        if (!(this_present_nodePlatformDeviceId && that_present_nodePlatformDeviceId))
          return false;
        if (!this.nodePlatformDeviceId.equals(that.nodePlatformDeviceId))
          return false;
      }

      boolean this_present_nodeCoreDeviceId = true && this.isSetNodeCoreDeviceId();
      boolean that_present_nodeCoreDeviceId = true && that.isSetNodeCoreDeviceId();
      if (this_present_nodeCoreDeviceId || that_present_nodeCoreDeviceId) {
        if (!(this_present_nodeCoreDeviceId && that_present_nodeCoreDeviceId))
          return false;
        if (!this.nodeCoreDeviceId.equals(that.nodeCoreDeviceId))
          return false;
      }

      boolean this_present_channels = true;
      boolean that_present_channels = true;
      if (this_present_channels || that_present_channels) {
        if (!(this_present_channels && that_present_channels))
          return false;
        if (this.channels != that.channels)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateCamera_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateCamera_args typedOther = (updateCamera_args)other;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCameraName()).compareTo(typedOther.isSetCameraName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCameraName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cameraName, typedOther.cameraName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodePlatformDeviceId()).compareTo(typedOther.isSetNodePlatformDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodePlatformDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePlatformDeviceId, typedOther.nodePlatformDeviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodeCoreDeviceId()).compareTo(typedOther.isSetNodeCoreDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeCoreDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeCoreDeviceId, typedOther.nodeCoreDeviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannels()).compareTo(typedOther.isSetChannels());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannels()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channels, typedOther.channels);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCamera_args(");
      boolean first = true;

      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cameraName:");
      if (this.cameraName == null) {
        sb.append("null");
      } else {
        sb.append(this.cameraName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodePlatformDeviceId:");
      if (this.nodePlatformDeviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodePlatformDeviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeCoreDeviceId:");
      if (this.nodeCoreDeviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeCoreDeviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channels:");
      sb.append(this.channels);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCamera_argsStandardSchemeFactory implements SchemeFactory {
      public updateCamera_argsStandardScheme getScheme() {
        return new updateCamera_argsStandardScheme();
      }
    }

    private static class updateCamera_argsStandardScheme extends StandardScheme<updateCamera_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCamera_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CAMERA_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cameraName = iprot.readString();
                struct.setCameraNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE_PLATFORM_DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodePlatformDeviceId = iprot.readString();
                struct.setNodePlatformDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NODE_CORE_DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeCoreDeviceId = iprot.readString();
                struct.setNodeCoreDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CHANNELS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channels = iprot.readI32();
                struct.setChannelsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCamera_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        if (struct.cameraName != null) {
          oprot.writeFieldBegin(CAMERA_NAME_FIELD_DESC);
          oprot.writeString(struct.cameraName);
          oprot.writeFieldEnd();
        }
        if (struct.nodePlatformDeviceId != null) {
          oprot.writeFieldBegin(NODE_PLATFORM_DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.nodePlatformDeviceId);
          oprot.writeFieldEnd();
        }
        if (struct.nodeCoreDeviceId != null) {
          oprot.writeFieldBegin(NODE_CORE_DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeCoreDeviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CHANNELS_FIELD_DESC);
        oprot.writeI32(struct.channels);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCamera_argsTupleSchemeFactory implements SchemeFactory {
      public updateCamera_argsTupleScheme getScheme() {
        return new updateCamera_argsTupleScheme();
      }
    }

    private static class updateCamera_argsTupleScheme extends TupleScheme<updateCamera_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCamera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        if (struct.isSetCameraName()) {
          optionals.set(1);
        }
        if (struct.isSetNodePlatformDeviceId()) {
          optionals.set(2);
        }
        if (struct.isSetNodeCoreDeviceId()) {
          optionals.set(3);
        }
        if (struct.isSetChannels()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
        if (struct.isSetCameraName()) {
          oprot.writeString(struct.cameraName);
        }
        if (struct.isSetNodePlatformDeviceId()) {
          oprot.writeString(struct.nodePlatformDeviceId);
        }
        if (struct.isSetNodeCoreDeviceId()) {
          oprot.writeString(struct.nodeCoreDeviceId);
        }
        if (struct.isSetChannels()) {
          oprot.writeI32(struct.channels);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCamera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cameraName = iprot.readString();
          struct.setCameraNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nodePlatformDeviceId = iprot.readString();
          struct.setNodePlatformDeviceIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.nodeCoreDeviceId = iprot.readString();
          struct.setNodeCoreDeviceIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.channels = iprot.readI32();
          struct.setChannelsIsSet(true);
        }
      }
    }

  }

  public static class updateCamera_result implements org.apache.thrift.TBase<updateCamera_result, updateCamera_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCamera_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField PLATFORM_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("platformExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCamera_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCamera_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public PlatformException platformExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PLATFORM_EXP((short)1, "platformExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PLATFORM_EXP
            return PLATFORM_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PLATFORM_EXP, new org.apache.thrift.meta_data.FieldMetaData("platformExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCamera_result.class, metaDataMap);
    }

    public updateCamera_result() {
    }

    public updateCamera_result(
      boolean success,
      PlatformException platformExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.platformExp = platformExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCamera_result(updateCamera_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetPlatformExp()) {
        this.platformExp = new PlatformException(other.platformExp);
      }
    }

    public updateCamera_result deepCopy() {
      return new updateCamera_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.platformExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateCamera_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public PlatformException getPlatformExp() {
      return this.platformExp;
    }

    public updateCamera_result setPlatformExp(PlatformException platformExp) {
      this.platformExp = platformExp;
      return this;
    }

    public void unsetPlatformExp() {
      this.platformExp = null;
    }

    /** Returns true if field platformExp is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformExp() {
      return this.platformExp != null;
    }

    public void setPlatformExpIsSet(boolean value) {
      if (!value) {
        this.platformExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case PLATFORM_EXP:
        if (value == null) {
          unsetPlatformExp();
        } else {
          setPlatformExp((PlatformException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case PLATFORM_EXP:
        return getPlatformExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PLATFORM_EXP:
        return isSetPlatformExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCamera_result)
        return this.equals((updateCamera_result)that);
      return false;
    }

    public boolean equals(updateCamera_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_platformExp = true && this.isSetPlatformExp();
      boolean that_present_platformExp = true && that.isSetPlatformExp();
      if (this_present_platformExp || that_present_platformExp) {
        if (!(this_present_platformExp && that_present_platformExp))
          return false;
        if (!this.platformExp.equals(that.platformExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateCamera_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateCamera_result typedOther = (updateCamera_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatformExp()).compareTo(typedOther.isSetPlatformExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformExp, typedOther.platformExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCamera_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platformExp:");
      if (this.platformExp == null) {
        sb.append("null");
      } else {
        sb.append(this.platformExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCamera_resultStandardSchemeFactory implements SchemeFactory {
      public updateCamera_resultStandardScheme getScheme() {
        return new updateCamera_resultStandardScheme();
      }
    }

    private static class updateCamera_resultStandardScheme extends StandardScheme<updateCamera_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCamera_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PLATFORM_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformExp = new PlatformException();
                struct.platformExp.read(iprot);
                struct.setPlatformExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCamera_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.platformExp != null) {
          oprot.writeFieldBegin(PLATFORM_EXP_FIELD_DESC);
          struct.platformExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCamera_resultTupleSchemeFactory implements SchemeFactory {
      public updateCamera_resultTupleScheme getScheme() {
        return new updateCamera_resultTupleScheme();
      }
    }

    private static class updateCamera_resultTupleScheme extends TupleScheme<updateCamera_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCamera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetPlatformExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetPlatformExp()) {
          struct.platformExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCamera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.platformExp = new PlatformException();
          struct.platformExp.read(iprot);
          struct.setPlatformExpIsSet(true);
        }
      }
    }

  }

  public static class removeCamera_args implements org.apache.thrift.TBase<removeCamera_args, removeCamera_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeCamera_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_PLATFORM_DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePlatformDeviceId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeCamera_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeCamera_argsTupleSchemeFactory());
    }

    public String nodeId; // required
    public String nodePlatformDeviceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      NODE_PLATFORM_DEVICE_ID((short)2, "nodePlatformDeviceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // NODE_PLATFORM_DEVICE_ID
            return NODE_PLATFORM_DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_PLATFORM_DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodePlatformDeviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeCamera_args.class, metaDataMap);
    }

    public removeCamera_args() {
    }

    public removeCamera_args(
      String nodeId,
      String nodePlatformDeviceId)
    {
      this();
      this.nodeId = nodeId;
      this.nodePlatformDeviceId = nodePlatformDeviceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeCamera_args(removeCamera_args other) {
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      if (other.isSetNodePlatformDeviceId()) {
        this.nodePlatformDeviceId = other.nodePlatformDeviceId;
      }
    }

    public removeCamera_args deepCopy() {
      return new removeCamera_args(this);
    }

    @Override
    public void clear() {
      this.nodeId = null;
      this.nodePlatformDeviceId = null;
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public removeCamera_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public String getNodePlatformDeviceId() {
      return this.nodePlatformDeviceId;
    }

    public removeCamera_args setNodePlatformDeviceId(String nodePlatformDeviceId) {
      this.nodePlatformDeviceId = nodePlatformDeviceId;
      return this;
    }

    public void unsetNodePlatformDeviceId() {
      this.nodePlatformDeviceId = null;
    }

    /** Returns true if field nodePlatformDeviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodePlatformDeviceId() {
      return this.nodePlatformDeviceId != null;
    }

    public void setNodePlatformDeviceIdIsSet(boolean value) {
      if (!value) {
        this.nodePlatformDeviceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case NODE_PLATFORM_DEVICE_ID:
        if (value == null) {
          unsetNodePlatformDeviceId();
        } else {
          setNodePlatformDeviceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case NODE_PLATFORM_DEVICE_ID:
        return getNodePlatformDeviceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case NODE_PLATFORM_DEVICE_ID:
        return isSetNodePlatformDeviceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeCamera_args)
        return this.equals((removeCamera_args)that);
      return false;
    }

    public boolean equals(removeCamera_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_nodePlatformDeviceId = true && this.isSetNodePlatformDeviceId();
      boolean that_present_nodePlatformDeviceId = true && that.isSetNodePlatformDeviceId();
      if (this_present_nodePlatformDeviceId || that_present_nodePlatformDeviceId) {
        if (!(this_present_nodePlatformDeviceId && that_present_nodePlatformDeviceId))
          return false;
        if (!this.nodePlatformDeviceId.equals(that.nodePlatformDeviceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeCamera_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeCamera_args typedOther = (removeCamera_args)other;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodePlatformDeviceId()).compareTo(typedOther.isSetNodePlatformDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodePlatformDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePlatformDeviceId, typedOther.nodePlatformDeviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeCamera_args(");
      boolean first = true;

      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodePlatformDeviceId:");
      if (this.nodePlatformDeviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodePlatformDeviceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeCamera_argsStandardSchemeFactory implements SchemeFactory {
      public removeCamera_argsStandardScheme getScheme() {
        return new removeCamera_argsStandardScheme();
      }
    }

    private static class removeCamera_argsStandardScheme extends StandardScheme<removeCamera_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeCamera_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_PLATFORM_DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodePlatformDeviceId = iprot.readString();
                struct.setNodePlatformDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeCamera_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        if (struct.nodePlatformDeviceId != null) {
          oprot.writeFieldBegin(NODE_PLATFORM_DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.nodePlatformDeviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeCamera_argsTupleSchemeFactory implements SchemeFactory {
      public removeCamera_argsTupleScheme getScheme() {
        return new removeCamera_argsTupleScheme();
      }
    }

    private static class removeCamera_argsTupleScheme extends TupleScheme<removeCamera_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeCamera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        if (struct.isSetNodePlatformDeviceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
        if (struct.isSetNodePlatformDeviceId()) {
          oprot.writeString(struct.nodePlatformDeviceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeCamera_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodePlatformDeviceId = iprot.readString();
          struct.setNodePlatformDeviceIdIsSet(true);
        }
      }
    }

  }

  public static class removeCamera_result implements org.apache.thrift.TBase<removeCamera_result, removeCamera_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeCamera_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField PLATFORM_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("platformExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removeCamera_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removeCamera_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public PlatformException platformExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PLATFORM_EXP((short)1, "platformExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PLATFORM_EXP
            return PLATFORM_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PLATFORM_EXP, new org.apache.thrift.meta_data.FieldMetaData("platformExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeCamera_result.class, metaDataMap);
    }

    public removeCamera_result() {
    }

    public removeCamera_result(
      boolean success,
      PlatformException platformExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.platformExp = platformExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeCamera_result(removeCamera_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetPlatformExp()) {
        this.platformExp = new PlatformException(other.platformExp);
      }
    }

    public removeCamera_result deepCopy() {
      return new removeCamera_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.platformExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public removeCamera_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public PlatformException getPlatformExp() {
      return this.platformExp;
    }

    public removeCamera_result setPlatformExp(PlatformException platformExp) {
      this.platformExp = platformExp;
      return this;
    }

    public void unsetPlatformExp() {
      this.platformExp = null;
    }

    /** Returns true if field platformExp is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformExp() {
      return this.platformExp != null;
    }

    public void setPlatformExpIsSet(boolean value) {
      if (!value) {
        this.platformExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case PLATFORM_EXP:
        if (value == null) {
          unsetPlatformExp();
        } else {
          setPlatformExp((PlatformException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case PLATFORM_EXP:
        return getPlatformExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PLATFORM_EXP:
        return isSetPlatformExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeCamera_result)
        return this.equals((removeCamera_result)that);
      return false;
    }

    public boolean equals(removeCamera_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_platformExp = true && this.isSetPlatformExp();
      boolean that_present_platformExp = true && that.isSetPlatformExp();
      if (this_present_platformExp || that_present_platformExp) {
        if (!(this_present_platformExp && that_present_platformExp))
          return false;
        if (!this.platformExp.equals(that.platformExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(removeCamera_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      removeCamera_result typedOther = (removeCamera_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatformExp()).compareTo(typedOther.isSetPlatformExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformExp, typedOther.platformExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removeCamera_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platformExp:");
      if (this.platformExp == null) {
        sb.append("null");
      } else {
        sb.append(this.platformExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeCamera_resultStandardSchemeFactory implements SchemeFactory {
      public removeCamera_resultStandardScheme getScheme() {
        return new removeCamera_resultStandardScheme();
      }
    }

    private static class removeCamera_resultStandardScheme extends StandardScheme<removeCamera_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeCamera_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PLATFORM_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformExp = new PlatformException();
                struct.platformExp.read(iprot);
                struct.setPlatformExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeCamera_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.platformExp != null) {
          oprot.writeFieldBegin(PLATFORM_EXP_FIELD_DESC);
          struct.platformExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeCamera_resultTupleSchemeFactory implements SchemeFactory {
      public removeCamera_resultTupleScheme getScheme() {
        return new removeCamera_resultTupleScheme();
      }
    }

    private static class removeCamera_resultTupleScheme extends TupleScheme<removeCamera_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeCamera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetPlatformExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetPlatformExp()) {
          struct.platformExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeCamera_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.platformExp = new PlatformException();
          struct.platformExp.read(iprot);
          struct.setPlatformExpIsSet(true);
        }
      }
    }

  }

  public static class startVca_args implements org.apache.thrift.TBase<startVca_args, startVca_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startVca_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_PLATFORM_DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePlatformDeviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("channelNo", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField VCA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("vcaType", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startVca_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startVca_argsTupleSchemeFactory());
    }

    public String nodeId; // required
    public String nodePlatformDeviceId; // required
    public int channelNo; // required
    public String vcaType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      NODE_PLATFORM_DEVICE_ID((short)2, "nodePlatformDeviceId"),
      CHANNEL_NO((short)3, "channelNo"),
      VCA_TYPE((short)4, "vcaType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // NODE_PLATFORM_DEVICE_ID
            return NODE_PLATFORM_DEVICE_ID;
          case 3: // CHANNEL_NO
            return CHANNEL_NO;
          case 4: // VCA_TYPE
            return VCA_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHANNELNO_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_PLATFORM_DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodePlatformDeviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_NO, new org.apache.thrift.meta_data.FieldMetaData("channelNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VCA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("vcaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startVca_args.class, metaDataMap);
    }

    public startVca_args() {
    }

    public startVca_args(
      String nodeId,
      String nodePlatformDeviceId,
      int channelNo,
      String vcaType)
    {
      this();
      this.nodeId = nodeId;
      this.nodePlatformDeviceId = nodePlatformDeviceId;
      this.channelNo = channelNo;
      setChannelNoIsSet(true);
      this.vcaType = vcaType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startVca_args(startVca_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      if (other.isSetNodePlatformDeviceId()) {
        this.nodePlatformDeviceId = other.nodePlatformDeviceId;
      }
      this.channelNo = other.channelNo;
      if (other.isSetVcaType()) {
        this.vcaType = other.vcaType;
      }
    }

    public startVca_args deepCopy() {
      return new startVca_args(this);
    }

    @Override
    public void clear() {
      this.nodeId = null;
      this.nodePlatformDeviceId = null;
      setChannelNoIsSet(false);
      this.channelNo = 0;
      this.vcaType = null;
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public startVca_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public String getNodePlatformDeviceId() {
      return this.nodePlatformDeviceId;
    }

    public startVca_args setNodePlatformDeviceId(String nodePlatformDeviceId) {
      this.nodePlatformDeviceId = nodePlatformDeviceId;
      return this;
    }

    public void unsetNodePlatformDeviceId() {
      this.nodePlatformDeviceId = null;
    }

    /** Returns true if field nodePlatformDeviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodePlatformDeviceId() {
      return this.nodePlatformDeviceId != null;
    }

    public void setNodePlatformDeviceIdIsSet(boolean value) {
      if (!value) {
        this.nodePlatformDeviceId = null;
      }
    }

    public int getChannelNo() {
      return this.channelNo;
    }

    public startVca_args setChannelNo(int channelNo) {
      this.channelNo = channelNo;
      setChannelNoIsSet(true);
      return this;
    }

    public void unsetChannelNo() {
      __isset_bit_vector.clear(__CHANNELNO_ISSET_ID);
    }

    /** Returns true if field channelNo is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelNo() {
      return __isset_bit_vector.get(__CHANNELNO_ISSET_ID);
    }

    public void setChannelNoIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNELNO_ISSET_ID, value);
    }

    public String getVcaType() {
      return this.vcaType;
    }

    public startVca_args setVcaType(String vcaType) {
      this.vcaType = vcaType;
      return this;
    }

    public void unsetVcaType() {
      this.vcaType = null;
    }

    /** Returns true if field vcaType is set (has been assigned a value) and false otherwise */
    public boolean isSetVcaType() {
      return this.vcaType != null;
    }

    public void setVcaTypeIsSet(boolean value) {
      if (!value) {
        this.vcaType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case NODE_PLATFORM_DEVICE_ID:
        if (value == null) {
          unsetNodePlatformDeviceId();
        } else {
          setNodePlatformDeviceId((String)value);
        }
        break;

      case CHANNEL_NO:
        if (value == null) {
          unsetChannelNo();
        } else {
          setChannelNo((Integer)value);
        }
        break;

      case VCA_TYPE:
        if (value == null) {
          unsetVcaType();
        } else {
          setVcaType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case NODE_PLATFORM_DEVICE_ID:
        return getNodePlatformDeviceId();

      case CHANNEL_NO:
        return Integer.valueOf(getChannelNo());

      case VCA_TYPE:
        return getVcaType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case NODE_PLATFORM_DEVICE_ID:
        return isSetNodePlatformDeviceId();
      case CHANNEL_NO:
        return isSetChannelNo();
      case VCA_TYPE:
        return isSetVcaType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startVca_args)
        return this.equals((startVca_args)that);
      return false;
    }

    public boolean equals(startVca_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_nodePlatformDeviceId = true && this.isSetNodePlatformDeviceId();
      boolean that_present_nodePlatformDeviceId = true && that.isSetNodePlatformDeviceId();
      if (this_present_nodePlatformDeviceId || that_present_nodePlatformDeviceId) {
        if (!(this_present_nodePlatformDeviceId && that_present_nodePlatformDeviceId))
          return false;
        if (!this.nodePlatformDeviceId.equals(that.nodePlatformDeviceId))
          return false;
      }

      boolean this_present_channelNo = true;
      boolean that_present_channelNo = true;
      if (this_present_channelNo || that_present_channelNo) {
        if (!(this_present_channelNo && that_present_channelNo))
          return false;
        if (this.channelNo != that.channelNo)
          return false;
      }

      boolean this_present_vcaType = true && this.isSetVcaType();
      boolean that_present_vcaType = true && that.isSetVcaType();
      if (this_present_vcaType || that_present_vcaType) {
        if (!(this_present_vcaType && that_present_vcaType))
          return false;
        if (!this.vcaType.equals(that.vcaType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startVca_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startVca_args typedOther = (startVca_args)other;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodePlatformDeviceId()).compareTo(typedOther.isSetNodePlatformDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodePlatformDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePlatformDeviceId, typedOther.nodePlatformDeviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelNo()).compareTo(typedOther.isSetChannelNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelNo, typedOther.channelNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVcaType()).compareTo(typedOther.isSetVcaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVcaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vcaType, typedOther.vcaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startVca_args(");
      boolean first = true;

      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodePlatformDeviceId:");
      if (this.nodePlatformDeviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodePlatformDeviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelNo:");
      sb.append(this.channelNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vcaType:");
      if (this.vcaType == null) {
        sb.append("null");
      } else {
        sb.append(this.vcaType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startVca_argsStandardSchemeFactory implements SchemeFactory {
      public startVca_argsStandardScheme getScheme() {
        return new startVca_argsStandardScheme();
      }
    }

    private static class startVca_argsStandardScheme extends StandardScheme<startVca_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startVca_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_PLATFORM_DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodePlatformDeviceId = iprot.readString();
                struct.setNodePlatformDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelNo = iprot.readI32();
                struct.setChannelNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VCA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vcaType = iprot.readString();
                struct.setVcaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startVca_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        if (struct.nodePlatformDeviceId != null) {
          oprot.writeFieldBegin(NODE_PLATFORM_DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.nodePlatformDeviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CHANNEL_NO_FIELD_DESC);
        oprot.writeI32(struct.channelNo);
        oprot.writeFieldEnd();
        if (struct.vcaType != null) {
          oprot.writeFieldBegin(VCA_TYPE_FIELD_DESC);
          oprot.writeString(struct.vcaType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startVca_argsTupleSchemeFactory implements SchemeFactory {
      public startVca_argsTupleScheme getScheme() {
        return new startVca_argsTupleScheme();
      }
    }

    private static class startVca_argsTupleScheme extends TupleScheme<startVca_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startVca_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        if (struct.isSetNodePlatformDeviceId()) {
          optionals.set(1);
        }
        if (struct.isSetChannelNo()) {
          optionals.set(2);
        }
        if (struct.isSetVcaType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
        if (struct.isSetNodePlatformDeviceId()) {
          oprot.writeString(struct.nodePlatformDeviceId);
        }
        if (struct.isSetChannelNo()) {
          oprot.writeI32(struct.channelNo);
        }
        if (struct.isSetVcaType()) {
          oprot.writeString(struct.vcaType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startVca_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodePlatformDeviceId = iprot.readString();
          struct.setNodePlatformDeviceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelNo = iprot.readI32();
          struct.setChannelNoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.vcaType = iprot.readString();
          struct.setVcaTypeIsSet(true);
        }
      }
    }

  }

  public static class startVca_result implements org.apache.thrift.TBase<startVca_result, startVca_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startVca_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField PLATFORM_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("platformExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startVca_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startVca_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public PlatformException platformExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PLATFORM_EXP((short)1, "platformExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PLATFORM_EXP
            return PLATFORM_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PLATFORM_EXP, new org.apache.thrift.meta_data.FieldMetaData("platformExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startVca_result.class, metaDataMap);
    }

    public startVca_result() {
    }

    public startVca_result(
      boolean success,
      PlatformException platformExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.platformExp = platformExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startVca_result(startVca_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetPlatformExp()) {
        this.platformExp = new PlatformException(other.platformExp);
      }
    }

    public startVca_result deepCopy() {
      return new startVca_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.platformExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public startVca_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public PlatformException getPlatformExp() {
      return this.platformExp;
    }

    public startVca_result setPlatformExp(PlatformException platformExp) {
      this.platformExp = platformExp;
      return this;
    }

    public void unsetPlatformExp() {
      this.platformExp = null;
    }

    /** Returns true if field platformExp is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformExp() {
      return this.platformExp != null;
    }

    public void setPlatformExpIsSet(boolean value) {
      if (!value) {
        this.platformExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case PLATFORM_EXP:
        if (value == null) {
          unsetPlatformExp();
        } else {
          setPlatformExp((PlatformException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case PLATFORM_EXP:
        return getPlatformExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PLATFORM_EXP:
        return isSetPlatformExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startVca_result)
        return this.equals((startVca_result)that);
      return false;
    }

    public boolean equals(startVca_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_platformExp = true && this.isSetPlatformExp();
      boolean that_present_platformExp = true && that.isSetPlatformExp();
      if (this_present_platformExp || that_present_platformExp) {
        if (!(this_present_platformExp && that_present_platformExp))
          return false;
        if (!this.platformExp.equals(that.platformExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startVca_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startVca_result typedOther = (startVca_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatformExp()).compareTo(typedOther.isSetPlatformExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformExp, typedOther.platformExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startVca_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platformExp:");
      if (this.platformExp == null) {
        sb.append("null");
      } else {
        sb.append(this.platformExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startVca_resultStandardSchemeFactory implements SchemeFactory {
      public startVca_resultStandardScheme getScheme() {
        return new startVca_resultStandardScheme();
      }
    }

    private static class startVca_resultStandardScheme extends StandardScheme<startVca_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startVca_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PLATFORM_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformExp = new PlatformException();
                struct.platformExp.read(iprot);
                struct.setPlatformExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startVca_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.platformExp != null) {
          oprot.writeFieldBegin(PLATFORM_EXP_FIELD_DESC);
          struct.platformExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startVca_resultTupleSchemeFactory implements SchemeFactory {
      public startVca_resultTupleScheme getScheme() {
        return new startVca_resultTupleScheme();
      }
    }

    private static class startVca_resultTupleScheme extends TupleScheme<startVca_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startVca_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetPlatformExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetPlatformExp()) {
          struct.platformExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startVca_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.platformExp = new PlatformException();
          struct.platformExp.read(iprot);
          struct.setPlatformExpIsSet(true);
        }
      }
    }

  }

  public static class stopVca_args implements org.apache.thrift.TBase<stopVca_args, stopVca_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopVca_args");

    private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_PLATFORM_DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodePlatformDeviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("channelNo", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField VCA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("vcaType", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopVca_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopVca_argsTupleSchemeFactory());
    }

    public String nodeId; // required
    public String nodePlatformDeviceId; // required
    public int channelNo; // required
    public String vcaType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NODE_ID((short)1, "nodeId"),
      NODE_PLATFORM_DEVICE_ID((short)2, "nodePlatformDeviceId"),
      CHANNEL_NO((short)3, "channelNo"),
      VCA_TYPE((short)4, "vcaType");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NODE_ID
            return NODE_ID;
          case 2: // NODE_PLATFORM_DEVICE_ID
            return NODE_PLATFORM_DEVICE_ID;
          case 3: // CHANNEL_NO
            return CHANNEL_NO;
          case 4: // VCA_TYPE
            return VCA_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHANNELNO_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NODE_PLATFORM_DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodePlatformDeviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_NO, new org.apache.thrift.meta_data.FieldMetaData("channelNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VCA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("vcaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopVca_args.class, metaDataMap);
    }

    public stopVca_args() {
    }

    public stopVca_args(
      String nodeId,
      String nodePlatformDeviceId,
      int channelNo,
      String vcaType)
    {
      this();
      this.nodeId = nodeId;
      this.nodePlatformDeviceId = nodePlatformDeviceId;
      this.channelNo = channelNo;
      setChannelNoIsSet(true);
      this.vcaType = vcaType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopVca_args(stopVca_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetNodeId()) {
        this.nodeId = other.nodeId;
      }
      if (other.isSetNodePlatformDeviceId()) {
        this.nodePlatformDeviceId = other.nodePlatformDeviceId;
      }
      this.channelNo = other.channelNo;
      if (other.isSetVcaType()) {
        this.vcaType = other.vcaType;
      }
    }

    public stopVca_args deepCopy() {
      return new stopVca_args(this);
    }

    @Override
    public void clear() {
      this.nodeId = null;
      this.nodePlatformDeviceId = null;
      setChannelNoIsSet(false);
      this.channelNo = 0;
      this.vcaType = null;
    }

    public String getNodeId() {
      return this.nodeId;
    }

    public stopVca_args setNodeId(String nodeId) {
      this.nodeId = nodeId;
      return this;
    }

    public void unsetNodeId() {
      this.nodeId = null;
    }

    /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeId() {
      return this.nodeId != null;
    }

    public void setNodeIdIsSet(boolean value) {
      if (!value) {
        this.nodeId = null;
      }
    }

    public String getNodePlatformDeviceId() {
      return this.nodePlatformDeviceId;
    }

    public stopVca_args setNodePlatformDeviceId(String nodePlatformDeviceId) {
      this.nodePlatformDeviceId = nodePlatformDeviceId;
      return this;
    }

    public void unsetNodePlatformDeviceId() {
      this.nodePlatformDeviceId = null;
    }

    /** Returns true if field nodePlatformDeviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetNodePlatformDeviceId() {
      return this.nodePlatformDeviceId != null;
    }

    public void setNodePlatformDeviceIdIsSet(boolean value) {
      if (!value) {
        this.nodePlatformDeviceId = null;
      }
    }

    public int getChannelNo() {
      return this.channelNo;
    }

    public stopVca_args setChannelNo(int channelNo) {
      this.channelNo = channelNo;
      setChannelNoIsSet(true);
      return this;
    }

    public void unsetChannelNo() {
      __isset_bit_vector.clear(__CHANNELNO_ISSET_ID);
    }

    /** Returns true if field channelNo is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelNo() {
      return __isset_bit_vector.get(__CHANNELNO_ISSET_ID);
    }

    public void setChannelNoIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNELNO_ISSET_ID, value);
    }

    public String getVcaType() {
      return this.vcaType;
    }

    public stopVca_args setVcaType(String vcaType) {
      this.vcaType = vcaType;
      return this;
    }

    public void unsetVcaType() {
      this.vcaType = null;
    }

    /** Returns true if field vcaType is set (has been assigned a value) and false otherwise */
    public boolean isSetVcaType() {
      return this.vcaType != null;
    }

    public void setVcaTypeIsSet(boolean value) {
      if (!value) {
        this.vcaType = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NODE_ID:
        if (value == null) {
          unsetNodeId();
        } else {
          setNodeId((String)value);
        }
        break;

      case NODE_PLATFORM_DEVICE_ID:
        if (value == null) {
          unsetNodePlatformDeviceId();
        } else {
          setNodePlatformDeviceId((String)value);
        }
        break;

      case CHANNEL_NO:
        if (value == null) {
          unsetChannelNo();
        } else {
          setChannelNo((Integer)value);
        }
        break;

      case VCA_TYPE:
        if (value == null) {
          unsetVcaType();
        } else {
          setVcaType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NODE_ID:
        return getNodeId();

      case NODE_PLATFORM_DEVICE_ID:
        return getNodePlatformDeviceId();

      case CHANNEL_NO:
        return Integer.valueOf(getChannelNo());

      case VCA_TYPE:
        return getVcaType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NODE_ID:
        return isSetNodeId();
      case NODE_PLATFORM_DEVICE_ID:
        return isSetNodePlatformDeviceId();
      case CHANNEL_NO:
        return isSetChannelNo();
      case VCA_TYPE:
        return isSetVcaType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopVca_args)
        return this.equals((stopVca_args)that);
      return false;
    }

    public boolean equals(stopVca_args that) {
      if (that == null)
        return false;

      boolean this_present_nodeId = true && this.isSetNodeId();
      boolean that_present_nodeId = true && that.isSetNodeId();
      if (this_present_nodeId || that_present_nodeId) {
        if (!(this_present_nodeId && that_present_nodeId))
          return false;
        if (!this.nodeId.equals(that.nodeId))
          return false;
      }

      boolean this_present_nodePlatformDeviceId = true && this.isSetNodePlatformDeviceId();
      boolean that_present_nodePlatformDeviceId = true && that.isSetNodePlatformDeviceId();
      if (this_present_nodePlatformDeviceId || that_present_nodePlatformDeviceId) {
        if (!(this_present_nodePlatformDeviceId && that_present_nodePlatformDeviceId))
          return false;
        if (!this.nodePlatformDeviceId.equals(that.nodePlatformDeviceId))
          return false;
      }

      boolean this_present_channelNo = true;
      boolean that_present_channelNo = true;
      if (this_present_channelNo || that_present_channelNo) {
        if (!(this_present_channelNo && that_present_channelNo))
          return false;
        if (this.channelNo != that.channelNo)
          return false;
      }

      boolean this_present_vcaType = true && this.isSetVcaType();
      boolean that_present_vcaType = true && that.isSetVcaType();
      if (this_present_vcaType || that_present_vcaType) {
        if (!(this_present_vcaType && that_present_vcaType))
          return false;
        if (!this.vcaType.equals(that.vcaType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopVca_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopVca_args typedOther = (stopVca_args)other;

      lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNodePlatformDeviceId()).compareTo(typedOther.isSetNodePlatformDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodePlatformDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodePlatformDeviceId, typedOther.nodePlatformDeviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelNo()).compareTo(typedOther.isSetChannelNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelNo, typedOther.channelNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVcaType()).compareTo(typedOther.isSetVcaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVcaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vcaType, typedOther.vcaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopVca_args(");
      boolean first = true;

      sb.append("nodeId:");
      if (this.nodeId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodePlatformDeviceId:");
      if (this.nodePlatformDeviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.nodePlatformDeviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelNo:");
      sb.append(this.channelNo);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vcaType:");
      if (this.vcaType == null) {
        sb.append("null");
      } else {
        sb.append(this.vcaType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopVca_argsStandardSchemeFactory implements SchemeFactory {
      public stopVca_argsStandardScheme getScheme() {
        return new stopVca_argsStandardScheme();
      }
    }

    private static class stopVca_argsStandardScheme extends StandardScheme<stopVca_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopVca_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NODE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodeId = iprot.readString();
                struct.setNodeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_PLATFORM_DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nodePlatformDeviceId = iprot.readString();
                struct.setNodePlatformDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channelNo = iprot.readI32();
                struct.setChannelNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VCA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vcaType = iprot.readString();
                struct.setVcaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopVca_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nodeId != null) {
          oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
          oprot.writeString(struct.nodeId);
          oprot.writeFieldEnd();
        }
        if (struct.nodePlatformDeviceId != null) {
          oprot.writeFieldBegin(NODE_PLATFORM_DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.nodePlatformDeviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CHANNEL_NO_FIELD_DESC);
        oprot.writeI32(struct.channelNo);
        oprot.writeFieldEnd();
        if (struct.vcaType != null) {
          oprot.writeFieldBegin(VCA_TYPE_FIELD_DESC);
          oprot.writeString(struct.vcaType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopVca_argsTupleSchemeFactory implements SchemeFactory {
      public stopVca_argsTupleScheme getScheme() {
        return new stopVca_argsTupleScheme();
      }
    }

    private static class stopVca_argsTupleScheme extends TupleScheme<stopVca_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopVca_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNodeId()) {
          optionals.set(0);
        }
        if (struct.isSetNodePlatformDeviceId()) {
          optionals.set(1);
        }
        if (struct.isSetChannelNo()) {
          optionals.set(2);
        }
        if (struct.isSetVcaType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetNodeId()) {
          oprot.writeString(struct.nodeId);
        }
        if (struct.isSetNodePlatformDeviceId()) {
          oprot.writeString(struct.nodePlatformDeviceId);
        }
        if (struct.isSetChannelNo()) {
          oprot.writeI32(struct.channelNo);
        }
        if (struct.isSetVcaType()) {
          oprot.writeString(struct.vcaType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopVca_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.nodeId = iprot.readString();
          struct.setNodeIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodePlatformDeviceId = iprot.readString();
          struct.setNodePlatformDeviceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelNo = iprot.readI32();
          struct.setChannelNoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.vcaType = iprot.readString();
          struct.setVcaTypeIsSet(true);
        }
      }
    }

  }

  public static class stopVca_result implements org.apache.thrift.TBase<stopVca_result, stopVca_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopVca_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField PLATFORM_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("platformExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopVca_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopVca_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public PlatformException platformExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      PLATFORM_EXP((short)1, "platformExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // PLATFORM_EXP
            return PLATFORM_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PLATFORM_EXP, new org.apache.thrift.meta_data.FieldMetaData("platformExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopVca_result.class, metaDataMap);
    }

    public stopVca_result() {
    }

    public stopVca_result(
      boolean success,
      PlatformException platformExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.platformExp = platformExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopVca_result(stopVca_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetPlatformExp()) {
        this.platformExp = new PlatformException(other.platformExp);
      }
    }

    public stopVca_result deepCopy() {
      return new stopVca_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.platformExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public stopVca_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public PlatformException getPlatformExp() {
      return this.platformExp;
    }

    public stopVca_result setPlatformExp(PlatformException platformExp) {
      this.platformExp = platformExp;
      return this;
    }

    public void unsetPlatformExp() {
      this.platformExp = null;
    }

    /** Returns true if field platformExp is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformExp() {
      return this.platformExp != null;
    }

    public void setPlatformExpIsSet(boolean value) {
      if (!value) {
        this.platformExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case PLATFORM_EXP:
        if (value == null) {
          unsetPlatformExp();
        } else {
          setPlatformExp((PlatformException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case PLATFORM_EXP:
        return getPlatformExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case PLATFORM_EXP:
        return isSetPlatformExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopVca_result)
        return this.equals((stopVca_result)that);
      return false;
    }

    public boolean equals(stopVca_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_platformExp = true && this.isSetPlatformExp();
      boolean that_present_platformExp = true && that.isSetPlatformExp();
      if (this_present_platformExp || that_present_platformExp) {
        if (!(this_present_platformExp && that_present_platformExp))
          return false;
        if (!this.platformExp.equals(that.platformExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopVca_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopVca_result typedOther = (stopVca_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatformExp()).compareTo(typedOther.isSetPlatformExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformExp, typedOther.platformExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopVca_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platformExp:");
      if (this.platformExp == null) {
        sb.append("null");
      } else {
        sb.append(this.platformExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopVca_resultStandardSchemeFactory implements SchemeFactory {
      public stopVca_resultStandardScheme getScheme() {
        return new stopVca_resultStandardScheme();
      }
    }

    private static class stopVca_resultStandardScheme extends StandardScheme<stopVca_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopVca_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // PLATFORM_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformExp = new PlatformException();
                struct.platformExp.read(iprot);
                struct.setPlatformExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopVca_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.platformExp != null) {
          oprot.writeFieldBegin(PLATFORM_EXP_FIELD_DESC);
          struct.platformExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopVca_resultTupleSchemeFactory implements SchemeFactory {
      public stopVca_resultTupleScheme getScheme() {
        return new stopVca_resultTupleScheme();
      }
    }

    private static class stopVca_resultTupleScheme extends TupleScheme<stopVca_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopVca_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetPlatformExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetPlatformExp()) {
          struct.platformExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopVca_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.platformExp = new PlatformException();
          struct.platformExp.read(iprot);
          struct.setPlatformExpIsSet(true);
        }
      }
    }

  }

}
