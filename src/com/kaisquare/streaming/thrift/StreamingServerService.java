/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.streaming.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StreamingServerService {

  /**
   * Streaming Server interface.
   */
  public interface Iface {

    /**
     * Get the id of this streaming server.
     */
    public long getServerID() throws org.apache.thrift.TException;

    /**
     * Set device snapshot for streaming.
     * (1) deviceId - Device ID.
     * (2) channel - Device channel.
     * (3) snapshot - Snapshot buffer.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param deviceId
     * @param channel
     * @param snapshot
     */
    public boolean setDeviceSnapshot(long deviceId, int channel, ByteBuffer snapshot) throws org.apache.thrift.TException;

    /**
     * Start a stream session.
     * (1) sessionId - Unique string of a session request.
     * (2) deviceId - Device ID.
     * (3) channel - The requested channel index.
     * (4) protocolType - The protocol type, can be "http"/"rtsp"/"rtmp".
     * (5) mediaType - Recording media type, can be "video"/"audio"/"image".
     * (6) streamProfile - Detailed device stream related parameters.
     * RETURN value is a list of the dynamically generated URLs.
     * 
     * @param sessionId
     * @param deviceId
     * @param channel
     * @param protocolType
     * @param mediaType
     * @param streamProfile
     */
    public List<String> startLiveviewStreamSession(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String streamProfile) throws org.apache.thrift.TException;

    /**
     * Stop a liveview stream session.
     * (1) sessionId - Unique string of a session request.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param sessionId
     */
    public boolean stopLiveviewStreamSession(String sessionId) throws org.apache.thrift.TException;

    /**
     * Stop a stream session.
     * (1) sessionId - Unique string of a session request.
     * (2) deviceId - Device ID.
     * (3) channel - Device Channel.
     * (4) protocolType - The protocol type, can be "http"/"rtsp"/"rtmp".
     * (5) mediaType - Recording media type, can be "video"/"audio"/"image".
     * (6) action - Action, can be "play"/"download".
     * (7) mediaFiles - Detailed file list.
     * RETURN value is a list of the dynamically generated URLs.
     * 
     * @param sessionId
     * @param deviceId
     * @param channel
     * @param protocolType
     * @param mediaType
     * @param action
     * @param mediaFiles
     */
    public List<String> startPlaybackStreamSession(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String action, List<com.kaisquare.core.thrift.StreamFileDetails> mediaFiles) throws org.apache.thrift.TException;

    /**
     * Stop a playback stream session.
     * (1) sessionId - Unique string of a session request.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param sessionId
     */
    public boolean stopPlaybackStreamSession(String sessionId) throws org.apache.thrift.TException;

    /**
     * Set access control for a session, only accept connections for streaming from specified ip list.
     * If this interface not called, the session is avaiable for all.
     * (1) sessionId - Handle for this session for future reference.
     * (2) ttl - UTC time stamp when this session becomes invalid, unit: second.
     * (3) allowedClientIpAddresses - list of IP address can connect for streaming of this session.
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param sessionId
     * @param ttl
     * @param allowedClientIpAddresses
     */
    public boolean setSessionAccessControl(String sessionId, long ttl, List<String> allowedClientIpAddresses) throws org.apache.thrift.TException;

    /**
     * Return media session clients.
     * (1) sessionId - Unique string of a session request.
     * RETURN json formated stream client details list, or empty list if not found, example of the json string:
     *                  {"ip":"223.4.134.189","port":52168}
     * 
     * @param sessionId
     */
    public List<String> getStreamClients(String sessionId) throws org.apache.thrift.TException;

    /**
     * Get streaming server report for diagnosis.
     * (1) deviceId - Device ID.
     * If deviceId is 0, return the general report,
     * else return the device specified report.
     * RETURN json formatted streaming server report.
     * 
     * @param deviceId
     */
    public String getStreamingServerReport(long deviceId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getServerID(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getServerID_call> resultHandler) throws org.apache.thrift.TException;

    public void setDeviceSnapshot(long deviceId, int channel, ByteBuffer snapshot, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setDeviceSnapshot_call> resultHandler) throws org.apache.thrift.TException;

    public void startLiveviewStreamSession(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String streamProfile, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startLiveviewStreamSession_call> resultHandler) throws org.apache.thrift.TException;

    public void stopLiveviewStreamSession(String sessionId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopLiveviewStreamSession_call> resultHandler) throws org.apache.thrift.TException;

    public void startPlaybackStreamSession(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String action, List<com.kaisquare.core.thrift.StreamFileDetails> mediaFiles, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startPlaybackStreamSession_call> resultHandler) throws org.apache.thrift.TException;

    public void stopPlaybackStreamSession(String sessionId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopPlaybackStreamSession_call> resultHandler) throws org.apache.thrift.TException;

    public void setSessionAccessControl(String sessionId, long ttl, List<String> allowedClientIpAddresses, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setSessionAccessControl_call> resultHandler) throws org.apache.thrift.TException;

    public void getStreamClients(String sessionId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStreamClients_call> resultHandler) throws org.apache.thrift.TException;

    public void getStreamingServerReport(long deviceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStreamingServerReport_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long getServerID() throws org.apache.thrift.TException
    {
      send_getServerID();
      return recv_getServerID();
    }

    public void send_getServerID() throws org.apache.thrift.TException
    {
      getServerID_args args = new getServerID_args();
      sendBase("getServerID", args);
    }

    public long recv_getServerID() throws org.apache.thrift.TException
    {
      getServerID_result result = new getServerID_result();
      receiveBase(result, "getServerID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getServerID failed: unknown result");
    }

    public boolean setDeviceSnapshot(long deviceId, int channel, ByteBuffer snapshot) throws org.apache.thrift.TException
    {
      send_setDeviceSnapshot(deviceId, channel, snapshot);
      return recv_setDeviceSnapshot();
    }

    public void send_setDeviceSnapshot(long deviceId, int channel, ByteBuffer snapshot) throws org.apache.thrift.TException
    {
      setDeviceSnapshot_args args = new setDeviceSnapshot_args();
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setSnapshot(snapshot);
      sendBase("setDeviceSnapshot", args);
    }

    public boolean recv_setDeviceSnapshot() throws org.apache.thrift.TException
    {
      setDeviceSnapshot_result result = new setDeviceSnapshot_result();
      receiveBase(result, "setDeviceSnapshot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setDeviceSnapshot failed: unknown result");
    }

    public List<String> startLiveviewStreamSession(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String streamProfile) throws org.apache.thrift.TException
    {
      send_startLiveviewStreamSession(sessionId, deviceId, channel, protocolType, mediaType, streamProfile);
      return recv_startLiveviewStreamSession();
    }

    public void send_startLiveviewStreamSession(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String streamProfile) throws org.apache.thrift.TException
    {
      startLiveviewStreamSession_args args = new startLiveviewStreamSession_args();
      args.setSessionId(sessionId);
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setProtocolType(protocolType);
      args.setMediaType(mediaType);
      args.setStreamProfile(streamProfile);
      sendBase("startLiveviewStreamSession", args);
    }

    public List<String> recv_startLiveviewStreamSession() throws org.apache.thrift.TException
    {
      startLiveviewStreamSession_result result = new startLiveviewStreamSession_result();
      receiveBase(result, "startLiveviewStreamSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startLiveviewStreamSession failed: unknown result");
    }

    public boolean stopLiveviewStreamSession(String sessionId) throws org.apache.thrift.TException
    {
      send_stopLiveviewStreamSession(sessionId);
      return recv_stopLiveviewStreamSession();
    }

    public void send_stopLiveviewStreamSession(String sessionId) throws org.apache.thrift.TException
    {
      stopLiveviewStreamSession_args args = new stopLiveviewStreamSession_args();
      args.setSessionId(sessionId);
      sendBase("stopLiveviewStreamSession", args);
    }

    public boolean recv_stopLiveviewStreamSession() throws org.apache.thrift.TException
    {
      stopLiveviewStreamSession_result result = new stopLiveviewStreamSession_result();
      receiveBase(result, "stopLiveviewStreamSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopLiveviewStreamSession failed: unknown result");
    }

    public List<String> startPlaybackStreamSession(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String action, List<com.kaisquare.core.thrift.StreamFileDetails> mediaFiles) throws org.apache.thrift.TException
    {
      send_startPlaybackStreamSession(sessionId, deviceId, channel, protocolType, mediaType, action, mediaFiles);
      return recv_startPlaybackStreamSession();
    }

    public void send_startPlaybackStreamSession(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String action, List<com.kaisquare.core.thrift.StreamFileDetails> mediaFiles) throws org.apache.thrift.TException
    {
      startPlaybackStreamSession_args args = new startPlaybackStreamSession_args();
      args.setSessionId(sessionId);
      args.setDeviceId(deviceId);
      args.setChannel(channel);
      args.setProtocolType(protocolType);
      args.setMediaType(mediaType);
      args.setAction(action);
      args.setMediaFiles(mediaFiles);
      sendBase("startPlaybackStreamSession", args);
    }

    public List<String> recv_startPlaybackStreamSession() throws org.apache.thrift.TException
    {
      startPlaybackStreamSession_result result = new startPlaybackStreamSession_result();
      receiveBase(result, "startPlaybackStreamSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startPlaybackStreamSession failed: unknown result");
    }

    public boolean stopPlaybackStreamSession(String sessionId) throws org.apache.thrift.TException
    {
      send_stopPlaybackStreamSession(sessionId);
      return recv_stopPlaybackStreamSession();
    }

    public void send_stopPlaybackStreamSession(String sessionId) throws org.apache.thrift.TException
    {
      stopPlaybackStreamSession_args args = new stopPlaybackStreamSession_args();
      args.setSessionId(sessionId);
      sendBase("stopPlaybackStreamSession", args);
    }

    public boolean recv_stopPlaybackStreamSession() throws org.apache.thrift.TException
    {
      stopPlaybackStreamSession_result result = new stopPlaybackStreamSession_result();
      receiveBase(result, "stopPlaybackStreamSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopPlaybackStreamSession failed: unknown result");
    }

    public boolean setSessionAccessControl(String sessionId, long ttl, List<String> allowedClientIpAddresses) throws org.apache.thrift.TException
    {
      send_setSessionAccessControl(sessionId, ttl, allowedClientIpAddresses);
      return recv_setSessionAccessControl();
    }

    public void send_setSessionAccessControl(String sessionId, long ttl, List<String> allowedClientIpAddresses) throws org.apache.thrift.TException
    {
      setSessionAccessControl_args args = new setSessionAccessControl_args();
      args.setSessionId(sessionId);
      args.setTtl(ttl);
      args.setAllowedClientIpAddresses(allowedClientIpAddresses);
      sendBase("setSessionAccessControl", args);
    }

    public boolean recv_setSessionAccessControl() throws org.apache.thrift.TException
    {
      setSessionAccessControl_result result = new setSessionAccessControl_result();
      receiveBase(result, "setSessionAccessControl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setSessionAccessControl failed: unknown result");
    }

    public List<String> getStreamClients(String sessionId) throws org.apache.thrift.TException
    {
      send_getStreamClients(sessionId);
      return recv_getStreamClients();
    }

    public void send_getStreamClients(String sessionId) throws org.apache.thrift.TException
    {
      getStreamClients_args args = new getStreamClients_args();
      args.setSessionId(sessionId);
      sendBase("getStreamClients", args);
    }

    public List<String> recv_getStreamClients() throws org.apache.thrift.TException
    {
      getStreamClients_result result = new getStreamClients_result();
      receiveBase(result, "getStreamClients");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStreamClients failed: unknown result");
    }

    public String getStreamingServerReport(long deviceId) throws org.apache.thrift.TException
    {
      send_getStreamingServerReport(deviceId);
      return recv_getStreamingServerReport();
    }

    public void send_getStreamingServerReport(long deviceId) throws org.apache.thrift.TException
    {
      getStreamingServerReport_args args = new getStreamingServerReport_args();
      args.setDeviceId(deviceId);
      sendBase("getStreamingServerReport", args);
    }

    public String recv_getStreamingServerReport() throws org.apache.thrift.TException
    {
      getStreamingServerReport_result result = new getStreamingServerReport_result();
      receiveBase(result, "getStreamingServerReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStreamingServerReport failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getServerID(org.apache.thrift.async.AsyncMethodCallback<getServerID_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getServerID_call method_call = new getServerID_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getServerID_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getServerID_call(org.apache.thrift.async.AsyncMethodCallback<getServerID_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getServerID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getServerID_args args = new getServerID_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getServerID();
      }
    }

    public void setDeviceSnapshot(long deviceId, int channel, ByteBuffer snapshot, org.apache.thrift.async.AsyncMethodCallback<setDeviceSnapshot_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDeviceSnapshot_call method_call = new setDeviceSnapshot_call(deviceId, channel, snapshot, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDeviceSnapshot_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      private int channel;
      private ByteBuffer snapshot;
      public setDeviceSnapshot_call(long deviceId, int channel, ByteBuffer snapshot, org.apache.thrift.async.AsyncMethodCallback<setDeviceSnapshot_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channel = channel;
        this.snapshot = snapshot;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDeviceSnapshot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDeviceSnapshot_args args = new setDeviceSnapshot_args();
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setSnapshot(snapshot);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setDeviceSnapshot();
      }
    }

    public void startLiveviewStreamSession(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String streamProfile, org.apache.thrift.async.AsyncMethodCallback<startLiveviewStreamSession_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startLiveviewStreamSession_call method_call = new startLiveviewStreamSession_call(sessionId, deviceId, channel, protocolType, mediaType, streamProfile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startLiveviewStreamSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private long deviceId;
      private int channel;
      private String protocolType;
      private String mediaType;
      private String streamProfile;
      public startLiveviewStreamSession_call(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String streamProfile, org.apache.thrift.async.AsyncMethodCallback<startLiveviewStreamSession_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.deviceId = deviceId;
        this.channel = channel;
        this.protocolType = protocolType;
        this.mediaType = mediaType;
        this.streamProfile = streamProfile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startLiveviewStreamSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startLiveviewStreamSession_args args = new startLiveviewStreamSession_args();
        args.setSessionId(sessionId);
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setProtocolType(protocolType);
        args.setMediaType(mediaType);
        args.setStreamProfile(streamProfile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startLiveviewStreamSession();
      }
    }

    public void stopLiveviewStreamSession(String sessionId, org.apache.thrift.async.AsyncMethodCallback<stopLiveviewStreamSession_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopLiveviewStreamSession_call method_call = new stopLiveviewStreamSession_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopLiveviewStreamSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      public stopLiveviewStreamSession_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback<stopLiveviewStreamSession_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopLiveviewStreamSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopLiveviewStreamSession_args args = new stopLiveviewStreamSession_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopLiveviewStreamSession();
      }
    }

    public void startPlaybackStreamSession(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String action, List<com.kaisquare.core.thrift.StreamFileDetails> mediaFiles, org.apache.thrift.async.AsyncMethodCallback<startPlaybackStreamSession_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startPlaybackStreamSession_call method_call = new startPlaybackStreamSession_call(sessionId, deviceId, channel, protocolType, mediaType, action, mediaFiles, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startPlaybackStreamSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private long deviceId;
      private int channel;
      private String protocolType;
      private String mediaType;
      private String action;
      private List<com.kaisquare.core.thrift.StreamFileDetails> mediaFiles;
      public startPlaybackStreamSession_call(String sessionId, long deviceId, int channel, String protocolType, String mediaType, String action, List<com.kaisquare.core.thrift.StreamFileDetails> mediaFiles, org.apache.thrift.async.AsyncMethodCallback<startPlaybackStreamSession_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.deviceId = deviceId;
        this.channel = channel;
        this.protocolType = protocolType;
        this.mediaType = mediaType;
        this.action = action;
        this.mediaFiles = mediaFiles;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startPlaybackStreamSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startPlaybackStreamSession_args args = new startPlaybackStreamSession_args();
        args.setSessionId(sessionId);
        args.setDeviceId(deviceId);
        args.setChannel(channel);
        args.setProtocolType(protocolType);
        args.setMediaType(mediaType);
        args.setAction(action);
        args.setMediaFiles(mediaFiles);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startPlaybackStreamSession();
      }
    }

    public void stopPlaybackStreamSession(String sessionId, org.apache.thrift.async.AsyncMethodCallback<stopPlaybackStreamSession_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopPlaybackStreamSession_call method_call = new stopPlaybackStreamSession_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopPlaybackStreamSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      public stopPlaybackStreamSession_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback<stopPlaybackStreamSession_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopPlaybackStreamSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopPlaybackStreamSession_args args = new stopPlaybackStreamSession_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopPlaybackStreamSession();
      }
    }

    public void setSessionAccessControl(String sessionId, long ttl, List<String> allowedClientIpAddresses, org.apache.thrift.async.AsyncMethodCallback<setSessionAccessControl_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setSessionAccessControl_call method_call = new setSessionAccessControl_call(sessionId, ttl, allowedClientIpAddresses, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setSessionAccessControl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private long ttl;
      private List<String> allowedClientIpAddresses;
      public setSessionAccessControl_call(String sessionId, long ttl, List<String> allowedClientIpAddresses, org.apache.thrift.async.AsyncMethodCallback<setSessionAccessControl_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.ttl = ttl;
        this.allowedClientIpAddresses = allowedClientIpAddresses;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setSessionAccessControl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setSessionAccessControl_args args = new setSessionAccessControl_args();
        args.setSessionId(sessionId);
        args.setTtl(ttl);
        args.setAllowedClientIpAddresses(allowedClientIpAddresses);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setSessionAccessControl();
      }
    }

    public void getStreamClients(String sessionId, org.apache.thrift.async.AsyncMethodCallback<getStreamClients_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStreamClients_call method_call = new getStreamClients_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStreamClients_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      public getStreamClients_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback<getStreamClients_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStreamClients", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStreamClients_args args = new getStreamClients_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStreamClients();
      }
    }

    public void getStreamingServerReport(long deviceId, org.apache.thrift.async.AsyncMethodCallback<getStreamingServerReport_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStreamingServerReport_call method_call = new getStreamingServerReport_call(deviceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStreamingServerReport_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      public getStreamingServerReport_call(long deviceId, org.apache.thrift.async.AsyncMethodCallback<getStreamingServerReport_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStreamingServerReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStreamingServerReport_args args = new getStreamingServerReport_args();
        args.setDeviceId(deviceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStreamingServerReport();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getServerID", new getServerID());
      processMap.put("setDeviceSnapshot", new setDeviceSnapshot());
      processMap.put("startLiveviewStreamSession", new startLiveviewStreamSession());
      processMap.put("stopLiveviewStreamSession", new stopLiveviewStreamSession());
      processMap.put("startPlaybackStreamSession", new startPlaybackStreamSession());
      processMap.put("stopPlaybackStreamSession", new stopPlaybackStreamSession());
      processMap.put("setSessionAccessControl", new setSessionAccessControl());
      processMap.put("getStreamClients", new getStreamClients());
      processMap.put("getStreamingServerReport", new getStreamingServerReport());
      return processMap;
    }

    private static class getServerID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getServerID_args> {
      public getServerID() {
        super("getServerID");
      }

      protected getServerID_args getEmptyArgsInstance() {
        return new getServerID_args();
      }

      protected getServerID_result getResult(I iface, getServerID_args args) throws org.apache.thrift.TException {
        getServerID_result result = new getServerID_result();
        result.success = iface.getServerID();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class setDeviceSnapshot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDeviceSnapshot_args> {
      public setDeviceSnapshot() {
        super("setDeviceSnapshot");
      }

      protected setDeviceSnapshot_args getEmptyArgsInstance() {
        return new setDeviceSnapshot_args();
      }

      protected setDeviceSnapshot_result getResult(I iface, setDeviceSnapshot_args args) throws org.apache.thrift.TException {
        setDeviceSnapshot_result result = new setDeviceSnapshot_result();
        result.success = iface.setDeviceSnapshot(args.deviceId, args.channel, args.snapshot);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class startLiveviewStreamSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startLiveviewStreamSession_args> {
      public startLiveviewStreamSession() {
        super("startLiveviewStreamSession");
      }

      protected startLiveviewStreamSession_args getEmptyArgsInstance() {
        return new startLiveviewStreamSession_args();
      }

      protected startLiveviewStreamSession_result getResult(I iface, startLiveviewStreamSession_args args) throws org.apache.thrift.TException {
        startLiveviewStreamSession_result result = new startLiveviewStreamSession_result();
        result.success = iface.startLiveviewStreamSession(args.sessionId, args.deviceId, args.channel, args.protocolType, args.mediaType, args.streamProfile);
        return result;
      }
    }

    private static class stopLiveviewStreamSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopLiveviewStreamSession_args> {
      public stopLiveviewStreamSession() {
        super("stopLiveviewStreamSession");
      }

      protected stopLiveviewStreamSession_args getEmptyArgsInstance() {
        return new stopLiveviewStreamSession_args();
      }

      protected stopLiveviewStreamSession_result getResult(I iface, stopLiveviewStreamSession_args args) throws org.apache.thrift.TException {
        stopLiveviewStreamSession_result result = new stopLiveviewStreamSession_result();
        result.success = iface.stopLiveviewStreamSession(args.sessionId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class startPlaybackStreamSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startPlaybackStreamSession_args> {
      public startPlaybackStreamSession() {
        super("startPlaybackStreamSession");
      }

      protected startPlaybackStreamSession_args getEmptyArgsInstance() {
        return new startPlaybackStreamSession_args();
      }

      protected startPlaybackStreamSession_result getResult(I iface, startPlaybackStreamSession_args args) throws org.apache.thrift.TException {
        startPlaybackStreamSession_result result = new startPlaybackStreamSession_result();
        result.success = iface.startPlaybackStreamSession(args.sessionId, args.deviceId, args.channel, args.protocolType, args.mediaType, args.action, args.mediaFiles);
        return result;
      }
    }

    private static class stopPlaybackStreamSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopPlaybackStreamSession_args> {
      public stopPlaybackStreamSession() {
        super("stopPlaybackStreamSession");
      }

      protected stopPlaybackStreamSession_args getEmptyArgsInstance() {
        return new stopPlaybackStreamSession_args();
      }

      protected stopPlaybackStreamSession_result getResult(I iface, stopPlaybackStreamSession_args args) throws org.apache.thrift.TException {
        stopPlaybackStreamSession_result result = new stopPlaybackStreamSession_result();
        result.success = iface.stopPlaybackStreamSession(args.sessionId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class setSessionAccessControl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setSessionAccessControl_args> {
      public setSessionAccessControl() {
        super("setSessionAccessControl");
      }

      protected setSessionAccessControl_args getEmptyArgsInstance() {
        return new setSessionAccessControl_args();
      }

      protected setSessionAccessControl_result getResult(I iface, setSessionAccessControl_args args) throws org.apache.thrift.TException {
        setSessionAccessControl_result result = new setSessionAccessControl_result();
        result.success = iface.setSessionAccessControl(args.sessionId, args.ttl, args.allowedClientIpAddresses);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getStreamClients<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStreamClients_args> {
      public getStreamClients() {
        super("getStreamClients");
      }

      protected getStreamClients_args getEmptyArgsInstance() {
        return new getStreamClients_args();
      }

      protected getStreamClients_result getResult(I iface, getStreamClients_args args) throws org.apache.thrift.TException {
        getStreamClients_result result = new getStreamClients_result();
        result.success = iface.getStreamClients(args.sessionId);
        return result;
      }
    }

    private static class getStreamingServerReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStreamingServerReport_args> {
      public getStreamingServerReport() {
        super("getStreamingServerReport");
      }

      protected getStreamingServerReport_args getEmptyArgsInstance() {
        return new getStreamingServerReport_args();
      }

      protected getStreamingServerReport_result getResult(I iface, getStreamingServerReport_args args) throws org.apache.thrift.TException {
        getStreamingServerReport_result result = new getStreamingServerReport_result();
        result.success = iface.getStreamingServerReport(args.deviceId);
        return result;
      }
    }

  }

  public static class getServerID_args implements org.apache.thrift.TBase<getServerID_args, getServerID_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerID_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerID_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerID_args.class, metaDataMap);
    }

    public getServerID_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerID_args(getServerID_args other) {
    }

    public getServerID_args deepCopy() {
      return new getServerID_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerID_args)
        return this.equals((getServerID_args)that);
      return false;
    }

    public boolean equals(getServerID_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerID_args typedOther = (getServerID_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerID_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerID_argsStandardSchemeFactory implements SchemeFactory {
      public getServerID_argsStandardScheme getScheme() {
        return new getServerID_argsStandardScheme();
      }
    }

    private static class getServerID_argsStandardScheme extends StandardScheme<getServerID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerID_argsTupleSchemeFactory implements SchemeFactory {
      public getServerID_argsTupleScheme getScheme() {
        return new getServerID_argsTupleScheme();
      }
    }

    private static class getServerID_argsTupleScheme extends TupleScheme<getServerID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getServerID_result implements org.apache.thrift.TBase<getServerID_result, getServerID_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getServerID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getServerID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getServerID_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getServerID_result.class, metaDataMap);
    }

    public getServerID_result() {
    }

    public getServerID_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerID_result(getServerID_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public getServerID_result deepCopy() {
      return new getServerID_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getServerID_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerID_result)
        return this.equals((getServerID_result)that);
      return false;
    }

    public boolean equals(getServerID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getServerID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getServerID_result typedOther = (getServerID_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getServerID_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getServerID_resultStandardSchemeFactory implements SchemeFactory {
      public getServerID_resultStandardScheme getScheme() {
        return new getServerID_resultStandardScheme();
      }
    }

    private static class getServerID_resultStandardScheme extends StandardScheme<getServerID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getServerID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getServerID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getServerID_resultTupleSchemeFactory implements SchemeFactory {
      public getServerID_resultTupleScheme getScheme() {
        return new getServerID_resultTupleScheme();
      }
    }

    private static class getServerID_resultTupleScheme extends TupleScheme<getServerID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getServerID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getServerID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setDeviceSnapshot_args implements org.apache.thrift.TBase<setDeviceSnapshot_args, setDeviceSnapshot_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDeviceSnapshot_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDeviceSnapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDeviceSnapshot_argsTupleSchemeFactory());
    }

    public long deviceId; // required
    public int channel; // required
    public ByteBuffer snapshot; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL((short)2, "channel"),
      SNAPSHOT((short)3, "snapshot");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL
            return CHANNEL;
          case 3: // SNAPSHOT
            return SNAPSHOT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("snapshot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDeviceSnapshot_args.class, metaDataMap);
    }

    public setDeviceSnapshot_args() {
    }

    public setDeviceSnapshot_args(
      long deviceId,
      int channel,
      ByteBuffer snapshot)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.snapshot = snapshot;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDeviceSnapshot_args(setDeviceSnapshot_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetSnapshot()) {
        this.snapshot = org.apache.thrift.TBaseHelper.copyBinary(other.snapshot);
;
      }
    }

    public setDeviceSnapshot_args deepCopy() {
      return new setDeviceSnapshot_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.snapshot = null;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public setDeviceSnapshot_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public setDeviceSnapshot_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public byte[] getSnapshot() {
      setSnapshot(org.apache.thrift.TBaseHelper.rightSize(snapshot));
      return snapshot == null ? null : snapshot.array();
    }

    public ByteBuffer bufferForSnapshot() {
      return snapshot;
    }

    public setDeviceSnapshot_args setSnapshot(byte[] snapshot) {
      setSnapshot(snapshot == null ? (ByteBuffer)null : ByteBuffer.wrap(snapshot));
      return this;
    }

    public setDeviceSnapshot_args setSnapshot(ByteBuffer snapshot) {
      this.snapshot = snapshot;
      return this;
    }

    public void unsetSnapshot() {
      this.snapshot = null;
    }

    /** Returns true if field snapshot is set (has been assigned a value) and false otherwise */
    public boolean isSetSnapshot() {
      return this.snapshot != null;
    }

    public void setSnapshotIsSet(boolean value) {
      if (!value) {
        this.snapshot = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case SNAPSHOT:
        if (value == null) {
          unsetSnapshot();
        } else {
          setSnapshot((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case SNAPSHOT:
        return getSnapshot();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case SNAPSHOT:
        return isSetSnapshot();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDeviceSnapshot_args)
        return this.equals((setDeviceSnapshot_args)that);
      return false;
    }

    public boolean equals(setDeviceSnapshot_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_snapshot = true && this.isSetSnapshot();
      boolean that_present_snapshot = true && that.isSetSnapshot();
      if (this_present_snapshot || that_present_snapshot) {
        if (!(this_present_snapshot && that_present_snapshot))
          return false;
        if (!this.snapshot.equals(that.snapshot))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDeviceSnapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDeviceSnapshot_args typedOther = (setDeviceSnapshot_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSnapshot()).compareTo(typedOther.isSetSnapshot());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnapshot()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot, typedOther.snapshot);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDeviceSnapshot_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("snapshot:");
      if (this.snapshot == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.snapshot, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDeviceSnapshot_argsStandardSchemeFactory implements SchemeFactory {
      public setDeviceSnapshot_argsStandardScheme getScheme() {
        return new setDeviceSnapshot_argsStandardScheme();
      }
    }

    private static class setDeviceSnapshot_argsStandardScheme extends StandardScheme<setDeviceSnapshot_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDeviceSnapshot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SNAPSHOT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.snapshot = iprot.readBinary();
                struct.setSnapshotIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDeviceSnapshot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.snapshot != null) {
          oprot.writeFieldBegin(SNAPSHOT_FIELD_DESC);
          oprot.writeBinary(struct.snapshot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDeviceSnapshot_argsTupleSchemeFactory implements SchemeFactory {
      public setDeviceSnapshot_argsTupleScheme getScheme() {
        return new setDeviceSnapshot_argsTupleScheme();
      }
    }

    private static class setDeviceSnapshot_argsTupleScheme extends TupleScheme<setDeviceSnapshot_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDeviceSnapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannel()) {
          optionals.set(1);
        }
        if (struct.isSetSnapshot()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetSnapshot()) {
          oprot.writeBinary(struct.snapshot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDeviceSnapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.snapshot = iprot.readBinary();
          struct.setSnapshotIsSet(true);
        }
      }
    }

  }

  public static class setDeviceSnapshot_result implements org.apache.thrift.TBase<setDeviceSnapshot_result, setDeviceSnapshot_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDeviceSnapshot_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDeviceSnapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDeviceSnapshot_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDeviceSnapshot_result.class, metaDataMap);
    }

    public setDeviceSnapshot_result() {
    }

    public setDeviceSnapshot_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDeviceSnapshot_result(setDeviceSnapshot_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public setDeviceSnapshot_result deepCopy() {
      return new setDeviceSnapshot_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setDeviceSnapshot_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDeviceSnapshot_result)
        return this.equals((setDeviceSnapshot_result)that);
      return false;
    }

    public boolean equals(setDeviceSnapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setDeviceSnapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setDeviceSnapshot_result typedOther = (setDeviceSnapshot_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDeviceSnapshot_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDeviceSnapshot_resultStandardSchemeFactory implements SchemeFactory {
      public setDeviceSnapshot_resultStandardScheme getScheme() {
        return new setDeviceSnapshot_resultStandardScheme();
      }
    }

    private static class setDeviceSnapshot_resultStandardScheme extends StandardScheme<setDeviceSnapshot_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDeviceSnapshot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDeviceSnapshot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDeviceSnapshot_resultTupleSchemeFactory implements SchemeFactory {
      public setDeviceSnapshot_resultTupleScheme getScheme() {
        return new setDeviceSnapshot_resultTupleScheme();
      }
    }

    private static class setDeviceSnapshot_resultTupleScheme extends TupleScheme<setDeviceSnapshot_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDeviceSnapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDeviceSnapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class startLiveviewStreamSession_args implements org.apache.thrift.TBase<startLiveviewStreamSession_args, startLiveviewStreamSession_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startLiveviewStreamSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PROTOCOL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField STREAM_PROFILE_FIELD_DESC = new org.apache.thrift.protocol.TField("streamProfile", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startLiveviewStreamSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startLiveviewStreamSession_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public long deviceId; // required
    public int channel; // required
    public String protocolType; // required
    public String mediaType; // required
    public String streamProfile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      DEVICE_ID((short)2, "deviceId"),
      CHANNEL((short)3, "channel"),
      PROTOCOL_TYPE((short)4, "protocolType"),
      MEDIA_TYPE((short)5, "mediaType"),
      STREAM_PROFILE((short)6, "streamProfile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // DEVICE_ID
            return DEVICE_ID;
          case 3: // CHANNEL
            return CHANNEL;
          case 4: // PROTOCOL_TYPE
            return PROTOCOL_TYPE;
          case 5: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 6: // STREAM_PROFILE
            return STREAM_PROFILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROTOCOL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("protocolType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STREAM_PROFILE, new org.apache.thrift.meta_data.FieldMetaData("streamProfile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startLiveviewStreamSession_args.class, metaDataMap);
    }

    public startLiveviewStreamSession_args() {
    }

    public startLiveviewStreamSession_args(
      String sessionId,
      long deviceId,
      int channel,
      String protocolType,
      String mediaType,
      String streamProfile)
    {
      this();
      this.sessionId = sessionId;
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.protocolType = protocolType;
      this.mediaType = mediaType;
      this.streamProfile = streamProfile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startLiveviewStreamSession_args(startLiveviewStreamSession_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetProtocolType()) {
        this.protocolType = other.protocolType;
      }
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetStreamProfile()) {
        this.streamProfile = other.streamProfile;
      }
    }

    public startLiveviewStreamSession_args deepCopy() {
      return new startLiveviewStreamSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.protocolType = null;
      this.mediaType = null;
      this.streamProfile = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public startLiveviewStreamSession_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public startLiveviewStreamSession_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public startLiveviewStreamSession_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getProtocolType() {
      return this.protocolType;
    }

    public startLiveviewStreamSession_args setProtocolType(String protocolType) {
      this.protocolType = protocolType;
      return this;
    }

    public void unsetProtocolType() {
      this.protocolType = null;
    }

    /** Returns true if field protocolType is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocolType() {
      return this.protocolType != null;
    }

    public void setProtocolTypeIsSet(boolean value) {
      if (!value) {
        this.protocolType = null;
      }
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public startLiveviewStreamSession_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getStreamProfile() {
      return this.streamProfile;
    }

    public startLiveviewStreamSession_args setStreamProfile(String streamProfile) {
      this.streamProfile = streamProfile;
      return this;
    }

    public void unsetStreamProfile() {
      this.streamProfile = null;
    }

    /** Returns true if field streamProfile is set (has been assigned a value) and false otherwise */
    public boolean isSetStreamProfile() {
      return this.streamProfile != null;
    }

    public void setStreamProfileIsSet(boolean value) {
      if (!value) {
        this.streamProfile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case PROTOCOL_TYPE:
        if (value == null) {
          unsetProtocolType();
        } else {
          setProtocolType((String)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case STREAM_PROFILE:
        if (value == null) {
          unsetStreamProfile();
        } else {
          setStreamProfile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case PROTOCOL_TYPE:
        return getProtocolType();

      case MEDIA_TYPE:
        return getMediaType();

      case STREAM_PROFILE:
        return getStreamProfile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case PROTOCOL_TYPE:
        return isSetProtocolType();
      case MEDIA_TYPE:
        return isSetMediaType();
      case STREAM_PROFILE:
        return isSetStreamProfile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startLiveviewStreamSession_args)
        return this.equals((startLiveviewStreamSession_args)that);
      return false;
    }

    public boolean equals(startLiveviewStreamSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_protocolType = true && this.isSetProtocolType();
      boolean that_present_protocolType = true && that.isSetProtocolType();
      if (this_present_protocolType || that_present_protocolType) {
        if (!(this_present_protocolType && that_present_protocolType))
          return false;
        if (!this.protocolType.equals(that.protocolType))
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_streamProfile = true && this.isSetStreamProfile();
      boolean that_present_streamProfile = true && that.isSetStreamProfile();
      if (this_present_streamProfile || that_present_streamProfile) {
        if (!(this_present_streamProfile && that_present_streamProfile))
          return false;
        if (!this.streamProfile.equals(that.streamProfile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startLiveviewStreamSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startLiveviewStreamSession_args typedOther = (startLiveviewStreamSession_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProtocolType()).compareTo(typedOther.isSetProtocolType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocolType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolType, typedOther.protocolType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStreamProfile()).compareTo(typedOther.isSetStreamProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStreamProfile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.streamProfile, typedOther.streamProfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startLiveviewStreamSession_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("protocolType:");
      if (this.protocolType == null) {
        sb.append("null");
      } else {
        sb.append(this.protocolType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("streamProfile:");
      if (this.streamProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.streamProfile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startLiveviewStreamSession_argsStandardSchemeFactory implements SchemeFactory {
      public startLiveviewStreamSession_argsStandardScheme getScheme() {
        return new startLiveviewStreamSession_argsStandardScheme();
      }
    }

    private static class startLiveviewStreamSession_argsStandardScheme extends StandardScheme<startLiveviewStreamSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startLiveviewStreamSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROTOCOL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.protocolType = iprot.readString();
                struct.setProtocolTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // STREAM_PROFILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.streamProfile = iprot.readString();
                struct.setStreamProfileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startLiveviewStreamSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.protocolType != null) {
          oprot.writeFieldBegin(PROTOCOL_TYPE_FIELD_DESC);
          oprot.writeString(struct.protocolType);
          oprot.writeFieldEnd();
        }
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.streamProfile != null) {
          oprot.writeFieldBegin(STREAM_PROFILE_FIELD_DESC);
          oprot.writeString(struct.streamProfile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startLiveviewStreamSession_argsTupleSchemeFactory implements SchemeFactory {
      public startLiveviewStreamSession_argsTupleScheme getScheme() {
        return new startLiveviewStreamSession_argsTupleScheme();
      }
    }

    private static class startLiveviewStreamSession_argsTupleScheme extends TupleScheme<startLiveviewStreamSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startLiveviewStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceId()) {
          optionals.set(1);
        }
        if (struct.isSetChannel()) {
          optionals.set(2);
        }
        if (struct.isSetProtocolType()) {
          optionals.set(3);
        }
        if (struct.isSetMediaType()) {
          optionals.set(4);
        }
        if (struct.isSetStreamProfile()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetProtocolType()) {
          oprot.writeString(struct.protocolType);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetStreamProfile()) {
          oprot.writeString(struct.streamProfile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startLiveviewStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(3)) {
          struct.protocolType = iprot.readString();
          struct.setProtocolTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.streamProfile = iprot.readString();
          struct.setStreamProfileIsSet(true);
        }
      }
    }

  }

  public static class startLiveviewStreamSession_result implements org.apache.thrift.TBase<startLiveviewStreamSession_result, startLiveviewStreamSession_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startLiveviewStreamSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startLiveviewStreamSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startLiveviewStreamSession_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startLiveviewStreamSession_result.class, metaDataMap);
    }

    public startLiveviewStreamSession_result() {
    }

    public startLiveviewStreamSession_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startLiveviewStreamSession_result(startLiveviewStreamSession_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public startLiveviewStreamSession_result deepCopy() {
      return new startLiveviewStreamSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public startLiveviewStreamSession_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startLiveviewStreamSession_result)
        return this.equals((startLiveviewStreamSession_result)that);
      return false;
    }

    public boolean equals(startLiveviewStreamSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startLiveviewStreamSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startLiveviewStreamSession_result typedOther = (startLiveviewStreamSession_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startLiveviewStreamSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startLiveviewStreamSession_resultStandardSchemeFactory implements SchemeFactory {
      public startLiveviewStreamSession_resultStandardScheme getScheme() {
        return new startLiveviewStreamSession_resultStandardScheme();
      }
    }

    private static class startLiveviewStreamSession_resultStandardScheme extends StandardScheme<startLiveviewStreamSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startLiveviewStreamSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startLiveviewStreamSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startLiveviewStreamSession_resultTupleSchemeFactory implements SchemeFactory {
      public startLiveviewStreamSession_resultTupleScheme getScheme() {
        return new startLiveviewStreamSession_resultTupleScheme();
      }
    }

    private static class startLiveviewStreamSession_resultTupleScheme extends TupleScheme<startLiveviewStreamSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startLiveviewStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startLiveviewStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stopLiveviewStreamSession_args implements org.apache.thrift.TBase<stopLiveviewStreamSession_args, stopLiveviewStreamSession_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopLiveviewStreamSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopLiveviewStreamSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopLiveviewStreamSession_argsTupleSchemeFactory());
    }

    public String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopLiveviewStreamSession_args.class, metaDataMap);
    }

    public stopLiveviewStreamSession_args() {
    }

    public stopLiveviewStreamSession_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopLiveviewStreamSession_args(stopLiveviewStreamSession_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public stopLiveviewStreamSession_args deepCopy() {
      return new stopLiveviewStreamSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public stopLiveviewStreamSession_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopLiveviewStreamSession_args)
        return this.equals((stopLiveviewStreamSession_args)that);
      return false;
    }

    public boolean equals(stopLiveviewStreamSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopLiveviewStreamSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopLiveviewStreamSession_args typedOther = (stopLiveviewStreamSession_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopLiveviewStreamSession_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopLiveviewStreamSession_argsStandardSchemeFactory implements SchemeFactory {
      public stopLiveviewStreamSession_argsStandardScheme getScheme() {
        return new stopLiveviewStreamSession_argsStandardScheme();
      }
    }

    private static class stopLiveviewStreamSession_argsStandardScheme extends StandardScheme<stopLiveviewStreamSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopLiveviewStreamSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopLiveviewStreamSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopLiveviewStreamSession_argsTupleSchemeFactory implements SchemeFactory {
      public stopLiveviewStreamSession_argsTupleScheme getScheme() {
        return new stopLiveviewStreamSession_argsTupleScheme();
      }
    }

    private static class stopLiveviewStreamSession_argsTupleScheme extends TupleScheme<stopLiveviewStreamSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopLiveviewStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopLiveviewStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class stopLiveviewStreamSession_result implements org.apache.thrift.TBase<stopLiveviewStreamSession_result, stopLiveviewStreamSession_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopLiveviewStreamSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopLiveviewStreamSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopLiveviewStreamSession_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopLiveviewStreamSession_result.class, metaDataMap);
    }

    public stopLiveviewStreamSession_result() {
    }

    public stopLiveviewStreamSession_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopLiveviewStreamSession_result(stopLiveviewStreamSession_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public stopLiveviewStreamSession_result deepCopy() {
      return new stopLiveviewStreamSession_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public stopLiveviewStreamSession_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopLiveviewStreamSession_result)
        return this.equals((stopLiveviewStreamSession_result)that);
      return false;
    }

    public boolean equals(stopLiveviewStreamSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopLiveviewStreamSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopLiveviewStreamSession_result typedOther = (stopLiveviewStreamSession_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopLiveviewStreamSession_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopLiveviewStreamSession_resultStandardSchemeFactory implements SchemeFactory {
      public stopLiveviewStreamSession_resultStandardScheme getScheme() {
        return new stopLiveviewStreamSession_resultStandardScheme();
      }
    }

    private static class stopLiveviewStreamSession_resultStandardScheme extends StandardScheme<stopLiveviewStreamSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopLiveviewStreamSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopLiveviewStreamSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopLiveviewStreamSession_resultTupleSchemeFactory implements SchemeFactory {
      public stopLiveviewStreamSession_resultTupleScheme getScheme() {
        return new stopLiveviewStreamSession_resultTupleScheme();
      }
    }

    private static class stopLiveviewStreamSession_resultTupleScheme extends TupleScheme<stopLiveviewStreamSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopLiveviewStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopLiveviewStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class startPlaybackStreamSession_args implements org.apache.thrift.TBase<startPlaybackStreamSession_args, startPlaybackStreamSession_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startPlaybackStreamSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("channel", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PROTOCOL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField MEDIA_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaFiles", org.apache.thrift.protocol.TType.LIST, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startPlaybackStreamSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startPlaybackStreamSession_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public long deviceId; // required
    public int channel; // required
    public String protocolType; // required
    public String mediaType; // required
    public String action; // required
    public List<com.kaisquare.core.thrift.StreamFileDetails> mediaFiles; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      DEVICE_ID((short)2, "deviceId"),
      CHANNEL((short)3, "channel"),
      PROTOCOL_TYPE((short)4, "protocolType"),
      MEDIA_TYPE((short)5, "mediaType"),
      ACTION((short)6, "action"),
      MEDIA_FILES((short)7, "mediaFiles");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // DEVICE_ID
            return DEVICE_ID;
          case 3: // CHANNEL
            return CHANNEL;
          case 4: // PROTOCOL_TYPE
            return PROTOCOL_TYPE;
          case 5: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 6: // ACTION
            return ACTION;
          case 7: // MEDIA_FILES
            return MEDIA_FILES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private static final int __CHANNEL_ISSET_ID = 1;
    private BitSet __isset_bit_vector = new BitSet(2);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("channel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PROTOCOL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("protocolType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEDIA_FILES, new org.apache.thrift.meta_data.FieldMetaData("mediaFiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.core.thrift.StreamFileDetails.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startPlaybackStreamSession_args.class, metaDataMap);
    }

    public startPlaybackStreamSession_args() {
    }

    public startPlaybackStreamSession_args(
      String sessionId,
      long deviceId,
      int channel,
      String protocolType,
      String mediaType,
      String action,
      List<com.kaisquare.core.thrift.StreamFileDetails> mediaFiles)
    {
      this();
      this.sessionId = sessionId;
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      this.channel = channel;
      setChannelIsSet(true);
      this.protocolType = protocolType;
      this.mediaType = mediaType;
      this.action = action;
      this.mediaFiles = mediaFiles;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startPlaybackStreamSession_args(startPlaybackStreamSession_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      this.deviceId = other.deviceId;
      this.channel = other.channel;
      if (other.isSetProtocolType()) {
        this.protocolType = other.protocolType;
      }
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetAction()) {
        this.action = other.action;
      }
      if (other.isSetMediaFiles()) {
        List<com.kaisquare.core.thrift.StreamFileDetails> __this__mediaFiles = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>();
        for (com.kaisquare.core.thrift.StreamFileDetails other_element : other.mediaFiles) {
          __this__mediaFiles.add(new com.kaisquare.core.thrift.StreamFileDetails(other_element));
        }
        this.mediaFiles = __this__mediaFiles;
      }
    }

    public startPlaybackStreamSession_args deepCopy() {
      return new startPlaybackStreamSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      setDeviceIdIsSet(false);
      this.deviceId = 0;
      setChannelIsSet(false);
      this.channel = 0;
      this.protocolType = null;
      this.mediaType = null;
      this.action = null;
      this.mediaFiles = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public startPlaybackStreamSession_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public startPlaybackStreamSession_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public int getChannel() {
      return this.channel;
    }

    public startPlaybackStreamSession_args setChannel(int channel) {
      this.channel = channel;
      setChannelIsSet(true);
      return this;
    }

    public void unsetChannel() {
      __isset_bit_vector.clear(__CHANNEL_ISSET_ID);
    }

    /** Returns true if field channel is set (has been assigned a value) and false otherwise */
    public boolean isSetChannel() {
      return __isset_bit_vector.get(__CHANNEL_ISSET_ID);
    }

    public void setChannelIsSet(boolean value) {
      __isset_bit_vector.set(__CHANNEL_ISSET_ID, value);
    }

    public String getProtocolType() {
      return this.protocolType;
    }

    public startPlaybackStreamSession_args setProtocolType(String protocolType) {
      this.protocolType = protocolType;
      return this;
    }

    public void unsetProtocolType() {
      this.protocolType = null;
    }

    /** Returns true if field protocolType is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocolType() {
      return this.protocolType != null;
    }

    public void setProtocolTypeIsSet(boolean value) {
      if (!value) {
        this.protocolType = null;
      }
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public startPlaybackStreamSession_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getAction() {
      return this.action;
    }

    public startPlaybackStreamSession_args setAction(String action) {
      this.action = action;
      return this;
    }

    public void unsetAction() {
      this.action = null;
    }

    /** Returns true if field action is set (has been assigned a value) and false otherwise */
    public boolean isSetAction() {
      return this.action != null;
    }

    public void setActionIsSet(boolean value) {
      if (!value) {
        this.action = null;
      }
    }

    public int getMediaFilesSize() {
      return (this.mediaFiles == null) ? 0 : this.mediaFiles.size();
    }

    public java.util.Iterator<com.kaisquare.core.thrift.StreamFileDetails> getMediaFilesIterator() {
      return (this.mediaFiles == null) ? null : this.mediaFiles.iterator();
    }

    public void addToMediaFiles(com.kaisquare.core.thrift.StreamFileDetails elem) {
      if (this.mediaFiles == null) {
        this.mediaFiles = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>();
      }
      this.mediaFiles.add(elem);
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> getMediaFiles() {
      return this.mediaFiles;
    }

    public startPlaybackStreamSession_args setMediaFiles(List<com.kaisquare.core.thrift.StreamFileDetails> mediaFiles) {
      this.mediaFiles = mediaFiles;
      return this;
    }

    public void unsetMediaFiles() {
      this.mediaFiles = null;
    }

    /** Returns true if field mediaFiles is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaFiles() {
      return this.mediaFiles != null;
    }

    public void setMediaFilesIsSet(boolean value) {
      if (!value) {
        this.mediaFiles = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      case CHANNEL:
        if (value == null) {
          unsetChannel();
        } else {
          setChannel((Integer)value);
        }
        break;

      case PROTOCOL_TYPE:
        if (value == null) {
          unsetProtocolType();
        } else {
          setProtocolType((String)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          setAction((String)value);
        }
        break;

      case MEDIA_FILES:
        if (value == null) {
          unsetMediaFiles();
        } else {
          setMediaFiles((List<com.kaisquare.core.thrift.StreamFileDetails>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      case CHANNEL:
        return Integer.valueOf(getChannel());

      case PROTOCOL_TYPE:
        return getProtocolType();

      case MEDIA_TYPE:
        return getMediaType();

      case ACTION:
        return getAction();

      case MEDIA_FILES:
        return getMediaFiles();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL:
        return isSetChannel();
      case PROTOCOL_TYPE:
        return isSetProtocolType();
      case MEDIA_TYPE:
        return isSetMediaType();
      case ACTION:
        return isSetAction();
      case MEDIA_FILES:
        return isSetMediaFiles();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startPlaybackStreamSession_args)
        return this.equals((startPlaybackStreamSession_args)that);
      return false;
    }

    public boolean equals(startPlaybackStreamSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      boolean this_present_channel = true;
      boolean that_present_channel = true;
      if (this_present_channel || that_present_channel) {
        if (!(this_present_channel && that_present_channel))
          return false;
        if (this.channel != that.channel)
          return false;
      }

      boolean this_present_protocolType = true && this.isSetProtocolType();
      boolean that_present_protocolType = true && that.isSetProtocolType();
      if (this_present_protocolType || that_present_protocolType) {
        if (!(this_present_protocolType && that_present_protocolType))
          return false;
        if (!this.protocolType.equals(that.protocolType))
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_action = true && this.isSetAction();
      boolean that_present_action = true && that.isSetAction();
      if (this_present_action || that_present_action) {
        if (!(this_present_action && that_present_action))
          return false;
        if (!this.action.equals(that.action))
          return false;
      }

      boolean this_present_mediaFiles = true && this.isSetMediaFiles();
      boolean that_present_mediaFiles = true && that.isSetMediaFiles();
      if (this_present_mediaFiles || that_present_mediaFiles) {
        if (!(this_present_mediaFiles && that_present_mediaFiles))
          return false;
        if (!this.mediaFiles.equals(that.mediaFiles))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startPlaybackStreamSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startPlaybackStreamSession_args typedOther = (startPlaybackStreamSession_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannel()).compareTo(typedOther.isSetChannel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel, typedOther.channel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProtocolType()).compareTo(typedOther.isSetProtocolType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocolType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolType, typedOther.protocolType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, typedOther.action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaFiles()).compareTo(typedOther.isSetMediaFiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaFiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaFiles, typedOther.mediaFiles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startPlaybackStreamSession_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("channel:");
      sb.append(this.channel);
      first = false;
      if (!first) sb.append(", ");
      sb.append("protocolType:");
      if (this.protocolType == null) {
        sb.append("null");
      } else {
        sb.append(this.protocolType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaFiles:");
      if (this.mediaFiles == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaFiles);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startPlaybackStreamSession_argsStandardSchemeFactory implements SchemeFactory {
      public startPlaybackStreamSession_argsStandardScheme getScheme() {
        return new startPlaybackStreamSession_argsStandardScheme();
      }
    }

    private static class startPlaybackStreamSession_argsStandardScheme extends StandardScheme<startPlaybackStreamSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startPlaybackStreamSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.channel = iprot.readI32();
                struct.setChannelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROTOCOL_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.protocolType = iprot.readString();
                struct.setProtocolTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action = iprot.readString();
                struct.setActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // MEDIA_FILES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.mediaFiles = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    com.kaisquare.core.thrift.StreamFileDetails _elem10; // required
                    _elem10 = new com.kaisquare.core.thrift.StreamFileDetails();
                    _elem10.read(iprot);
                    struct.mediaFiles.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setMediaFilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startPlaybackStreamSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHANNEL_FIELD_DESC);
        oprot.writeI32(struct.channel);
        oprot.writeFieldEnd();
        if (struct.protocolType != null) {
          oprot.writeFieldBegin(PROTOCOL_TYPE_FIELD_DESC);
          oprot.writeString(struct.protocolType);
          oprot.writeFieldEnd();
        }
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.action != null) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeString(struct.action);
          oprot.writeFieldEnd();
        }
        if (struct.mediaFiles != null) {
          oprot.writeFieldBegin(MEDIA_FILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.mediaFiles.size()));
            for (com.kaisquare.core.thrift.StreamFileDetails _iter11 : struct.mediaFiles)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startPlaybackStreamSession_argsTupleSchemeFactory implements SchemeFactory {
      public startPlaybackStreamSession_argsTupleScheme getScheme() {
        return new startPlaybackStreamSession_argsTupleScheme();
      }
    }

    private static class startPlaybackStreamSession_argsTupleScheme extends TupleScheme<startPlaybackStreamSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startPlaybackStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceId()) {
          optionals.set(1);
        }
        if (struct.isSetChannel()) {
          optionals.set(2);
        }
        if (struct.isSetProtocolType()) {
          optionals.set(3);
        }
        if (struct.isSetMediaType()) {
          optionals.set(4);
        }
        if (struct.isSetAction()) {
          optionals.set(5);
        }
        if (struct.isSetMediaFiles()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
        if (struct.isSetChannel()) {
          oprot.writeI32(struct.channel);
        }
        if (struct.isSetProtocolType()) {
          oprot.writeString(struct.protocolType);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetAction()) {
          oprot.writeString(struct.action);
        }
        if (struct.isSetMediaFiles()) {
          {
            oprot.writeI32(struct.mediaFiles.size());
            for (com.kaisquare.core.thrift.StreamFileDetails _iter12 : struct.mediaFiles)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startPlaybackStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channel = iprot.readI32();
          struct.setChannelIsSet(true);
        }
        if (incoming.get(3)) {
          struct.protocolType = iprot.readString();
          struct.setProtocolTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.action = iprot.readString();
          struct.setActionIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.mediaFiles = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              com.kaisquare.core.thrift.StreamFileDetails _elem15; // required
              _elem15 = new com.kaisquare.core.thrift.StreamFileDetails();
              _elem15.read(iprot);
              struct.mediaFiles.add(_elem15);
            }
          }
          struct.setMediaFilesIsSet(true);
        }
      }
    }

  }

  public static class startPlaybackStreamSession_result implements org.apache.thrift.TBase<startPlaybackStreamSession_result, startPlaybackStreamSession_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startPlaybackStreamSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startPlaybackStreamSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startPlaybackStreamSession_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startPlaybackStreamSession_result.class, metaDataMap);
    }

    public startPlaybackStreamSession_result() {
    }

    public startPlaybackStreamSession_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startPlaybackStreamSession_result(startPlaybackStreamSession_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public startPlaybackStreamSession_result deepCopy() {
      return new startPlaybackStreamSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public startPlaybackStreamSession_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startPlaybackStreamSession_result)
        return this.equals((startPlaybackStreamSession_result)that);
      return false;
    }

    public boolean equals(startPlaybackStreamSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startPlaybackStreamSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startPlaybackStreamSession_result typedOther = (startPlaybackStreamSession_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startPlaybackStreamSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startPlaybackStreamSession_resultStandardSchemeFactory implements SchemeFactory {
      public startPlaybackStreamSession_resultStandardScheme getScheme() {
        return new startPlaybackStreamSession_resultStandardScheme();
      }
    }

    private static class startPlaybackStreamSession_resultStandardScheme extends StandardScheme<startPlaybackStreamSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startPlaybackStreamSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startPlaybackStreamSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter19 : struct.success)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startPlaybackStreamSession_resultTupleSchemeFactory implements SchemeFactory {
      public startPlaybackStreamSession_resultTupleScheme getScheme() {
        return new startPlaybackStreamSession_resultTupleScheme();
      }
    }

    private static class startPlaybackStreamSession_resultTupleScheme extends TupleScheme<startPlaybackStreamSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startPlaybackStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter20 : struct.success)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startPlaybackStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stopPlaybackStreamSession_args implements org.apache.thrift.TBase<stopPlaybackStreamSession_args, stopPlaybackStreamSession_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopPlaybackStreamSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopPlaybackStreamSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopPlaybackStreamSession_argsTupleSchemeFactory());
    }

    public String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopPlaybackStreamSession_args.class, metaDataMap);
    }

    public stopPlaybackStreamSession_args() {
    }

    public stopPlaybackStreamSession_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopPlaybackStreamSession_args(stopPlaybackStreamSession_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public stopPlaybackStreamSession_args deepCopy() {
      return new stopPlaybackStreamSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public stopPlaybackStreamSession_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopPlaybackStreamSession_args)
        return this.equals((stopPlaybackStreamSession_args)that);
      return false;
    }

    public boolean equals(stopPlaybackStreamSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopPlaybackStreamSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopPlaybackStreamSession_args typedOther = (stopPlaybackStreamSession_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopPlaybackStreamSession_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopPlaybackStreamSession_argsStandardSchemeFactory implements SchemeFactory {
      public stopPlaybackStreamSession_argsStandardScheme getScheme() {
        return new stopPlaybackStreamSession_argsStandardScheme();
      }
    }

    private static class stopPlaybackStreamSession_argsStandardScheme extends StandardScheme<stopPlaybackStreamSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopPlaybackStreamSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopPlaybackStreamSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopPlaybackStreamSession_argsTupleSchemeFactory implements SchemeFactory {
      public stopPlaybackStreamSession_argsTupleScheme getScheme() {
        return new stopPlaybackStreamSession_argsTupleScheme();
      }
    }

    private static class stopPlaybackStreamSession_argsTupleScheme extends TupleScheme<stopPlaybackStreamSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopPlaybackStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopPlaybackStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class stopPlaybackStreamSession_result implements org.apache.thrift.TBase<stopPlaybackStreamSession_result, stopPlaybackStreamSession_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopPlaybackStreamSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopPlaybackStreamSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopPlaybackStreamSession_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopPlaybackStreamSession_result.class, metaDataMap);
    }

    public stopPlaybackStreamSession_result() {
    }

    public stopPlaybackStreamSession_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopPlaybackStreamSession_result(stopPlaybackStreamSession_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public stopPlaybackStreamSession_result deepCopy() {
      return new stopPlaybackStreamSession_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public stopPlaybackStreamSession_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopPlaybackStreamSession_result)
        return this.equals((stopPlaybackStreamSession_result)that);
      return false;
    }

    public boolean equals(stopPlaybackStreamSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopPlaybackStreamSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopPlaybackStreamSession_result typedOther = (stopPlaybackStreamSession_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopPlaybackStreamSession_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopPlaybackStreamSession_resultStandardSchemeFactory implements SchemeFactory {
      public stopPlaybackStreamSession_resultStandardScheme getScheme() {
        return new stopPlaybackStreamSession_resultStandardScheme();
      }
    }

    private static class stopPlaybackStreamSession_resultStandardScheme extends StandardScheme<stopPlaybackStreamSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopPlaybackStreamSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopPlaybackStreamSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopPlaybackStreamSession_resultTupleSchemeFactory implements SchemeFactory {
      public stopPlaybackStreamSession_resultTupleScheme getScheme() {
        return new stopPlaybackStreamSession_resultTupleScheme();
      }
    }

    private static class stopPlaybackStreamSession_resultTupleScheme extends TupleScheme<stopPlaybackStreamSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopPlaybackStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopPlaybackStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setSessionAccessControl_args implements org.apache.thrift.TBase<setSessionAccessControl_args, setSessionAccessControl_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSessionAccessControl_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ALLOWED_CLIENT_IP_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("allowedClientIpAddresses", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSessionAccessControl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSessionAccessControl_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public long ttl; // required
    public List<String> allowedClientIpAddresses; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      TTL((short)2, "ttl"),
      ALLOWED_CLIENT_IP_ADDRESSES((short)3, "allowedClientIpAddresses");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // TTL
            return TTL;
          case 3: // ALLOWED_CLIENT_IP_ADDRESSES
            return ALLOWED_CLIENT_IP_ADDRESSES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TTL_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ALLOWED_CLIENT_IP_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("allowedClientIpAddresses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSessionAccessControl_args.class, metaDataMap);
    }

    public setSessionAccessControl_args() {
    }

    public setSessionAccessControl_args(
      String sessionId,
      long ttl,
      List<String> allowedClientIpAddresses)
    {
      this();
      this.sessionId = sessionId;
      this.ttl = ttl;
      setTtlIsSet(true);
      this.allowedClientIpAddresses = allowedClientIpAddresses;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSessionAccessControl_args(setSessionAccessControl_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      this.ttl = other.ttl;
      if (other.isSetAllowedClientIpAddresses()) {
        List<String> __this__allowedClientIpAddresses = new ArrayList<String>();
        for (String other_element : other.allowedClientIpAddresses) {
          __this__allowedClientIpAddresses.add(other_element);
        }
        this.allowedClientIpAddresses = __this__allowedClientIpAddresses;
      }
    }

    public setSessionAccessControl_args deepCopy() {
      return new setSessionAccessControl_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      setTtlIsSet(false);
      this.ttl = 0;
      this.allowedClientIpAddresses = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public setSessionAccessControl_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public long getTtl() {
      return this.ttl;
    }

    public setSessionAccessControl_args setTtl(long ttl) {
      this.ttl = ttl;
      setTtlIsSet(true);
      return this;
    }

    public void unsetTtl() {
      __isset_bit_vector.clear(__TTL_ISSET_ID);
    }

    /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
    public boolean isSetTtl() {
      return __isset_bit_vector.get(__TTL_ISSET_ID);
    }

    public void setTtlIsSet(boolean value) {
      __isset_bit_vector.set(__TTL_ISSET_ID, value);
    }

    public int getAllowedClientIpAddressesSize() {
      return (this.allowedClientIpAddresses == null) ? 0 : this.allowedClientIpAddresses.size();
    }

    public java.util.Iterator<String> getAllowedClientIpAddressesIterator() {
      return (this.allowedClientIpAddresses == null) ? null : this.allowedClientIpAddresses.iterator();
    }

    public void addToAllowedClientIpAddresses(String elem) {
      if (this.allowedClientIpAddresses == null) {
        this.allowedClientIpAddresses = new ArrayList<String>();
      }
      this.allowedClientIpAddresses.add(elem);
    }

    public List<String> getAllowedClientIpAddresses() {
      return this.allowedClientIpAddresses;
    }

    public setSessionAccessControl_args setAllowedClientIpAddresses(List<String> allowedClientIpAddresses) {
      this.allowedClientIpAddresses = allowedClientIpAddresses;
      return this;
    }

    public void unsetAllowedClientIpAddresses() {
      this.allowedClientIpAddresses = null;
    }

    /** Returns true if field allowedClientIpAddresses is set (has been assigned a value) and false otherwise */
    public boolean isSetAllowedClientIpAddresses() {
      return this.allowedClientIpAddresses != null;
    }

    public void setAllowedClientIpAddressesIsSet(boolean value) {
      if (!value) {
        this.allowedClientIpAddresses = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case TTL:
        if (value == null) {
          unsetTtl();
        } else {
          setTtl((Long)value);
        }
        break;

      case ALLOWED_CLIENT_IP_ADDRESSES:
        if (value == null) {
          unsetAllowedClientIpAddresses();
        } else {
          setAllowedClientIpAddresses((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case TTL:
        return Long.valueOf(getTtl());

      case ALLOWED_CLIENT_IP_ADDRESSES:
        return getAllowedClientIpAddresses();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case TTL:
        return isSetTtl();
      case ALLOWED_CLIENT_IP_ADDRESSES:
        return isSetAllowedClientIpAddresses();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSessionAccessControl_args)
        return this.equals((setSessionAccessControl_args)that);
      return false;
    }

    public boolean equals(setSessionAccessControl_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_ttl = true;
      boolean that_present_ttl = true;
      if (this_present_ttl || that_present_ttl) {
        if (!(this_present_ttl && that_present_ttl))
          return false;
        if (this.ttl != that.ttl)
          return false;
      }

      boolean this_present_allowedClientIpAddresses = true && this.isSetAllowedClientIpAddresses();
      boolean that_present_allowedClientIpAddresses = true && that.isSetAllowedClientIpAddresses();
      if (this_present_allowedClientIpAddresses || that_present_allowedClientIpAddresses) {
        if (!(this_present_allowedClientIpAddresses && that_present_allowedClientIpAddresses))
          return false;
        if (!this.allowedClientIpAddresses.equals(that.allowedClientIpAddresses))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSessionAccessControl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSessionAccessControl_args typedOther = (setSessionAccessControl_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTtl()).compareTo(typedOther.isSetTtl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTtl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, typedOther.ttl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAllowedClientIpAddresses()).compareTo(typedOther.isSetAllowedClientIpAddresses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllowedClientIpAddresses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowedClientIpAddresses, typedOther.allowedClientIpAddresses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSessionAccessControl_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
      if (!first) sb.append(", ");
      sb.append("allowedClientIpAddresses:");
      if (this.allowedClientIpAddresses == null) {
        sb.append("null");
      } else {
        sb.append(this.allowedClientIpAddresses);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSessionAccessControl_argsStandardSchemeFactory implements SchemeFactory {
      public setSessionAccessControl_argsStandardScheme getScheme() {
        return new setSessionAccessControl_argsStandardScheme();
      }
    }

    private static class setSessionAccessControl_argsStandardScheme extends StandardScheme<setSessionAccessControl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSessionAccessControl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TTL
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ttl = iprot.readI64();
                struct.setTtlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALLOWED_CLIENT_IP_ADDRESSES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.allowedClientIpAddresses = new ArrayList<String>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    String _elem26; // required
                    _elem26 = iprot.readString();
                    struct.allowedClientIpAddresses.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setAllowedClientIpAddressesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSessionAccessControl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeI64(struct.ttl);
        oprot.writeFieldEnd();
        if (struct.allowedClientIpAddresses != null) {
          oprot.writeFieldBegin(ALLOWED_CLIENT_IP_ADDRESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.allowedClientIpAddresses.size()));
            for (String _iter27 : struct.allowedClientIpAddresses)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSessionAccessControl_argsTupleSchemeFactory implements SchemeFactory {
      public setSessionAccessControl_argsTupleScheme getScheme() {
        return new setSessionAccessControl_argsTupleScheme();
      }
    }

    private static class setSessionAccessControl_argsTupleScheme extends TupleScheme<setSessionAccessControl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSessionAccessControl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetTtl()) {
          optionals.set(1);
        }
        if (struct.isSetAllowedClientIpAddresses()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetTtl()) {
          oprot.writeI64(struct.ttl);
        }
        if (struct.isSetAllowedClientIpAddresses()) {
          {
            oprot.writeI32(struct.allowedClientIpAddresses.size());
            for (String _iter28 : struct.allowedClientIpAddresses)
            {
              oprot.writeString(_iter28);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSessionAccessControl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ttl = iprot.readI64();
          struct.setTtlIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.allowedClientIpAddresses = new ArrayList<String>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              String _elem31; // required
              _elem31 = iprot.readString();
              struct.allowedClientIpAddresses.add(_elem31);
            }
          }
          struct.setAllowedClientIpAddressesIsSet(true);
        }
      }
    }

  }

  public static class setSessionAccessControl_result implements org.apache.thrift.TBase<setSessionAccessControl_result, setSessionAccessControl_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSessionAccessControl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSessionAccessControl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSessionAccessControl_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSessionAccessControl_result.class, metaDataMap);
    }

    public setSessionAccessControl_result() {
    }

    public setSessionAccessControl_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSessionAccessControl_result(setSessionAccessControl_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public setSessionAccessControl_result deepCopy() {
      return new setSessionAccessControl_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setSessionAccessControl_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSessionAccessControl_result)
        return this.equals((setSessionAccessControl_result)that);
      return false;
    }

    public boolean equals(setSessionAccessControl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSessionAccessControl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSessionAccessControl_result typedOther = (setSessionAccessControl_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSessionAccessControl_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSessionAccessControl_resultStandardSchemeFactory implements SchemeFactory {
      public setSessionAccessControl_resultStandardScheme getScheme() {
        return new setSessionAccessControl_resultStandardScheme();
      }
    }

    private static class setSessionAccessControl_resultStandardScheme extends StandardScheme<setSessionAccessControl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSessionAccessControl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSessionAccessControl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSessionAccessControl_resultTupleSchemeFactory implements SchemeFactory {
      public setSessionAccessControl_resultTupleScheme getScheme() {
        return new setSessionAccessControl_resultTupleScheme();
      }
    }

    private static class setSessionAccessControl_resultTupleScheme extends TupleScheme<setSessionAccessControl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSessionAccessControl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSessionAccessControl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStreamClients_args implements org.apache.thrift.TBase<getStreamClients_args, getStreamClients_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamClients_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStreamClients_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStreamClients_argsTupleSchemeFactory());
    }

    public String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamClients_args.class, metaDataMap);
    }

    public getStreamClients_args() {
    }

    public getStreamClients_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamClients_args(getStreamClients_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public getStreamClients_args deepCopy() {
      return new getStreamClients_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public getStreamClients_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamClients_args)
        return this.equals((getStreamClients_args)that);
      return false;
    }

    public boolean equals(getStreamClients_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStreamClients_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStreamClients_args typedOther = (getStreamClients_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStreamClients_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamClients_argsStandardSchemeFactory implements SchemeFactory {
      public getStreamClients_argsStandardScheme getScheme() {
        return new getStreamClients_argsStandardScheme();
      }
    }

    private static class getStreamClients_argsStandardScheme extends StandardScheme<getStreamClients_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamClients_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamClients_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamClients_argsTupleSchemeFactory implements SchemeFactory {
      public getStreamClients_argsTupleScheme getScheme() {
        return new getStreamClients_argsTupleScheme();
      }
    }

    private static class getStreamClients_argsTupleScheme extends TupleScheme<getStreamClients_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamClients_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamClients_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class getStreamClients_result implements org.apache.thrift.TBase<getStreamClients_result, getStreamClients_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamClients_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStreamClients_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStreamClients_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamClients_result.class, metaDataMap);
    }

    public getStreamClients_result() {
    }

    public getStreamClients_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamClients_result(getStreamClients_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public getStreamClients_result deepCopy() {
      return new getStreamClients_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getStreamClients_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamClients_result)
        return this.equals((getStreamClients_result)that);
      return false;
    }

    public boolean equals(getStreamClients_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStreamClients_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStreamClients_result typedOther = (getStreamClients_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStreamClients_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamClients_resultStandardSchemeFactory implements SchemeFactory {
      public getStreamClients_resultStandardScheme getScheme() {
        return new getStreamClients_resultStandardScheme();
      }
    }

    private static class getStreamClients_resultStandardScheme extends StandardScheme<getStreamClients_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamClients_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    String _elem34; // required
                    _elem34 = iprot.readString();
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamClients_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter35 : struct.success)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamClients_resultTupleSchemeFactory implements SchemeFactory {
      public getStreamClients_resultTupleScheme getScheme() {
        return new getStreamClients_resultTupleScheme();
      }
    }

    private static class getStreamClients_resultTupleScheme extends TupleScheme<getStreamClients_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamClients_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter36 : struct.success)
            {
              oprot.writeString(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamClients_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              String _elem39; // required
              _elem39 = iprot.readString();
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStreamingServerReport_args implements org.apache.thrift.TBase<getStreamingServerReport_args, getStreamingServerReport_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamingServerReport_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStreamingServerReport_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStreamingServerReport_argsTupleSchemeFactory());
    }

    public long deviceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamingServerReport_args.class, metaDataMap);
    }

    public getStreamingServerReport_args() {
    }

    public getStreamingServerReport_args(
      long deviceId)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamingServerReport_args(getStreamingServerReport_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
    }

    public getStreamingServerReport_args deepCopy() {
      return new getStreamingServerReport_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public getStreamingServerReport_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamingServerReport_args)
        return this.equals((getStreamingServerReport_args)that);
      return false;
    }

    public boolean equals(getStreamingServerReport_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStreamingServerReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStreamingServerReport_args typedOther = (getStreamingServerReport_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStreamingServerReport_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamingServerReport_argsStandardSchemeFactory implements SchemeFactory {
      public getStreamingServerReport_argsStandardScheme getScheme() {
        return new getStreamingServerReport_argsStandardScheme();
      }
    }

    private static class getStreamingServerReport_argsStandardScheme extends StandardScheme<getStreamingServerReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamingServerReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamingServerReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamingServerReport_argsTupleSchemeFactory implements SchemeFactory {
      public getStreamingServerReport_argsTupleScheme getScheme() {
        return new getStreamingServerReport_argsTupleScheme();
      }
    }

    private static class getStreamingServerReport_argsTupleScheme extends TupleScheme<getStreamingServerReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamingServerReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamingServerReport_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
      }
    }

  }

  public static class getStreamingServerReport_result implements org.apache.thrift.TBase<getStreamingServerReport_result, getStreamingServerReport_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamingServerReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStreamingServerReport_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStreamingServerReport_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamingServerReport_result.class, metaDataMap);
    }

    public getStreamingServerReport_result() {
    }

    public getStreamingServerReport_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamingServerReport_result(getStreamingServerReport_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStreamingServerReport_result deepCopy() {
      return new getStreamingServerReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getStreamingServerReport_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamingServerReport_result)
        return this.equals((getStreamingServerReport_result)that);
      return false;
    }

    public boolean equals(getStreamingServerReport_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStreamingServerReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStreamingServerReport_result typedOther = (getStreamingServerReport_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStreamingServerReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamingServerReport_resultStandardSchemeFactory implements SchemeFactory {
      public getStreamingServerReport_resultStandardScheme getScheme() {
        return new getStreamingServerReport_resultStandardScheme();
      }
    }

    private static class getStreamingServerReport_resultStandardScheme extends StandardScheme<getStreamingServerReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamingServerReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamingServerReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamingServerReport_resultTupleSchemeFactory implements SchemeFactory {
      public getStreamingServerReport_resultTupleScheme getScheme() {
        return new getStreamingServerReport_resultTupleScheme();
      }
    }

    private static class getStreamingServerReport_resultTupleScheme extends TupleScheme<getStreamingServerReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamingServerReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamingServerReport_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
