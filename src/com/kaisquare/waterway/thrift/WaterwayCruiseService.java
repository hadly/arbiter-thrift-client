/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.waterway.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WaterwayCruiseService {

  /**
   * Streaming Server Interface.
   */
  public interface Iface {

    /**
     * Start cruise plan.
     * For Node only.
     * (1) cruisePlanId - Cruise plan ID.
     * (2) segmentIdList - Segment ID list, must be set in advance.
     * (3) deviceId - Device ID, specify the camera that will be acted as the main camera.
     * Return true if start succeed, false if fail.
     * 
     * @param cruisePlanId
     * @param segmentIdList
     * @param deviceId
     */
    public boolean startCruisePlan(String cruisePlanId, List<String> segmentIdList, long deviceId) throws org.apache.thrift.TException;

    /**
     * Pause cruise plan.
     * For Node only.
     * (1) cruisePlanId - Cruise plan ID, must be unique.
     * Return true if pause succeed, false if fail.
     * 
     * @param cruisePlanId
     */
    public boolean pauseCruisePlan(String cruisePlanId) throws org.apache.thrift.TException;

    /**
     * Resume cruise plan.
     * For Node only.
     * (1) cruisePlanId - Cruise plan ID, must be unique.
     * Return true if resume succeed, false if fail.
     * 
     * @param cruisePlanId
     */
    public boolean resumeCruisePlan(String cruisePlanId) throws org.apache.thrift.TException;

    /**
     * Stop cruise plan.
     * For Node only.
     * (1) cruisePlanId - Cruise plan ID, must be unique.
     * Return true if stop succeed, false if fail.
     * 
     * @param cruisePlanId
     */
    public boolean stopCruisePlan(String cruisePlanId) throws org.apache.thrift.TException;

    /**
     * Set or update cruise segment positions.
     * For both Node and KUP.
     * Ignore the direction and speed field in positions.
     * (1) segmentId - Segment ID.
     * (2) positionList - Position list.
     * Return true if set succeed, false if fail.
     * 
     * @param segmentId
     * @param positionList
     */
    public boolean setSegmentPositions(String segmentId, List<GPSData> positionList) throws org.apache.thrift.TException;

    /**
     * Delete cruise segment positions.
     * For both Node and KUP.
     * (1) segmentId - Segment ID.
     * Return true if delete succeed, false if fail.
     * 
     * @param segmentId
     */
    public boolean deleteSegmentPositions(String segmentId) throws org.apache.thrift.TException;

    /**
     * Get current location.
     * For Node only.
     * Return location.
     */
    public GPSData getCurrentLocation() throws org.apache.thrift.TException;

    /**
     * Get current mileage.
     * For Node only.
     * The total mileage since cruise plan started.
     * UNIT: m.
     * Return mileage.
     */
    public double getCurrentMileage() throws org.apache.thrift.TException;

    /**
     * Get current measure result.
     * For Node only.
     * Including GPS, compass and distancer.
     * (1) deviceId - Device ID, specify the camera that will be acted as the main camera.
     * Return result.
     * 
     * @param deviceId
     */
    public CuriseMeasureData getMeasureResult(long deviceId) throws org.apache.thrift.TException;

    /**
     * Get live or historical snapshot.
     * For both Node and KUP.
     * If the cruisePlanId is the same as current one, return the liveview snapshot, else
     * return the snapshot with the same location in last cruise plan.
     * (1) cruisePlanId - Cruise plan ID.
     * Return http snapshot url.
     * 
     * @param cruisePlanId
     */
    public String getCruiseSnapshotUrl(String cruisePlanId) throws org.apache.thrift.TException;

    /**
     * Trigger a cruise event, generate an event video for it.
     * For Node only.
     * The cruisePlanId should be the same as current one.
     * (1) cruisePlanId - Cruise plan ID.
     * (2) startTimestamp - Start time of the event playback (UTC, ddMMyyyyHHmmss format).
     * (3) duration - Duration of the event, unit: second.
     * Return true if trigger succeed.
     * 
     * @param cruisePlanId
     * @param startTimestamp
     * @param duration
     */
    public boolean triggerCruiseEvent(String cruisePlanId, String startTimestamp, int duration) throws org.apache.thrift.TException;

    /**
     * Get historical event video playback.
     * For both Node and KUP.
     * (1) cruisePlanId - Cruise plan ID.
     * (2) startTimestamp - Start time of the event playback (UTC, ddMMyyyyHHmmss format).
     * Return http video url, empty if not found.
     * 
     * @param cruisePlanId
     * @param startTimestamp
     */
    public String getCruiseEventPlaybackVideoUrl(String cruisePlanId, String startTimestamp) throws org.apache.thrift.TException;

    /**
     * Get one cruise record for playback.
     * Should be called periodically (once per second).
     * For both Node and KUP.
     * (1) cruisePlanId - Cruise plan ID.
     * (2) index - Start from 0, less than CruiseRecord.total.
     * Return CruiseRecord.
     * 
     * @param cruisePlanId
     * @param index
     */
    public CruiseRecord getCruisePlaybackItem(String cruisePlanId, int index) throws org.apache.thrift.TException;

    /**
     * Export cruise plan related data to a zip file.
     * For both Node and KUP.
     * Including GPS track, snapshot, measurement.
     * (1) cruisePlanId - Cruise plan ID.
     * (2) segmentIdList - Segment ID list, which belongs to the cruisePlanId.
     * Return export file path, empty if fail.
     * 
     * @param cruisePlanId
     * @param segmentIdList
     */
    public String exportCruiseData(String cruisePlanId, List<String> segmentIdList) throws org.apache.thrift.TException;

    /**
     * Import cruise plan related data to server from file.
     * For both Node and KUP.
     * (1) cruiseFilePath - Path of the zip file which contains all the cruise data.
     * Return cruise plan id if import succeed, empty if fail.
     * 
     * @param cruiseFilePath
     */
    public String importCruiseData(String cruiseFilePath) throws org.apache.thrift.TException;

    /**
     * Delete cruise plan.
     * For Node only.
     * (1) cruisePlanId - Cruise plan ID.
     * Return true if delete succeed, false if fail.
     * 
     * @param cruisePlanId
     */
    public boolean deleteCruisePlan(String cruisePlanId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void startCruisePlan(String cruisePlanId, List<String> segmentIdList, long deviceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startCruisePlan_call> resultHandler) throws org.apache.thrift.TException;

    public void pauseCruisePlan(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pauseCruisePlan_call> resultHandler) throws org.apache.thrift.TException;

    public void resumeCruisePlan(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.resumeCruisePlan_call> resultHandler) throws org.apache.thrift.TException;

    public void stopCruisePlan(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopCruisePlan_call> resultHandler) throws org.apache.thrift.TException;

    public void setSegmentPositions(String segmentId, List<GPSData> positionList, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setSegmentPositions_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteSegmentPositions(String segmentId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteSegmentPositions_call> resultHandler) throws org.apache.thrift.TException;

    public void getCurrentLocation(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCurrentLocation_call> resultHandler) throws org.apache.thrift.TException;

    public void getCurrentMileage(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCurrentMileage_call> resultHandler) throws org.apache.thrift.TException;

    public void getMeasureResult(long deviceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getMeasureResult_call> resultHandler) throws org.apache.thrift.TException;

    public void getCruiseSnapshotUrl(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCruiseSnapshotUrl_call> resultHandler) throws org.apache.thrift.TException;

    public void triggerCruiseEvent(String cruisePlanId, String startTimestamp, int duration, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.triggerCruiseEvent_call> resultHandler) throws org.apache.thrift.TException;

    public void getCruiseEventPlaybackVideoUrl(String cruisePlanId, String startTimestamp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCruiseEventPlaybackVideoUrl_call> resultHandler) throws org.apache.thrift.TException;

    public void getCruisePlaybackItem(String cruisePlanId, int index, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getCruisePlaybackItem_call> resultHandler) throws org.apache.thrift.TException;

    public void exportCruiseData(String cruisePlanId, List<String> segmentIdList, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.exportCruiseData_call> resultHandler) throws org.apache.thrift.TException;

    public void importCruiseData(String cruiseFilePath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.importCruiseData_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteCruisePlan(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteCruisePlan_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean startCruisePlan(String cruisePlanId, List<String> segmentIdList, long deviceId) throws org.apache.thrift.TException
    {
      send_startCruisePlan(cruisePlanId, segmentIdList, deviceId);
      return recv_startCruisePlan();
    }

    public void send_startCruisePlan(String cruisePlanId, List<String> segmentIdList, long deviceId) throws org.apache.thrift.TException
    {
      startCruisePlan_args args = new startCruisePlan_args();
      args.setCruisePlanId(cruisePlanId);
      args.setSegmentIdList(segmentIdList);
      args.setDeviceId(deviceId);
      sendBase("startCruisePlan", args);
    }

    public boolean recv_startCruisePlan() throws org.apache.thrift.TException
    {
      startCruisePlan_result result = new startCruisePlan_result();
      receiveBase(result, "startCruisePlan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startCruisePlan failed: unknown result");
    }

    public boolean pauseCruisePlan(String cruisePlanId) throws org.apache.thrift.TException
    {
      send_pauseCruisePlan(cruisePlanId);
      return recv_pauseCruisePlan();
    }

    public void send_pauseCruisePlan(String cruisePlanId) throws org.apache.thrift.TException
    {
      pauseCruisePlan_args args = new pauseCruisePlan_args();
      args.setCruisePlanId(cruisePlanId);
      sendBase("pauseCruisePlan", args);
    }

    public boolean recv_pauseCruisePlan() throws org.apache.thrift.TException
    {
      pauseCruisePlan_result result = new pauseCruisePlan_result();
      receiveBase(result, "pauseCruisePlan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pauseCruisePlan failed: unknown result");
    }

    public boolean resumeCruisePlan(String cruisePlanId) throws org.apache.thrift.TException
    {
      send_resumeCruisePlan(cruisePlanId);
      return recv_resumeCruisePlan();
    }

    public void send_resumeCruisePlan(String cruisePlanId) throws org.apache.thrift.TException
    {
      resumeCruisePlan_args args = new resumeCruisePlan_args();
      args.setCruisePlanId(cruisePlanId);
      sendBase("resumeCruisePlan", args);
    }

    public boolean recv_resumeCruisePlan() throws org.apache.thrift.TException
    {
      resumeCruisePlan_result result = new resumeCruisePlan_result();
      receiveBase(result, "resumeCruisePlan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resumeCruisePlan failed: unknown result");
    }

    public boolean stopCruisePlan(String cruisePlanId) throws org.apache.thrift.TException
    {
      send_stopCruisePlan(cruisePlanId);
      return recv_stopCruisePlan();
    }

    public void send_stopCruisePlan(String cruisePlanId) throws org.apache.thrift.TException
    {
      stopCruisePlan_args args = new stopCruisePlan_args();
      args.setCruisePlanId(cruisePlanId);
      sendBase("stopCruisePlan", args);
    }

    public boolean recv_stopCruisePlan() throws org.apache.thrift.TException
    {
      stopCruisePlan_result result = new stopCruisePlan_result();
      receiveBase(result, "stopCruisePlan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopCruisePlan failed: unknown result");
    }

    public boolean setSegmentPositions(String segmentId, List<GPSData> positionList) throws org.apache.thrift.TException
    {
      send_setSegmentPositions(segmentId, positionList);
      return recv_setSegmentPositions();
    }

    public void send_setSegmentPositions(String segmentId, List<GPSData> positionList) throws org.apache.thrift.TException
    {
      setSegmentPositions_args args = new setSegmentPositions_args();
      args.setSegmentId(segmentId);
      args.setPositionList(positionList);
      sendBase("setSegmentPositions", args);
    }

    public boolean recv_setSegmentPositions() throws org.apache.thrift.TException
    {
      setSegmentPositions_result result = new setSegmentPositions_result();
      receiveBase(result, "setSegmentPositions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setSegmentPositions failed: unknown result");
    }

    public boolean deleteSegmentPositions(String segmentId) throws org.apache.thrift.TException
    {
      send_deleteSegmentPositions(segmentId);
      return recv_deleteSegmentPositions();
    }

    public void send_deleteSegmentPositions(String segmentId) throws org.apache.thrift.TException
    {
      deleteSegmentPositions_args args = new deleteSegmentPositions_args();
      args.setSegmentId(segmentId);
      sendBase("deleteSegmentPositions", args);
    }

    public boolean recv_deleteSegmentPositions() throws org.apache.thrift.TException
    {
      deleteSegmentPositions_result result = new deleteSegmentPositions_result();
      receiveBase(result, "deleteSegmentPositions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSegmentPositions failed: unknown result");
    }

    public GPSData getCurrentLocation() throws org.apache.thrift.TException
    {
      send_getCurrentLocation();
      return recv_getCurrentLocation();
    }

    public void send_getCurrentLocation() throws org.apache.thrift.TException
    {
      getCurrentLocation_args args = new getCurrentLocation_args();
      sendBase("getCurrentLocation", args);
    }

    public GPSData recv_getCurrentLocation() throws org.apache.thrift.TException
    {
      getCurrentLocation_result result = new getCurrentLocation_result();
      receiveBase(result, "getCurrentLocation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentLocation failed: unknown result");
    }

    public double getCurrentMileage() throws org.apache.thrift.TException
    {
      send_getCurrentMileage();
      return recv_getCurrentMileage();
    }

    public void send_getCurrentMileage() throws org.apache.thrift.TException
    {
      getCurrentMileage_args args = new getCurrentMileage_args();
      sendBase("getCurrentMileage", args);
    }

    public double recv_getCurrentMileage() throws org.apache.thrift.TException
    {
      getCurrentMileage_result result = new getCurrentMileage_result();
      receiveBase(result, "getCurrentMileage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCurrentMileage failed: unknown result");
    }

    public CuriseMeasureData getMeasureResult(long deviceId) throws org.apache.thrift.TException
    {
      send_getMeasureResult(deviceId);
      return recv_getMeasureResult();
    }

    public void send_getMeasureResult(long deviceId) throws org.apache.thrift.TException
    {
      getMeasureResult_args args = new getMeasureResult_args();
      args.setDeviceId(deviceId);
      sendBase("getMeasureResult", args);
    }

    public CuriseMeasureData recv_getMeasureResult() throws org.apache.thrift.TException
    {
      getMeasureResult_result result = new getMeasureResult_result();
      receiveBase(result, "getMeasureResult");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMeasureResult failed: unknown result");
    }

    public String getCruiseSnapshotUrl(String cruisePlanId) throws org.apache.thrift.TException
    {
      send_getCruiseSnapshotUrl(cruisePlanId);
      return recv_getCruiseSnapshotUrl();
    }

    public void send_getCruiseSnapshotUrl(String cruisePlanId) throws org.apache.thrift.TException
    {
      getCruiseSnapshotUrl_args args = new getCruiseSnapshotUrl_args();
      args.setCruisePlanId(cruisePlanId);
      sendBase("getCruiseSnapshotUrl", args);
    }

    public String recv_getCruiseSnapshotUrl() throws org.apache.thrift.TException
    {
      getCruiseSnapshotUrl_result result = new getCruiseSnapshotUrl_result();
      receiveBase(result, "getCruiseSnapshotUrl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCruiseSnapshotUrl failed: unknown result");
    }

    public boolean triggerCruiseEvent(String cruisePlanId, String startTimestamp, int duration) throws org.apache.thrift.TException
    {
      send_triggerCruiseEvent(cruisePlanId, startTimestamp, duration);
      return recv_triggerCruiseEvent();
    }

    public void send_triggerCruiseEvent(String cruisePlanId, String startTimestamp, int duration) throws org.apache.thrift.TException
    {
      triggerCruiseEvent_args args = new triggerCruiseEvent_args();
      args.setCruisePlanId(cruisePlanId);
      args.setStartTimestamp(startTimestamp);
      args.setDuration(duration);
      sendBase("triggerCruiseEvent", args);
    }

    public boolean recv_triggerCruiseEvent() throws org.apache.thrift.TException
    {
      triggerCruiseEvent_result result = new triggerCruiseEvent_result();
      receiveBase(result, "triggerCruiseEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "triggerCruiseEvent failed: unknown result");
    }

    public String getCruiseEventPlaybackVideoUrl(String cruisePlanId, String startTimestamp) throws org.apache.thrift.TException
    {
      send_getCruiseEventPlaybackVideoUrl(cruisePlanId, startTimestamp);
      return recv_getCruiseEventPlaybackVideoUrl();
    }

    public void send_getCruiseEventPlaybackVideoUrl(String cruisePlanId, String startTimestamp) throws org.apache.thrift.TException
    {
      getCruiseEventPlaybackVideoUrl_args args = new getCruiseEventPlaybackVideoUrl_args();
      args.setCruisePlanId(cruisePlanId);
      args.setStartTimestamp(startTimestamp);
      sendBase("getCruiseEventPlaybackVideoUrl", args);
    }

    public String recv_getCruiseEventPlaybackVideoUrl() throws org.apache.thrift.TException
    {
      getCruiseEventPlaybackVideoUrl_result result = new getCruiseEventPlaybackVideoUrl_result();
      receiveBase(result, "getCruiseEventPlaybackVideoUrl");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCruiseEventPlaybackVideoUrl failed: unknown result");
    }

    public CruiseRecord getCruisePlaybackItem(String cruisePlanId, int index) throws org.apache.thrift.TException
    {
      send_getCruisePlaybackItem(cruisePlanId, index);
      return recv_getCruisePlaybackItem();
    }

    public void send_getCruisePlaybackItem(String cruisePlanId, int index) throws org.apache.thrift.TException
    {
      getCruisePlaybackItem_args args = new getCruisePlaybackItem_args();
      args.setCruisePlanId(cruisePlanId);
      args.setIndex(index);
      sendBase("getCruisePlaybackItem", args);
    }

    public CruiseRecord recv_getCruisePlaybackItem() throws org.apache.thrift.TException
    {
      getCruisePlaybackItem_result result = new getCruisePlaybackItem_result();
      receiveBase(result, "getCruisePlaybackItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCruisePlaybackItem failed: unknown result");
    }

    public String exportCruiseData(String cruisePlanId, List<String> segmentIdList) throws org.apache.thrift.TException
    {
      send_exportCruiseData(cruisePlanId, segmentIdList);
      return recv_exportCruiseData();
    }

    public void send_exportCruiseData(String cruisePlanId, List<String> segmentIdList) throws org.apache.thrift.TException
    {
      exportCruiseData_args args = new exportCruiseData_args();
      args.setCruisePlanId(cruisePlanId);
      args.setSegmentIdList(segmentIdList);
      sendBase("exportCruiseData", args);
    }

    public String recv_exportCruiseData() throws org.apache.thrift.TException
    {
      exportCruiseData_result result = new exportCruiseData_result();
      receiveBase(result, "exportCruiseData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exportCruiseData failed: unknown result");
    }

    public String importCruiseData(String cruiseFilePath) throws org.apache.thrift.TException
    {
      send_importCruiseData(cruiseFilePath);
      return recv_importCruiseData();
    }

    public void send_importCruiseData(String cruiseFilePath) throws org.apache.thrift.TException
    {
      importCruiseData_args args = new importCruiseData_args();
      args.setCruiseFilePath(cruiseFilePath);
      sendBase("importCruiseData", args);
    }

    public String recv_importCruiseData() throws org.apache.thrift.TException
    {
      importCruiseData_result result = new importCruiseData_result();
      receiveBase(result, "importCruiseData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "importCruiseData failed: unknown result");
    }

    public boolean deleteCruisePlan(String cruisePlanId) throws org.apache.thrift.TException
    {
      send_deleteCruisePlan(cruisePlanId);
      return recv_deleteCruisePlan();
    }

    public void send_deleteCruisePlan(String cruisePlanId) throws org.apache.thrift.TException
    {
      deleteCruisePlan_args args = new deleteCruisePlan_args();
      args.setCruisePlanId(cruisePlanId);
      sendBase("deleteCruisePlan", args);
    }

    public boolean recv_deleteCruisePlan() throws org.apache.thrift.TException
    {
      deleteCruisePlan_result result = new deleteCruisePlan_result();
      receiveBase(result, "deleteCruisePlan");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteCruisePlan failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void startCruisePlan(String cruisePlanId, List<String> segmentIdList, long deviceId, org.apache.thrift.async.AsyncMethodCallback<startCruisePlan_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startCruisePlan_call method_call = new startCruisePlan_call(cruisePlanId, segmentIdList, deviceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startCruisePlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruisePlanId;
      private List<String> segmentIdList;
      private long deviceId;
      public startCruisePlan_call(String cruisePlanId, List<String> segmentIdList, long deviceId, org.apache.thrift.async.AsyncMethodCallback<startCruisePlan_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruisePlanId = cruisePlanId;
        this.segmentIdList = segmentIdList;
        this.deviceId = deviceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startCruisePlan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startCruisePlan_args args = new startCruisePlan_args();
        args.setCruisePlanId(cruisePlanId);
        args.setSegmentIdList(segmentIdList);
        args.setDeviceId(deviceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startCruisePlan();
      }
    }

    public void pauseCruisePlan(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<pauseCruisePlan_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pauseCruisePlan_call method_call = new pauseCruisePlan_call(cruisePlanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pauseCruisePlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruisePlanId;
      public pauseCruisePlan_call(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<pauseCruisePlan_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruisePlanId = cruisePlanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pauseCruisePlan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pauseCruisePlan_args args = new pauseCruisePlan_args();
        args.setCruisePlanId(cruisePlanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pauseCruisePlan();
      }
    }

    public void resumeCruisePlan(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<resumeCruisePlan_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resumeCruisePlan_call method_call = new resumeCruisePlan_call(cruisePlanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resumeCruisePlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruisePlanId;
      public resumeCruisePlan_call(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<resumeCruisePlan_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruisePlanId = cruisePlanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resumeCruisePlan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resumeCruisePlan_args args = new resumeCruisePlan_args();
        args.setCruisePlanId(cruisePlanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resumeCruisePlan();
      }
    }

    public void stopCruisePlan(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<stopCruisePlan_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopCruisePlan_call method_call = new stopCruisePlan_call(cruisePlanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopCruisePlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruisePlanId;
      public stopCruisePlan_call(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<stopCruisePlan_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruisePlanId = cruisePlanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopCruisePlan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopCruisePlan_args args = new stopCruisePlan_args();
        args.setCruisePlanId(cruisePlanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopCruisePlan();
      }
    }

    public void setSegmentPositions(String segmentId, List<GPSData> positionList, org.apache.thrift.async.AsyncMethodCallback<setSegmentPositions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setSegmentPositions_call method_call = new setSegmentPositions_call(segmentId, positionList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setSegmentPositions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String segmentId;
      private List<GPSData> positionList;
      public setSegmentPositions_call(String segmentId, List<GPSData> positionList, org.apache.thrift.async.AsyncMethodCallback<setSegmentPositions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.segmentId = segmentId;
        this.positionList = positionList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setSegmentPositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setSegmentPositions_args args = new setSegmentPositions_args();
        args.setSegmentId(segmentId);
        args.setPositionList(positionList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setSegmentPositions();
      }
    }

    public void deleteSegmentPositions(String segmentId, org.apache.thrift.async.AsyncMethodCallback<deleteSegmentPositions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSegmentPositions_call method_call = new deleteSegmentPositions_call(segmentId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSegmentPositions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String segmentId;
      public deleteSegmentPositions_call(String segmentId, org.apache.thrift.async.AsyncMethodCallback<deleteSegmentPositions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.segmentId = segmentId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSegmentPositions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSegmentPositions_args args = new deleteSegmentPositions_args();
        args.setSegmentId(segmentId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSegmentPositions();
      }
    }

    public void getCurrentLocation(org.apache.thrift.async.AsyncMethodCallback<getCurrentLocation_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCurrentLocation_call method_call = new getCurrentLocation_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCurrentLocation_call(org.apache.thrift.async.AsyncMethodCallback<getCurrentLocation_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentLocation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentLocation_args args = new getCurrentLocation_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GPSData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentLocation();
      }
    }

    public void getCurrentMileage(org.apache.thrift.async.AsyncMethodCallback<getCurrentMileage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCurrentMileage_call method_call = new getCurrentMileage_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCurrentMileage_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getCurrentMileage_call(org.apache.thrift.async.AsyncMethodCallback<getCurrentMileage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCurrentMileage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCurrentMileage_args args = new getCurrentMileage_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCurrentMileage();
      }
    }

    public void getMeasureResult(long deviceId, org.apache.thrift.async.AsyncMethodCallback<getMeasureResult_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMeasureResult_call method_call = new getMeasureResult_call(deviceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMeasureResult_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long deviceId;
      public getMeasureResult_call(long deviceId, org.apache.thrift.async.AsyncMethodCallback<getMeasureResult_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMeasureResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMeasureResult_args args = new getMeasureResult_args();
        args.setDeviceId(deviceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CuriseMeasureData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMeasureResult();
      }
    }

    public void getCruiseSnapshotUrl(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<getCruiseSnapshotUrl_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCruiseSnapshotUrl_call method_call = new getCruiseSnapshotUrl_call(cruisePlanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCruiseSnapshotUrl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruisePlanId;
      public getCruiseSnapshotUrl_call(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<getCruiseSnapshotUrl_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruisePlanId = cruisePlanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCruiseSnapshotUrl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCruiseSnapshotUrl_args args = new getCruiseSnapshotUrl_args();
        args.setCruisePlanId(cruisePlanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCruiseSnapshotUrl();
      }
    }

    public void triggerCruiseEvent(String cruisePlanId, String startTimestamp, int duration, org.apache.thrift.async.AsyncMethodCallback<triggerCruiseEvent_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      triggerCruiseEvent_call method_call = new triggerCruiseEvent_call(cruisePlanId, startTimestamp, duration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class triggerCruiseEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruisePlanId;
      private String startTimestamp;
      private int duration;
      public triggerCruiseEvent_call(String cruisePlanId, String startTimestamp, int duration, org.apache.thrift.async.AsyncMethodCallback<triggerCruiseEvent_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruisePlanId = cruisePlanId;
        this.startTimestamp = startTimestamp;
        this.duration = duration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("triggerCruiseEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        triggerCruiseEvent_args args = new triggerCruiseEvent_args();
        args.setCruisePlanId(cruisePlanId);
        args.setStartTimestamp(startTimestamp);
        args.setDuration(duration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_triggerCruiseEvent();
      }
    }

    public void getCruiseEventPlaybackVideoUrl(String cruisePlanId, String startTimestamp, org.apache.thrift.async.AsyncMethodCallback<getCruiseEventPlaybackVideoUrl_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCruiseEventPlaybackVideoUrl_call method_call = new getCruiseEventPlaybackVideoUrl_call(cruisePlanId, startTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCruiseEventPlaybackVideoUrl_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruisePlanId;
      private String startTimestamp;
      public getCruiseEventPlaybackVideoUrl_call(String cruisePlanId, String startTimestamp, org.apache.thrift.async.AsyncMethodCallback<getCruiseEventPlaybackVideoUrl_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruisePlanId = cruisePlanId;
        this.startTimestamp = startTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCruiseEventPlaybackVideoUrl", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCruiseEventPlaybackVideoUrl_args args = new getCruiseEventPlaybackVideoUrl_args();
        args.setCruisePlanId(cruisePlanId);
        args.setStartTimestamp(startTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCruiseEventPlaybackVideoUrl();
      }
    }

    public void getCruisePlaybackItem(String cruisePlanId, int index, org.apache.thrift.async.AsyncMethodCallback<getCruisePlaybackItem_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCruisePlaybackItem_call method_call = new getCruisePlaybackItem_call(cruisePlanId, index, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCruisePlaybackItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruisePlanId;
      private int index;
      public getCruisePlaybackItem_call(String cruisePlanId, int index, org.apache.thrift.async.AsyncMethodCallback<getCruisePlaybackItem_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruisePlanId = cruisePlanId;
        this.index = index;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCruisePlaybackItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCruisePlaybackItem_args args = new getCruisePlaybackItem_args();
        args.setCruisePlanId(cruisePlanId);
        args.setIndex(index);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CruiseRecord getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCruisePlaybackItem();
      }
    }

    public void exportCruiseData(String cruisePlanId, List<String> segmentIdList, org.apache.thrift.async.AsyncMethodCallback<exportCruiseData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exportCruiseData_call method_call = new exportCruiseData_call(cruisePlanId, segmentIdList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exportCruiseData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruisePlanId;
      private List<String> segmentIdList;
      public exportCruiseData_call(String cruisePlanId, List<String> segmentIdList, org.apache.thrift.async.AsyncMethodCallback<exportCruiseData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruisePlanId = cruisePlanId;
        this.segmentIdList = segmentIdList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exportCruiseData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exportCruiseData_args args = new exportCruiseData_args();
        args.setCruisePlanId(cruisePlanId);
        args.setSegmentIdList(segmentIdList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exportCruiseData();
      }
    }

    public void importCruiseData(String cruiseFilePath, org.apache.thrift.async.AsyncMethodCallback<importCruiseData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      importCruiseData_call method_call = new importCruiseData_call(cruiseFilePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class importCruiseData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruiseFilePath;
      public importCruiseData_call(String cruiseFilePath, org.apache.thrift.async.AsyncMethodCallback<importCruiseData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruiseFilePath = cruiseFilePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("importCruiseData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        importCruiseData_args args = new importCruiseData_args();
        args.setCruiseFilePath(cruiseFilePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_importCruiseData();
      }
    }

    public void deleteCruisePlan(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<deleteCruisePlan_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCruisePlan_call method_call = new deleteCruisePlan_call(cruisePlanId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCruisePlan_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cruisePlanId;
      public deleteCruisePlan_call(String cruisePlanId, org.apache.thrift.async.AsyncMethodCallback<deleteCruisePlan_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cruisePlanId = cruisePlanId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCruisePlan", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCruisePlan_args args = new deleteCruisePlan_args();
        args.setCruisePlanId(cruisePlanId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteCruisePlan();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("startCruisePlan", new startCruisePlan());
      processMap.put("pauseCruisePlan", new pauseCruisePlan());
      processMap.put("resumeCruisePlan", new resumeCruisePlan());
      processMap.put("stopCruisePlan", new stopCruisePlan());
      processMap.put("setSegmentPositions", new setSegmentPositions());
      processMap.put("deleteSegmentPositions", new deleteSegmentPositions());
      processMap.put("getCurrentLocation", new getCurrentLocation());
      processMap.put("getCurrentMileage", new getCurrentMileage());
      processMap.put("getMeasureResult", new getMeasureResult());
      processMap.put("getCruiseSnapshotUrl", new getCruiseSnapshotUrl());
      processMap.put("triggerCruiseEvent", new triggerCruiseEvent());
      processMap.put("getCruiseEventPlaybackVideoUrl", new getCruiseEventPlaybackVideoUrl());
      processMap.put("getCruisePlaybackItem", new getCruisePlaybackItem());
      processMap.put("exportCruiseData", new exportCruiseData());
      processMap.put("importCruiseData", new importCruiseData());
      processMap.put("deleteCruisePlan", new deleteCruisePlan());
      return processMap;
    }

    private static class startCruisePlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startCruisePlan_args> {
      public startCruisePlan() {
        super("startCruisePlan");
      }

      protected startCruisePlan_args getEmptyArgsInstance() {
        return new startCruisePlan_args();
      }

      protected startCruisePlan_result getResult(I iface, startCruisePlan_args args) throws org.apache.thrift.TException {
        startCruisePlan_result result = new startCruisePlan_result();
        result.success = iface.startCruisePlan(args.cruisePlanId, args.segmentIdList, args.deviceId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class pauseCruisePlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pauseCruisePlan_args> {
      public pauseCruisePlan() {
        super("pauseCruisePlan");
      }

      protected pauseCruisePlan_args getEmptyArgsInstance() {
        return new pauseCruisePlan_args();
      }

      protected pauseCruisePlan_result getResult(I iface, pauseCruisePlan_args args) throws org.apache.thrift.TException {
        pauseCruisePlan_result result = new pauseCruisePlan_result();
        result.success = iface.pauseCruisePlan(args.cruisePlanId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class resumeCruisePlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resumeCruisePlan_args> {
      public resumeCruisePlan() {
        super("resumeCruisePlan");
      }

      protected resumeCruisePlan_args getEmptyArgsInstance() {
        return new resumeCruisePlan_args();
      }

      protected resumeCruisePlan_result getResult(I iface, resumeCruisePlan_args args) throws org.apache.thrift.TException {
        resumeCruisePlan_result result = new resumeCruisePlan_result();
        result.success = iface.resumeCruisePlan(args.cruisePlanId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class stopCruisePlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopCruisePlan_args> {
      public stopCruisePlan() {
        super("stopCruisePlan");
      }

      protected stopCruisePlan_args getEmptyArgsInstance() {
        return new stopCruisePlan_args();
      }

      protected stopCruisePlan_result getResult(I iface, stopCruisePlan_args args) throws org.apache.thrift.TException {
        stopCruisePlan_result result = new stopCruisePlan_result();
        result.success = iface.stopCruisePlan(args.cruisePlanId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class setSegmentPositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setSegmentPositions_args> {
      public setSegmentPositions() {
        super("setSegmentPositions");
      }

      protected setSegmentPositions_args getEmptyArgsInstance() {
        return new setSegmentPositions_args();
      }

      protected setSegmentPositions_result getResult(I iface, setSegmentPositions_args args) throws org.apache.thrift.TException {
        setSegmentPositions_result result = new setSegmentPositions_result();
        result.success = iface.setSegmentPositions(args.segmentId, args.positionList);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class deleteSegmentPositions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSegmentPositions_args> {
      public deleteSegmentPositions() {
        super("deleteSegmentPositions");
      }

      protected deleteSegmentPositions_args getEmptyArgsInstance() {
        return new deleteSegmentPositions_args();
      }

      protected deleteSegmentPositions_result getResult(I iface, deleteSegmentPositions_args args) throws org.apache.thrift.TException {
        deleteSegmentPositions_result result = new deleteSegmentPositions_result();
        result.success = iface.deleteSegmentPositions(args.segmentId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getCurrentLocation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentLocation_args> {
      public getCurrentLocation() {
        super("getCurrentLocation");
      }

      protected getCurrentLocation_args getEmptyArgsInstance() {
        return new getCurrentLocation_args();
      }

      protected getCurrentLocation_result getResult(I iface, getCurrentLocation_args args) throws org.apache.thrift.TException {
        getCurrentLocation_result result = new getCurrentLocation_result();
        result.success = iface.getCurrentLocation();
        return result;
      }
    }

    private static class getCurrentMileage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCurrentMileage_args> {
      public getCurrentMileage() {
        super("getCurrentMileage");
      }

      protected getCurrentMileage_args getEmptyArgsInstance() {
        return new getCurrentMileage_args();
      }

      protected getCurrentMileage_result getResult(I iface, getCurrentMileage_args args) throws org.apache.thrift.TException {
        getCurrentMileage_result result = new getCurrentMileage_result();
        result.success = iface.getCurrentMileage();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getMeasureResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMeasureResult_args> {
      public getMeasureResult() {
        super("getMeasureResult");
      }

      protected getMeasureResult_args getEmptyArgsInstance() {
        return new getMeasureResult_args();
      }

      protected getMeasureResult_result getResult(I iface, getMeasureResult_args args) throws org.apache.thrift.TException {
        getMeasureResult_result result = new getMeasureResult_result();
        result.success = iface.getMeasureResult(args.deviceId);
        return result;
      }
    }

    private static class getCruiseSnapshotUrl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCruiseSnapshotUrl_args> {
      public getCruiseSnapshotUrl() {
        super("getCruiseSnapshotUrl");
      }

      protected getCruiseSnapshotUrl_args getEmptyArgsInstance() {
        return new getCruiseSnapshotUrl_args();
      }

      protected getCruiseSnapshotUrl_result getResult(I iface, getCruiseSnapshotUrl_args args) throws org.apache.thrift.TException {
        getCruiseSnapshotUrl_result result = new getCruiseSnapshotUrl_result();
        result.success = iface.getCruiseSnapshotUrl(args.cruisePlanId);
        return result;
      }
    }

    private static class triggerCruiseEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, triggerCruiseEvent_args> {
      public triggerCruiseEvent() {
        super("triggerCruiseEvent");
      }

      protected triggerCruiseEvent_args getEmptyArgsInstance() {
        return new triggerCruiseEvent_args();
      }

      protected triggerCruiseEvent_result getResult(I iface, triggerCruiseEvent_args args) throws org.apache.thrift.TException {
        triggerCruiseEvent_result result = new triggerCruiseEvent_result();
        result.success = iface.triggerCruiseEvent(args.cruisePlanId, args.startTimestamp, args.duration);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class getCruiseEventPlaybackVideoUrl<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCruiseEventPlaybackVideoUrl_args> {
      public getCruiseEventPlaybackVideoUrl() {
        super("getCruiseEventPlaybackVideoUrl");
      }

      protected getCruiseEventPlaybackVideoUrl_args getEmptyArgsInstance() {
        return new getCruiseEventPlaybackVideoUrl_args();
      }

      protected getCruiseEventPlaybackVideoUrl_result getResult(I iface, getCruiseEventPlaybackVideoUrl_args args) throws org.apache.thrift.TException {
        getCruiseEventPlaybackVideoUrl_result result = new getCruiseEventPlaybackVideoUrl_result();
        result.success = iface.getCruiseEventPlaybackVideoUrl(args.cruisePlanId, args.startTimestamp);
        return result;
      }
    }

    private static class getCruisePlaybackItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCruisePlaybackItem_args> {
      public getCruisePlaybackItem() {
        super("getCruisePlaybackItem");
      }

      protected getCruisePlaybackItem_args getEmptyArgsInstance() {
        return new getCruisePlaybackItem_args();
      }

      protected getCruisePlaybackItem_result getResult(I iface, getCruisePlaybackItem_args args) throws org.apache.thrift.TException {
        getCruisePlaybackItem_result result = new getCruisePlaybackItem_result();
        result.success = iface.getCruisePlaybackItem(args.cruisePlanId, args.index);
        return result;
      }
    }

    private static class exportCruiseData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exportCruiseData_args> {
      public exportCruiseData() {
        super("exportCruiseData");
      }

      protected exportCruiseData_args getEmptyArgsInstance() {
        return new exportCruiseData_args();
      }

      protected exportCruiseData_result getResult(I iface, exportCruiseData_args args) throws org.apache.thrift.TException {
        exportCruiseData_result result = new exportCruiseData_result();
        result.success = iface.exportCruiseData(args.cruisePlanId, args.segmentIdList);
        return result;
      }
    }

    private static class importCruiseData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, importCruiseData_args> {
      public importCruiseData() {
        super("importCruiseData");
      }

      protected importCruiseData_args getEmptyArgsInstance() {
        return new importCruiseData_args();
      }

      protected importCruiseData_result getResult(I iface, importCruiseData_args args) throws org.apache.thrift.TException {
        importCruiseData_result result = new importCruiseData_result();
        result.success = iface.importCruiseData(args.cruiseFilePath);
        return result;
      }
    }

    private static class deleteCruisePlan<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCruisePlan_args> {
      public deleteCruisePlan() {
        super("deleteCruisePlan");
      }

      protected deleteCruisePlan_args getEmptyArgsInstance() {
        return new deleteCruisePlan_args();
      }

      protected deleteCruisePlan_result getResult(I iface, deleteCruisePlan_args args) throws org.apache.thrift.TException {
        deleteCruisePlan_result result = new deleteCruisePlan_result();
        result.success = iface.deleteCruisePlan(args.cruisePlanId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class startCruisePlan_args implements org.apache.thrift.TBase<startCruisePlan_args, startCruisePlan_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startCruisePlan_args");

    private static final org.apache.thrift.protocol.TField CRUISE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cruisePlanId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEGMENT_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentIdList", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startCruisePlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startCruisePlan_argsTupleSchemeFactory());
    }

    public String cruisePlanId; // required
    public List<String> segmentIdList; // required
    public long deviceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_PLAN_ID((short)1, "cruisePlanId"),
      SEGMENT_ID_LIST((short)2, "segmentIdList"),
      DEVICE_ID((short)3, "deviceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_PLAN_ID
            return CRUISE_PLAN_ID;
          case 2: // SEGMENT_ID_LIST
            return SEGMENT_ID_LIST;
          case 3: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("cruisePlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEGMENT_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("segmentIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startCruisePlan_args.class, metaDataMap);
    }

    public startCruisePlan_args() {
    }

    public startCruisePlan_args(
      String cruisePlanId,
      List<String> segmentIdList,
      long deviceId)
    {
      this();
      this.cruisePlanId = cruisePlanId;
      this.segmentIdList = segmentIdList;
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startCruisePlan_args(startCruisePlan_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetCruisePlanId()) {
        this.cruisePlanId = other.cruisePlanId;
      }
      if (other.isSetSegmentIdList()) {
        List<String> __this__segmentIdList = new ArrayList<String>();
        for (String other_element : other.segmentIdList) {
          __this__segmentIdList.add(other_element);
        }
        this.segmentIdList = __this__segmentIdList;
      }
      this.deviceId = other.deviceId;
    }

    public startCruisePlan_args deepCopy() {
      return new startCruisePlan_args(this);
    }

    @Override
    public void clear() {
      this.cruisePlanId = null;
      this.segmentIdList = null;
      setDeviceIdIsSet(false);
      this.deviceId = 0;
    }

    public String getCruisePlanId() {
      return this.cruisePlanId;
    }

    public startCruisePlan_args setCruisePlanId(String cruisePlanId) {
      this.cruisePlanId = cruisePlanId;
      return this;
    }

    public void unsetCruisePlanId() {
      this.cruisePlanId = null;
    }

    /** Returns true if field cruisePlanId is set (has been assigned a value) and false otherwise */
    public boolean isSetCruisePlanId() {
      return this.cruisePlanId != null;
    }

    public void setCruisePlanIdIsSet(boolean value) {
      if (!value) {
        this.cruisePlanId = null;
      }
    }

    public int getSegmentIdListSize() {
      return (this.segmentIdList == null) ? 0 : this.segmentIdList.size();
    }

    public java.util.Iterator<String> getSegmentIdListIterator() {
      return (this.segmentIdList == null) ? null : this.segmentIdList.iterator();
    }

    public void addToSegmentIdList(String elem) {
      if (this.segmentIdList == null) {
        this.segmentIdList = new ArrayList<String>();
      }
      this.segmentIdList.add(elem);
    }

    public List<String> getSegmentIdList() {
      return this.segmentIdList;
    }

    public startCruisePlan_args setSegmentIdList(List<String> segmentIdList) {
      this.segmentIdList = segmentIdList;
      return this;
    }

    public void unsetSegmentIdList() {
      this.segmentIdList = null;
    }

    /** Returns true if field segmentIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetSegmentIdList() {
      return this.segmentIdList != null;
    }

    public void setSegmentIdListIsSet(boolean value) {
      if (!value) {
        this.segmentIdList = null;
      }
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public startCruisePlan_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_PLAN_ID:
        if (value == null) {
          unsetCruisePlanId();
        } else {
          setCruisePlanId((String)value);
        }
        break;

      case SEGMENT_ID_LIST:
        if (value == null) {
          unsetSegmentIdList();
        } else {
          setSegmentIdList((List<String>)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_PLAN_ID:
        return getCruisePlanId();

      case SEGMENT_ID_LIST:
        return getSegmentIdList();

      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_PLAN_ID:
        return isSetCruisePlanId();
      case SEGMENT_ID_LIST:
        return isSetSegmentIdList();
      case DEVICE_ID:
        return isSetDeviceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startCruisePlan_args)
        return this.equals((startCruisePlan_args)that);
      return false;
    }

    public boolean equals(startCruisePlan_args that) {
      if (that == null)
        return false;

      boolean this_present_cruisePlanId = true && this.isSetCruisePlanId();
      boolean that_present_cruisePlanId = true && that.isSetCruisePlanId();
      if (this_present_cruisePlanId || that_present_cruisePlanId) {
        if (!(this_present_cruisePlanId && that_present_cruisePlanId))
          return false;
        if (!this.cruisePlanId.equals(that.cruisePlanId))
          return false;
      }

      boolean this_present_segmentIdList = true && this.isSetSegmentIdList();
      boolean that_present_segmentIdList = true && that.isSetSegmentIdList();
      if (this_present_segmentIdList || that_present_segmentIdList) {
        if (!(this_present_segmentIdList && that_present_segmentIdList))
          return false;
        if (!this.segmentIdList.equals(that.segmentIdList))
          return false;
      }

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startCruisePlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startCruisePlan_args typedOther = (startCruisePlan_args)other;

      lastComparison = Boolean.valueOf(isSetCruisePlanId()).compareTo(typedOther.isSetCruisePlanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruisePlanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruisePlanId, typedOther.cruisePlanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSegmentIdList()).compareTo(typedOther.isSetSegmentIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSegmentIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentIdList, typedOther.segmentIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startCruisePlan_args(");
      boolean first = true;

      sb.append("cruisePlanId:");
      if (this.cruisePlanId == null) {
        sb.append("null");
      } else {
        sb.append(this.cruisePlanId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("segmentIdList:");
      if (this.segmentIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.segmentIdList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startCruisePlan_argsStandardSchemeFactory implements SchemeFactory {
      public startCruisePlan_argsStandardScheme getScheme() {
        return new startCruisePlan_argsStandardScheme();
      }
    }

    private static class startCruisePlan_argsStandardScheme extends StandardScheme<startCruisePlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startCruisePlan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruisePlanId = iprot.readString();
                struct.setCruisePlanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEGMENT_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.segmentIdList = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.segmentIdList.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSegmentIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startCruisePlan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruisePlanId != null) {
          oprot.writeFieldBegin(CRUISE_PLAN_ID_FIELD_DESC);
          oprot.writeString(struct.cruisePlanId);
          oprot.writeFieldEnd();
        }
        if (struct.segmentIdList != null) {
          oprot.writeFieldBegin(SEGMENT_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.segmentIdList.size()));
            for (String _iter3 : struct.segmentIdList)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startCruisePlan_argsTupleSchemeFactory implements SchemeFactory {
      public startCruisePlan_argsTupleScheme getScheme() {
        return new startCruisePlan_argsTupleScheme();
      }
    }

    private static class startCruisePlan_argsTupleScheme extends TupleScheme<startCruisePlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startCruisePlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruisePlanId()) {
          optionals.set(0);
        }
        if (struct.isSetSegmentIdList()) {
          optionals.set(1);
        }
        if (struct.isSetDeviceId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCruisePlanId()) {
          oprot.writeString(struct.cruisePlanId);
        }
        if (struct.isSetSegmentIdList()) {
          {
            oprot.writeI32(struct.segmentIdList.size());
            for (String _iter4 : struct.segmentIdList)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startCruisePlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cruisePlanId = iprot.readString();
          struct.setCruisePlanIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.segmentIdList = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.segmentIdList.add(_elem7);
            }
          }
          struct.setSegmentIdListIsSet(true);
        }
        if (incoming.get(2)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
      }
    }

  }

  public static class startCruisePlan_result implements org.apache.thrift.TBase<startCruisePlan_result, startCruisePlan_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startCruisePlan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startCruisePlan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startCruisePlan_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startCruisePlan_result.class, metaDataMap);
    }

    public startCruisePlan_result() {
    }

    public startCruisePlan_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startCruisePlan_result(startCruisePlan_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public startCruisePlan_result deepCopy() {
      return new startCruisePlan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public startCruisePlan_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startCruisePlan_result)
        return this.equals((startCruisePlan_result)that);
      return false;
    }

    public boolean equals(startCruisePlan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startCruisePlan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startCruisePlan_result typedOther = (startCruisePlan_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startCruisePlan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startCruisePlan_resultStandardSchemeFactory implements SchemeFactory {
      public startCruisePlan_resultStandardScheme getScheme() {
        return new startCruisePlan_resultStandardScheme();
      }
    }

    private static class startCruisePlan_resultStandardScheme extends StandardScheme<startCruisePlan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startCruisePlan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startCruisePlan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startCruisePlan_resultTupleSchemeFactory implements SchemeFactory {
      public startCruisePlan_resultTupleScheme getScheme() {
        return new startCruisePlan_resultTupleScheme();
      }
    }

    private static class startCruisePlan_resultTupleScheme extends TupleScheme<startCruisePlan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startCruisePlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startCruisePlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pauseCruisePlan_args implements org.apache.thrift.TBase<pauseCruisePlan_args, pauseCruisePlan_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseCruisePlan_args");

    private static final org.apache.thrift.protocol.TField CRUISE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cruisePlanId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pauseCruisePlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pauseCruisePlan_argsTupleSchemeFactory());
    }

    public String cruisePlanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_PLAN_ID((short)1, "cruisePlanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_PLAN_ID
            return CRUISE_PLAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("cruisePlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseCruisePlan_args.class, metaDataMap);
    }

    public pauseCruisePlan_args() {
    }

    public pauseCruisePlan_args(
      String cruisePlanId)
    {
      this();
      this.cruisePlanId = cruisePlanId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pauseCruisePlan_args(pauseCruisePlan_args other) {
      if (other.isSetCruisePlanId()) {
        this.cruisePlanId = other.cruisePlanId;
      }
    }

    public pauseCruisePlan_args deepCopy() {
      return new pauseCruisePlan_args(this);
    }

    @Override
    public void clear() {
      this.cruisePlanId = null;
    }

    public String getCruisePlanId() {
      return this.cruisePlanId;
    }

    public pauseCruisePlan_args setCruisePlanId(String cruisePlanId) {
      this.cruisePlanId = cruisePlanId;
      return this;
    }

    public void unsetCruisePlanId() {
      this.cruisePlanId = null;
    }

    /** Returns true if field cruisePlanId is set (has been assigned a value) and false otherwise */
    public boolean isSetCruisePlanId() {
      return this.cruisePlanId != null;
    }

    public void setCruisePlanIdIsSet(boolean value) {
      if (!value) {
        this.cruisePlanId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_PLAN_ID:
        if (value == null) {
          unsetCruisePlanId();
        } else {
          setCruisePlanId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_PLAN_ID:
        return getCruisePlanId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_PLAN_ID:
        return isSetCruisePlanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pauseCruisePlan_args)
        return this.equals((pauseCruisePlan_args)that);
      return false;
    }

    public boolean equals(pauseCruisePlan_args that) {
      if (that == null)
        return false;

      boolean this_present_cruisePlanId = true && this.isSetCruisePlanId();
      boolean that_present_cruisePlanId = true && that.isSetCruisePlanId();
      if (this_present_cruisePlanId || that_present_cruisePlanId) {
        if (!(this_present_cruisePlanId && that_present_cruisePlanId))
          return false;
        if (!this.cruisePlanId.equals(that.cruisePlanId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pauseCruisePlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pauseCruisePlan_args typedOther = (pauseCruisePlan_args)other;

      lastComparison = Boolean.valueOf(isSetCruisePlanId()).compareTo(typedOther.isSetCruisePlanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruisePlanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruisePlanId, typedOther.cruisePlanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pauseCruisePlan_args(");
      boolean first = true;

      sb.append("cruisePlanId:");
      if (this.cruisePlanId == null) {
        sb.append("null");
      } else {
        sb.append(this.cruisePlanId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pauseCruisePlan_argsStandardSchemeFactory implements SchemeFactory {
      public pauseCruisePlan_argsStandardScheme getScheme() {
        return new pauseCruisePlan_argsStandardScheme();
      }
    }

    private static class pauseCruisePlan_argsStandardScheme extends StandardScheme<pauseCruisePlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pauseCruisePlan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruisePlanId = iprot.readString();
                struct.setCruisePlanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pauseCruisePlan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruisePlanId != null) {
          oprot.writeFieldBegin(CRUISE_PLAN_ID_FIELD_DESC);
          oprot.writeString(struct.cruisePlanId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pauseCruisePlan_argsTupleSchemeFactory implements SchemeFactory {
      public pauseCruisePlan_argsTupleScheme getScheme() {
        return new pauseCruisePlan_argsTupleScheme();
      }
    }

    private static class pauseCruisePlan_argsTupleScheme extends TupleScheme<pauseCruisePlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pauseCruisePlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruisePlanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCruisePlanId()) {
          oprot.writeString(struct.cruisePlanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pauseCruisePlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cruisePlanId = iprot.readString();
          struct.setCruisePlanIdIsSet(true);
        }
      }
    }

  }

  public static class pauseCruisePlan_result implements org.apache.thrift.TBase<pauseCruisePlan_result, pauseCruisePlan_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pauseCruisePlan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pauseCruisePlan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pauseCruisePlan_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pauseCruisePlan_result.class, metaDataMap);
    }

    public pauseCruisePlan_result() {
    }

    public pauseCruisePlan_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pauseCruisePlan_result(pauseCruisePlan_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public pauseCruisePlan_result deepCopy() {
      return new pauseCruisePlan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public pauseCruisePlan_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pauseCruisePlan_result)
        return this.equals((pauseCruisePlan_result)that);
      return false;
    }

    public boolean equals(pauseCruisePlan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pauseCruisePlan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pauseCruisePlan_result typedOther = (pauseCruisePlan_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pauseCruisePlan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pauseCruisePlan_resultStandardSchemeFactory implements SchemeFactory {
      public pauseCruisePlan_resultStandardScheme getScheme() {
        return new pauseCruisePlan_resultStandardScheme();
      }
    }

    private static class pauseCruisePlan_resultStandardScheme extends StandardScheme<pauseCruisePlan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pauseCruisePlan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pauseCruisePlan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pauseCruisePlan_resultTupleSchemeFactory implements SchemeFactory {
      public pauseCruisePlan_resultTupleScheme getScheme() {
        return new pauseCruisePlan_resultTupleScheme();
      }
    }

    private static class pauseCruisePlan_resultTupleScheme extends TupleScheme<pauseCruisePlan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pauseCruisePlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pauseCruisePlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resumeCruisePlan_args implements org.apache.thrift.TBase<resumeCruisePlan_args, resumeCruisePlan_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeCruisePlan_args");

    private static final org.apache.thrift.protocol.TField CRUISE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cruisePlanId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resumeCruisePlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resumeCruisePlan_argsTupleSchemeFactory());
    }

    public String cruisePlanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_PLAN_ID((short)1, "cruisePlanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_PLAN_ID
            return CRUISE_PLAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("cruisePlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeCruisePlan_args.class, metaDataMap);
    }

    public resumeCruisePlan_args() {
    }

    public resumeCruisePlan_args(
      String cruisePlanId)
    {
      this();
      this.cruisePlanId = cruisePlanId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeCruisePlan_args(resumeCruisePlan_args other) {
      if (other.isSetCruisePlanId()) {
        this.cruisePlanId = other.cruisePlanId;
      }
    }

    public resumeCruisePlan_args deepCopy() {
      return new resumeCruisePlan_args(this);
    }

    @Override
    public void clear() {
      this.cruisePlanId = null;
    }

    public String getCruisePlanId() {
      return this.cruisePlanId;
    }

    public resumeCruisePlan_args setCruisePlanId(String cruisePlanId) {
      this.cruisePlanId = cruisePlanId;
      return this;
    }

    public void unsetCruisePlanId() {
      this.cruisePlanId = null;
    }

    /** Returns true if field cruisePlanId is set (has been assigned a value) and false otherwise */
    public boolean isSetCruisePlanId() {
      return this.cruisePlanId != null;
    }

    public void setCruisePlanIdIsSet(boolean value) {
      if (!value) {
        this.cruisePlanId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_PLAN_ID:
        if (value == null) {
          unsetCruisePlanId();
        } else {
          setCruisePlanId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_PLAN_ID:
        return getCruisePlanId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_PLAN_ID:
        return isSetCruisePlanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resumeCruisePlan_args)
        return this.equals((resumeCruisePlan_args)that);
      return false;
    }

    public boolean equals(resumeCruisePlan_args that) {
      if (that == null)
        return false;

      boolean this_present_cruisePlanId = true && this.isSetCruisePlanId();
      boolean that_present_cruisePlanId = true && that.isSetCruisePlanId();
      if (this_present_cruisePlanId || that_present_cruisePlanId) {
        if (!(this_present_cruisePlanId && that_present_cruisePlanId))
          return false;
        if (!this.cruisePlanId.equals(that.cruisePlanId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resumeCruisePlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resumeCruisePlan_args typedOther = (resumeCruisePlan_args)other;

      lastComparison = Boolean.valueOf(isSetCruisePlanId()).compareTo(typedOther.isSetCruisePlanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruisePlanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruisePlanId, typedOther.cruisePlanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resumeCruisePlan_args(");
      boolean first = true;

      sb.append("cruisePlanId:");
      if (this.cruisePlanId == null) {
        sb.append("null");
      } else {
        sb.append(this.cruisePlanId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeCruisePlan_argsStandardSchemeFactory implements SchemeFactory {
      public resumeCruisePlan_argsStandardScheme getScheme() {
        return new resumeCruisePlan_argsStandardScheme();
      }
    }

    private static class resumeCruisePlan_argsStandardScheme extends StandardScheme<resumeCruisePlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeCruisePlan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruisePlanId = iprot.readString();
                struct.setCruisePlanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeCruisePlan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruisePlanId != null) {
          oprot.writeFieldBegin(CRUISE_PLAN_ID_FIELD_DESC);
          oprot.writeString(struct.cruisePlanId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeCruisePlan_argsTupleSchemeFactory implements SchemeFactory {
      public resumeCruisePlan_argsTupleScheme getScheme() {
        return new resumeCruisePlan_argsTupleScheme();
      }
    }

    private static class resumeCruisePlan_argsTupleScheme extends TupleScheme<resumeCruisePlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resumeCruisePlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruisePlanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCruisePlanId()) {
          oprot.writeString(struct.cruisePlanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resumeCruisePlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cruisePlanId = iprot.readString();
          struct.setCruisePlanIdIsSet(true);
        }
      }
    }

  }

  public static class resumeCruisePlan_result implements org.apache.thrift.TBase<resumeCruisePlan_result, resumeCruisePlan_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeCruisePlan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resumeCruisePlan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resumeCruisePlan_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeCruisePlan_result.class, metaDataMap);
    }

    public resumeCruisePlan_result() {
    }

    public resumeCruisePlan_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeCruisePlan_result(resumeCruisePlan_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public resumeCruisePlan_result deepCopy() {
      return new resumeCruisePlan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public resumeCruisePlan_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resumeCruisePlan_result)
        return this.equals((resumeCruisePlan_result)that);
      return false;
    }

    public boolean equals(resumeCruisePlan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resumeCruisePlan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resumeCruisePlan_result typedOther = (resumeCruisePlan_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resumeCruisePlan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeCruisePlan_resultStandardSchemeFactory implements SchemeFactory {
      public resumeCruisePlan_resultStandardScheme getScheme() {
        return new resumeCruisePlan_resultStandardScheme();
      }
    }

    private static class resumeCruisePlan_resultStandardScheme extends StandardScheme<resumeCruisePlan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeCruisePlan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeCruisePlan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeCruisePlan_resultTupleSchemeFactory implements SchemeFactory {
      public resumeCruisePlan_resultTupleScheme getScheme() {
        return new resumeCruisePlan_resultTupleScheme();
      }
    }

    private static class resumeCruisePlan_resultTupleScheme extends TupleScheme<resumeCruisePlan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resumeCruisePlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resumeCruisePlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stopCruisePlan_args implements org.apache.thrift.TBase<stopCruisePlan_args, stopCruisePlan_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopCruisePlan_args");

    private static final org.apache.thrift.protocol.TField CRUISE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cruisePlanId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopCruisePlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopCruisePlan_argsTupleSchemeFactory());
    }

    public String cruisePlanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_PLAN_ID((short)1, "cruisePlanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_PLAN_ID
            return CRUISE_PLAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("cruisePlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopCruisePlan_args.class, metaDataMap);
    }

    public stopCruisePlan_args() {
    }

    public stopCruisePlan_args(
      String cruisePlanId)
    {
      this();
      this.cruisePlanId = cruisePlanId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopCruisePlan_args(stopCruisePlan_args other) {
      if (other.isSetCruisePlanId()) {
        this.cruisePlanId = other.cruisePlanId;
      }
    }

    public stopCruisePlan_args deepCopy() {
      return new stopCruisePlan_args(this);
    }

    @Override
    public void clear() {
      this.cruisePlanId = null;
    }

    public String getCruisePlanId() {
      return this.cruisePlanId;
    }

    public stopCruisePlan_args setCruisePlanId(String cruisePlanId) {
      this.cruisePlanId = cruisePlanId;
      return this;
    }

    public void unsetCruisePlanId() {
      this.cruisePlanId = null;
    }

    /** Returns true if field cruisePlanId is set (has been assigned a value) and false otherwise */
    public boolean isSetCruisePlanId() {
      return this.cruisePlanId != null;
    }

    public void setCruisePlanIdIsSet(boolean value) {
      if (!value) {
        this.cruisePlanId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_PLAN_ID:
        if (value == null) {
          unsetCruisePlanId();
        } else {
          setCruisePlanId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_PLAN_ID:
        return getCruisePlanId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_PLAN_ID:
        return isSetCruisePlanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopCruisePlan_args)
        return this.equals((stopCruisePlan_args)that);
      return false;
    }

    public boolean equals(stopCruisePlan_args that) {
      if (that == null)
        return false;

      boolean this_present_cruisePlanId = true && this.isSetCruisePlanId();
      boolean that_present_cruisePlanId = true && that.isSetCruisePlanId();
      if (this_present_cruisePlanId || that_present_cruisePlanId) {
        if (!(this_present_cruisePlanId && that_present_cruisePlanId))
          return false;
        if (!this.cruisePlanId.equals(that.cruisePlanId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopCruisePlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopCruisePlan_args typedOther = (stopCruisePlan_args)other;

      lastComparison = Boolean.valueOf(isSetCruisePlanId()).compareTo(typedOther.isSetCruisePlanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruisePlanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruisePlanId, typedOther.cruisePlanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopCruisePlan_args(");
      boolean first = true;

      sb.append("cruisePlanId:");
      if (this.cruisePlanId == null) {
        sb.append("null");
      } else {
        sb.append(this.cruisePlanId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopCruisePlan_argsStandardSchemeFactory implements SchemeFactory {
      public stopCruisePlan_argsStandardScheme getScheme() {
        return new stopCruisePlan_argsStandardScheme();
      }
    }

    private static class stopCruisePlan_argsStandardScheme extends StandardScheme<stopCruisePlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopCruisePlan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruisePlanId = iprot.readString();
                struct.setCruisePlanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopCruisePlan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruisePlanId != null) {
          oprot.writeFieldBegin(CRUISE_PLAN_ID_FIELD_DESC);
          oprot.writeString(struct.cruisePlanId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopCruisePlan_argsTupleSchemeFactory implements SchemeFactory {
      public stopCruisePlan_argsTupleScheme getScheme() {
        return new stopCruisePlan_argsTupleScheme();
      }
    }

    private static class stopCruisePlan_argsTupleScheme extends TupleScheme<stopCruisePlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopCruisePlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruisePlanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCruisePlanId()) {
          oprot.writeString(struct.cruisePlanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopCruisePlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cruisePlanId = iprot.readString();
          struct.setCruisePlanIdIsSet(true);
        }
      }
    }

  }

  public static class stopCruisePlan_result implements org.apache.thrift.TBase<stopCruisePlan_result, stopCruisePlan_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopCruisePlan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopCruisePlan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopCruisePlan_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopCruisePlan_result.class, metaDataMap);
    }

    public stopCruisePlan_result() {
    }

    public stopCruisePlan_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopCruisePlan_result(stopCruisePlan_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public stopCruisePlan_result deepCopy() {
      return new stopCruisePlan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public stopCruisePlan_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopCruisePlan_result)
        return this.equals((stopCruisePlan_result)that);
      return false;
    }

    public boolean equals(stopCruisePlan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopCruisePlan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopCruisePlan_result typedOther = (stopCruisePlan_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopCruisePlan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopCruisePlan_resultStandardSchemeFactory implements SchemeFactory {
      public stopCruisePlan_resultStandardScheme getScheme() {
        return new stopCruisePlan_resultStandardScheme();
      }
    }

    private static class stopCruisePlan_resultStandardScheme extends StandardScheme<stopCruisePlan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopCruisePlan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopCruisePlan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopCruisePlan_resultTupleSchemeFactory implements SchemeFactory {
      public stopCruisePlan_resultTupleScheme getScheme() {
        return new stopCruisePlan_resultTupleScheme();
      }
    }

    private static class stopCruisePlan_resultTupleScheme extends TupleScheme<stopCruisePlan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopCruisePlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopCruisePlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setSegmentPositions_args implements org.apache.thrift.TBase<setSegmentPositions_args, setSegmentPositions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSegmentPositions_args");

    private static final org.apache.thrift.protocol.TField SEGMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField POSITION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("positionList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSegmentPositions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSegmentPositions_argsTupleSchemeFactory());
    }

    public String segmentId; // required
    public List<GPSData> positionList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEGMENT_ID((short)1, "segmentId"),
      POSITION_LIST((short)2, "positionList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEGMENT_ID
            return SEGMENT_ID;
          case 2: // POSITION_LIST
            return POSITION_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEGMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("segmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION_LIST, new org.apache.thrift.meta_data.FieldMetaData("positionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GPSData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSegmentPositions_args.class, metaDataMap);
    }

    public setSegmentPositions_args() {
    }

    public setSegmentPositions_args(
      String segmentId,
      List<GPSData> positionList)
    {
      this();
      this.segmentId = segmentId;
      this.positionList = positionList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSegmentPositions_args(setSegmentPositions_args other) {
      if (other.isSetSegmentId()) {
        this.segmentId = other.segmentId;
      }
      if (other.isSetPositionList()) {
        List<GPSData> __this__positionList = new ArrayList<GPSData>();
        for (GPSData other_element : other.positionList) {
          __this__positionList.add(new GPSData(other_element));
        }
        this.positionList = __this__positionList;
      }
    }

    public setSegmentPositions_args deepCopy() {
      return new setSegmentPositions_args(this);
    }

    @Override
    public void clear() {
      this.segmentId = null;
      this.positionList = null;
    }

    public String getSegmentId() {
      return this.segmentId;
    }

    public setSegmentPositions_args setSegmentId(String segmentId) {
      this.segmentId = segmentId;
      return this;
    }

    public void unsetSegmentId() {
      this.segmentId = null;
    }

    /** Returns true if field segmentId is set (has been assigned a value) and false otherwise */
    public boolean isSetSegmentId() {
      return this.segmentId != null;
    }

    public void setSegmentIdIsSet(boolean value) {
      if (!value) {
        this.segmentId = null;
      }
    }

    public int getPositionListSize() {
      return (this.positionList == null) ? 0 : this.positionList.size();
    }

    public java.util.Iterator<GPSData> getPositionListIterator() {
      return (this.positionList == null) ? null : this.positionList.iterator();
    }

    public void addToPositionList(GPSData elem) {
      if (this.positionList == null) {
        this.positionList = new ArrayList<GPSData>();
      }
      this.positionList.add(elem);
    }

    public List<GPSData> getPositionList() {
      return this.positionList;
    }

    public setSegmentPositions_args setPositionList(List<GPSData> positionList) {
      this.positionList = positionList;
      return this;
    }

    public void unsetPositionList() {
      this.positionList = null;
    }

    /** Returns true if field positionList is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionList() {
      return this.positionList != null;
    }

    public void setPositionListIsSet(boolean value) {
      if (!value) {
        this.positionList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEGMENT_ID:
        if (value == null) {
          unsetSegmentId();
        } else {
          setSegmentId((String)value);
        }
        break;

      case POSITION_LIST:
        if (value == null) {
          unsetPositionList();
        } else {
          setPositionList((List<GPSData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEGMENT_ID:
        return getSegmentId();

      case POSITION_LIST:
        return getPositionList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEGMENT_ID:
        return isSetSegmentId();
      case POSITION_LIST:
        return isSetPositionList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSegmentPositions_args)
        return this.equals((setSegmentPositions_args)that);
      return false;
    }

    public boolean equals(setSegmentPositions_args that) {
      if (that == null)
        return false;

      boolean this_present_segmentId = true && this.isSetSegmentId();
      boolean that_present_segmentId = true && that.isSetSegmentId();
      if (this_present_segmentId || that_present_segmentId) {
        if (!(this_present_segmentId && that_present_segmentId))
          return false;
        if (!this.segmentId.equals(that.segmentId))
          return false;
      }

      boolean this_present_positionList = true && this.isSetPositionList();
      boolean that_present_positionList = true && that.isSetPositionList();
      if (this_present_positionList || that_present_positionList) {
        if (!(this_present_positionList && that_present_positionList))
          return false;
        if (!this.positionList.equals(that.positionList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSegmentPositions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSegmentPositions_args typedOther = (setSegmentPositions_args)other;

      lastComparison = Boolean.valueOf(isSetSegmentId()).compareTo(typedOther.isSetSegmentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSegmentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentId, typedOther.segmentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositionList()).compareTo(typedOther.isSetPositionList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionList, typedOther.positionList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSegmentPositions_args(");
      boolean first = true;

      sb.append("segmentId:");
      if (this.segmentId == null) {
        sb.append("null");
      } else {
        sb.append(this.segmentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionList:");
      if (this.positionList == null) {
        sb.append("null");
      } else {
        sb.append(this.positionList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSegmentPositions_argsStandardSchemeFactory implements SchemeFactory {
      public setSegmentPositions_argsStandardScheme getScheme() {
        return new setSegmentPositions_argsStandardScheme();
      }
    }

    private static class setSegmentPositions_argsStandardScheme extends StandardScheme<setSegmentPositions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSegmentPositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEGMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.segmentId = iprot.readString();
                struct.setSegmentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITION_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.positionList = new ArrayList<GPSData>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    GPSData _elem10; // required
                    _elem10 = new GPSData();
                    _elem10.read(iprot);
                    struct.positionList.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setPositionListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSegmentPositions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.segmentId != null) {
          oprot.writeFieldBegin(SEGMENT_ID_FIELD_DESC);
          oprot.writeString(struct.segmentId);
          oprot.writeFieldEnd();
        }
        if (struct.positionList != null) {
          oprot.writeFieldBegin(POSITION_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.positionList.size()));
            for (GPSData _iter11 : struct.positionList)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSegmentPositions_argsTupleSchemeFactory implements SchemeFactory {
      public setSegmentPositions_argsTupleScheme getScheme() {
        return new setSegmentPositions_argsTupleScheme();
      }
    }

    private static class setSegmentPositions_argsTupleScheme extends TupleScheme<setSegmentPositions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSegmentPositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSegmentId()) {
          optionals.set(0);
        }
        if (struct.isSetPositionList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSegmentId()) {
          oprot.writeString(struct.segmentId);
        }
        if (struct.isSetPositionList()) {
          {
            oprot.writeI32(struct.positionList.size());
            for (GPSData _iter12 : struct.positionList)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSegmentPositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.segmentId = iprot.readString();
          struct.setSegmentIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.positionList = new ArrayList<GPSData>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              GPSData _elem15; // required
              _elem15 = new GPSData();
              _elem15.read(iprot);
              struct.positionList.add(_elem15);
            }
          }
          struct.setPositionListIsSet(true);
        }
      }
    }

  }

  public static class setSegmentPositions_result implements org.apache.thrift.TBase<setSegmentPositions_result, setSegmentPositions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSegmentPositions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSegmentPositions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSegmentPositions_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSegmentPositions_result.class, metaDataMap);
    }

    public setSegmentPositions_result() {
    }

    public setSegmentPositions_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSegmentPositions_result(setSegmentPositions_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public setSegmentPositions_result deepCopy() {
      return new setSegmentPositions_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setSegmentPositions_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSegmentPositions_result)
        return this.equals((setSegmentPositions_result)that);
      return false;
    }

    public boolean equals(setSegmentPositions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setSegmentPositions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setSegmentPositions_result typedOther = (setSegmentPositions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSegmentPositions_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSegmentPositions_resultStandardSchemeFactory implements SchemeFactory {
      public setSegmentPositions_resultStandardScheme getScheme() {
        return new setSegmentPositions_resultStandardScheme();
      }
    }

    private static class setSegmentPositions_resultStandardScheme extends StandardScheme<setSegmentPositions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSegmentPositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSegmentPositions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSegmentPositions_resultTupleSchemeFactory implements SchemeFactory {
      public setSegmentPositions_resultTupleScheme getScheme() {
        return new setSegmentPositions_resultTupleScheme();
      }
    }

    private static class setSegmentPositions_resultTupleScheme extends TupleScheme<setSegmentPositions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSegmentPositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSegmentPositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteSegmentPositions_args implements org.apache.thrift.TBase<deleteSegmentPositions_args, deleteSegmentPositions_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSegmentPositions_args");

    private static final org.apache.thrift.protocol.TField SEGMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSegmentPositions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSegmentPositions_argsTupleSchemeFactory());
    }

    public String segmentId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEGMENT_ID((short)1, "segmentId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEGMENT_ID
            return SEGMENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEGMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("segmentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSegmentPositions_args.class, metaDataMap);
    }

    public deleteSegmentPositions_args() {
    }

    public deleteSegmentPositions_args(
      String segmentId)
    {
      this();
      this.segmentId = segmentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSegmentPositions_args(deleteSegmentPositions_args other) {
      if (other.isSetSegmentId()) {
        this.segmentId = other.segmentId;
      }
    }

    public deleteSegmentPositions_args deepCopy() {
      return new deleteSegmentPositions_args(this);
    }

    @Override
    public void clear() {
      this.segmentId = null;
    }

    public String getSegmentId() {
      return this.segmentId;
    }

    public deleteSegmentPositions_args setSegmentId(String segmentId) {
      this.segmentId = segmentId;
      return this;
    }

    public void unsetSegmentId() {
      this.segmentId = null;
    }

    /** Returns true if field segmentId is set (has been assigned a value) and false otherwise */
    public boolean isSetSegmentId() {
      return this.segmentId != null;
    }

    public void setSegmentIdIsSet(boolean value) {
      if (!value) {
        this.segmentId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SEGMENT_ID:
        if (value == null) {
          unsetSegmentId();
        } else {
          setSegmentId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SEGMENT_ID:
        return getSegmentId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SEGMENT_ID:
        return isSetSegmentId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSegmentPositions_args)
        return this.equals((deleteSegmentPositions_args)that);
      return false;
    }

    public boolean equals(deleteSegmentPositions_args that) {
      if (that == null)
        return false;

      boolean this_present_segmentId = true && this.isSetSegmentId();
      boolean that_present_segmentId = true && that.isSetSegmentId();
      if (this_present_segmentId || that_present_segmentId) {
        if (!(this_present_segmentId && that_present_segmentId))
          return false;
        if (!this.segmentId.equals(that.segmentId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteSegmentPositions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteSegmentPositions_args typedOther = (deleteSegmentPositions_args)other;

      lastComparison = Boolean.valueOf(isSetSegmentId()).compareTo(typedOther.isSetSegmentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSegmentId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentId, typedOther.segmentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSegmentPositions_args(");
      boolean first = true;

      sb.append("segmentId:");
      if (this.segmentId == null) {
        sb.append("null");
      } else {
        sb.append(this.segmentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSegmentPositions_argsStandardSchemeFactory implements SchemeFactory {
      public deleteSegmentPositions_argsStandardScheme getScheme() {
        return new deleteSegmentPositions_argsStandardScheme();
      }
    }

    private static class deleteSegmentPositions_argsStandardScheme extends StandardScheme<deleteSegmentPositions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSegmentPositions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEGMENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.segmentId = iprot.readString();
                struct.setSegmentIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSegmentPositions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.segmentId != null) {
          oprot.writeFieldBegin(SEGMENT_ID_FIELD_DESC);
          oprot.writeString(struct.segmentId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSegmentPositions_argsTupleSchemeFactory implements SchemeFactory {
      public deleteSegmentPositions_argsTupleScheme getScheme() {
        return new deleteSegmentPositions_argsTupleScheme();
      }
    }

    private static class deleteSegmentPositions_argsTupleScheme extends TupleScheme<deleteSegmentPositions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSegmentPositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSegmentId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSegmentId()) {
          oprot.writeString(struct.segmentId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSegmentPositions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.segmentId = iprot.readString();
          struct.setSegmentIdIsSet(true);
        }
      }
    }

  }

  public static class deleteSegmentPositions_result implements org.apache.thrift.TBase<deleteSegmentPositions_result, deleteSegmentPositions_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSegmentPositions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteSegmentPositions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteSegmentPositions_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSegmentPositions_result.class, metaDataMap);
    }

    public deleteSegmentPositions_result() {
    }

    public deleteSegmentPositions_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSegmentPositions_result(deleteSegmentPositions_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteSegmentPositions_result deepCopy() {
      return new deleteSegmentPositions_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteSegmentPositions_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSegmentPositions_result)
        return this.equals((deleteSegmentPositions_result)that);
      return false;
    }

    public boolean equals(deleteSegmentPositions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteSegmentPositions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteSegmentPositions_result typedOther = (deleteSegmentPositions_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteSegmentPositions_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSegmentPositions_resultStandardSchemeFactory implements SchemeFactory {
      public deleteSegmentPositions_resultStandardScheme getScheme() {
        return new deleteSegmentPositions_resultStandardScheme();
      }
    }

    private static class deleteSegmentPositions_resultStandardScheme extends StandardScheme<deleteSegmentPositions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSegmentPositions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSegmentPositions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSegmentPositions_resultTupleSchemeFactory implements SchemeFactory {
      public deleteSegmentPositions_resultTupleScheme getScheme() {
        return new deleteSegmentPositions_resultTupleScheme();
      }
    }

    private static class deleteSegmentPositions_resultTupleScheme extends TupleScheme<deleteSegmentPositions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSegmentPositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSegmentPositions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentLocation_args implements org.apache.thrift.TBase<getCurrentLocation_args, getCurrentLocation_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentLocation_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentLocation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentLocation_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentLocation_args.class, metaDataMap);
    }

    public getCurrentLocation_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentLocation_args(getCurrentLocation_args other) {
    }

    public getCurrentLocation_args deepCopy() {
      return new getCurrentLocation_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentLocation_args)
        return this.equals((getCurrentLocation_args)that);
      return false;
    }

    public boolean equals(getCurrentLocation_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCurrentLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCurrentLocation_args typedOther = (getCurrentLocation_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentLocation_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentLocation_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentLocation_argsStandardScheme getScheme() {
        return new getCurrentLocation_argsStandardScheme();
      }
    }

    private static class getCurrentLocation_argsStandardScheme extends StandardScheme<getCurrentLocation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentLocation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentLocation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentLocation_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentLocation_argsTupleScheme getScheme() {
        return new getCurrentLocation_argsTupleScheme();
      }
    }

    private static class getCurrentLocation_argsTupleScheme extends TupleScheme<getCurrentLocation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCurrentLocation_result implements org.apache.thrift.TBase<getCurrentLocation_result, getCurrentLocation_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentLocation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentLocation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentLocation_resultTupleSchemeFactory());
    }

    public GPSData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GPSData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentLocation_result.class, metaDataMap);
    }

    public getCurrentLocation_result() {
    }

    public getCurrentLocation_result(
      GPSData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentLocation_result(getCurrentLocation_result other) {
      if (other.isSetSuccess()) {
        this.success = new GPSData(other.success);
      }
    }

    public getCurrentLocation_result deepCopy() {
      return new getCurrentLocation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GPSData getSuccess() {
      return this.success;
    }

    public getCurrentLocation_result setSuccess(GPSData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GPSData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentLocation_result)
        return this.equals((getCurrentLocation_result)that);
      return false;
    }

    public boolean equals(getCurrentLocation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCurrentLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCurrentLocation_result typedOther = (getCurrentLocation_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentLocation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentLocation_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentLocation_resultStandardScheme getScheme() {
        return new getCurrentLocation_resultStandardScheme();
      }
    }

    private static class getCurrentLocation_resultStandardScheme extends StandardScheme<getCurrentLocation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentLocation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GPSData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentLocation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentLocation_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentLocation_resultTupleScheme getScheme() {
        return new getCurrentLocation_resultTupleScheme();
      }
    }

    private static class getCurrentLocation_resultTupleScheme extends TupleScheme<getCurrentLocation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GPSData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCurrentMileage_args implements org.apache.thrift.TBase<getCurrentMileage_args, getCurrentMileage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentMileage_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentMileage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentMileage_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentMileage_args.class, metaDataMap);
    }

    public getCurrentMileage_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentMileage_args(getCurrentMileage_args other) {
    }

    public getCurrentMileage_args deepCopy() {
      return new getCurrentMileage_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentMileage_args)
        return this.equals((getCurrentMileage_args)that);
      return false;
    }

    public boolean equals(getCurrentMileage_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCurrentMileage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCurrentMileage_args typedOther = (getCurrentMileage_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentMileage_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentMileage_argsStandardSchemeFactory implements SchemeFactory {
      public getCurrentMileage_argsStandardScheme getScheme() {
        return new getCurrentMileage_argsStandardScheme();
      }
    }

    private static class getCurrentMileage_argsStandardScheme extends StandardScheme<getCurrentMileage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentMileage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentMileage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentMileage_argsTupleSchemeFactory implements SchemeFactory {
      public getCurrentMileage_argsTupleScheme getScheme() {
        return new getCurrentMileage_argsTupleScheme();
      }
    }

    private static class getCurrentMileage_argsTupleScheme extends TupleScheme<getCurrentMileage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentMileage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentMileage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getCurrentMileage_result implements org.apache.thrift.TBase<getCurrentMileage_result, getCurrentMileage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCurrentMileage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCurrentMileage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCurrentMileage_resultTupleSchemeFactory());
    }

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCurrentMileage_result.class, metaDataMap);
    }

    public getCurrentMileage_result() {
    }

    public getCurrentMileage_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCurrentMileage_result(getCurrentMileage_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public getCurrentMileage_result deepCopy() {
      return new getCurrentMileage_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public getCurrentMileage_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Double.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCurrentMileage_result)
        return this.equals((getCurrentMileage_result)that);
      return false;
    }

    public boolean equals(getCurrentMileage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCurrentMileage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCurrentMileage_result typedOther = (getCurrentMileage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCurrentMileage_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCurrentMileage_resultStandardSchemeFactory implements SchemeFactory {
      public getCurrentMileage_resultStandardScheme getScheme() {
        return new getCurrentMileage_resultStandardScheme();
      }
    }

    private static class getCurrentMileage_resultStandardScheme extends StandardScheme<getCurrentMileage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCurrentMileage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCurrentMileage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeDouble(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCurrentMileage_resultTupleSchemeFactory implements SchemeFactory {
      public getCurrentMileage_resultTupleScheme getScheme() {
        return new getCurrentMileage_resultTupleScheme();
      }
    }

    private static class getCurrentMileage_resultTupleScheme extends TupleScheme<getCurrentMileage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCurrentMileage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCurrentMileage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMeasureResult_args implements org.apache.thrift.TBase<getMeasureResult_args, getMeasureResult_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMeasureResult_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMeasureResult_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMeasureResult_argsTupleSchemeFactory());
    }

    public long deviceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMeasureResult_args.class, metaDataMap);
    }

    public getMeasureResult_args() {
    }

    public getMeasureResult_args(
      long deviceId)
    {
      this();
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMeasureResult_args(getMeasureResult_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.deviceId = other.deviceId;
    }

    public getMeasureResult_args deepCopy() {
      return new getMeasureResult_args(this);
    }

    @Override
    public void clear() {
      setDeviceIdIsSet(false);
      this.deviceId = 0;
    }

    public long getDeviceId() {
      return this.deviceId;
    }

    public getMeasureResult_args setDeviceId(long deviceId) {
      this.deviceId = deviceId;
      setDeviceIdIsSet(true);
      return this;
    }

    public void unsetDeviceId() {
      __isset_bit_vector.clear(__DEVICEID_ISSET_ID);
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return __isset_bit_vector.get(__DEVICEID_ISSET_ID);
    }

    public void setDeviceIdIsSet(boolean value) {
      __isset_bit_vector.set(__DEVICEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return Long.valueOf(getDeviceId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMeasureResult_args)
        return this.equals((getMeasureResult_args)that);
      return false;
    }

    public boolean equals(getMeasureResult_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true;
      boolean that_present_deviceId = true;
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (this.deviceId != that.deviceId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMeasureResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMeasureResult_args typedOther = (getMeasureResult_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMeasureResult_args(");
      boolean first = true;

      sb.append("deviceId:");
      sb.append(this.deviceId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMeasureResult_argsStandardSchemeFactory implements SchemeFactory {
      public getMeasureResult_argsStandardScheme getScheme() {
        return new getMeasureResult_argsStandardScheme();
      }
    }

    private static class getMeasureResult_argsStandardScheme extends StandardScheme<getMeasureResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMeasureResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.deviceId = iprot.readI64();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMeasureResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
        oprot.writeI64(struct.deviceId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMeasureResult_argsTupleSchemeFactory implements SchemeFactory {
      public getMeasureResult_argsTupleScheme getScheme() {
        return new getMeasureResult_argsTupleScheme();
      }
    }

    private static class getMeasureResult_argsTupleScheme extends TupleScheme<getMeasureResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMeasureResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceId()) {
          oprot.writeI64(struct.deviceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMeasureResult_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readI64();
          struct.setDeviceIdIsSet(true);
        }
      }
    }

  }

  public static class getMeasureResult_result implements org.apache.thrift.TBase<getMeasureResult_result, getMeasureResult_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMeasureResult_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMeasureResult_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMeasureResult_resultTupleSchemeFactory());
    }

    public CuriseMeasureData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CuriseMeasureData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMeasureResult_result.class, metaDataMap);
    }

    public getMeasureResult_result() {
    }

    public getMeasureResult_result(
      CuriseMeasureData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMeasureResult_result(getMeasureResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new CuriseMeasureData(other.success);
      }
    }

    public getMeasureResult_result deepCopy() {
      return new getMeasureResult_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CuriseMeasureData getSuccess() {
      return this.success;
    }

    public getMeasureResult_result setSuccess(CuriseMeasureData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CuriseMeasureData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMeasureResult_result)
        return this.equals((getMeasureResult_result)that);
      return false;
    }

    public boolean equals(getMeasureResult_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getMeasureResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getMeasureResult_result typedOther = (getMeasureResult_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMeasureResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMeasureResult_resultStandardSchemeFactory implements SchemeFactory {
      public getMeasureResult_resultStandardScheme getScheme() {
        return new getMeasureResult_resultStandardScheme();
      }
    }

    private static class getMeasureResult_resultStandardScheme extends StandardScheme<getMeasureResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMeasureResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CuriseMeasureData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMeasureResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMeasureResult_resultTupleSchemeFactory implements SchemeFactory {
      public getMeasureResult_resultTupleScheme getScheme() {
        return new getMeasureResult_resultTupleScheme();
      }
    }

    private static class getMeasureResult_resultTupleScheme extends TupleScheme<getMeasureResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMeasureResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMeasureResult_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CuriseMeasureData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCruiseSnapshotUrl_args implements org.apache.thrift.TBase<getCruiseSnapshotUrl_args, getCruiseSnapshotUrl_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCruiseSnapshotUrl_args");

    private static final org.apache.thrift.protocol.TField CRUISE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cruisePlanId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCruiseSnapshotUrl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCruiseSnapshotUrl_argsTupleSchemeFactory());
    }

    public String cruisePlanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_PLAN_ID((short)1, "cruisePlanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_PLAN_ID
            return CRUISE_PLAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("cruisePlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCruiseSnapshotUrl_args.class, metaDataMap);
    }

    public getCruiseSnapshotUrl_args() {
    }

    public getCruiseSnapshotUrl_args(
      String cruisePlanId)
    {
      this();
      this.cruisePlanId = cruisePlanId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCruiseSnapshotUrl_args(getCruiseSnapshotUrl_args other) {
      if (other.isSetCruisePlanId()) {
        this.cruisePlanId = other.cruisePlanId;
      }
    }

    public getCruiseSnapshotUrl_args deepCopy() {
      return new getCruiseSnapshotUrl_args(this);
    }

    @Override
    public void clear() {
      this.cruisePlanId = null;
    }

    public String getCruisePlanId() {
      return this.cruisePlanId;
    }

    public getCruiseSnapshotUrl_args setCruisePlanId(String cruisePlanId) {
      this.cruisePlanId = cruisePlanId;
      return this;
    }

    public void unsetCruisePlanId() {
      this.cruisePlanId = null;
    }

    /** Returns true if field cruisePlanId is set (has been assigned a value) and false otherwise */
    public boolean isSetCruisePlanId() {
      return this.cruisePlanId != null;
    }

    public void setCruisePlanIdIsSet(boolean value) {
      if (!value) {
        this.cruisePlanId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_PLAN_ID:
        if (value == null) {
          unsetCruisePlanId();
        } else {
          setCruisePlanId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_PLAN_ID:
        return getCruisePlanId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_PLAN_ID:
        return isSetCruisePlanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCruiseSnapshotUrl_args)
        return this.equals((getCruiseSnapshotUrl_args)that);
      return false;
    }

    public boolean equals(getCruiseSnapshotUrl_args that) {
      if (that == null)
        return false;

      boolean this_present_cruisePlanId = true && this.isSetCruisePlanId();
      boolean that_present_cruisePlanId = true && that.isSetCruisePlanId();
      if (this_present_cruisePlanId || that_present_cruisePlanId) {
        if (!(this_present_cruisePlanId && that_present_cruisePlanId))
          return false;
        if (!this.cruisePlanId.equals(that.cruisePlanId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCruiseSnapshotUrl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCruiseSnapshotUrl_args typedOther = (getCruiseSnapshotUrl_args)other;

      lastComparison = Boolean.valueOf(isSetCruisePlanId()).compareTo(typedOther.isSetCruisePlanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruisePlanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruisePlanId, typedOther.cruisePlanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCruiseSnapshotUrl_args(");
      boolean first = true;

      sb.append("cruisePlanId:");
      if (this.cruisePlanId == null) {
        sb.append("null");
      } else {
        sb.append(this.cruisePlanId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCruiseSnapshotUrl_argsStandardSchemeFactory implements SchemeFactory {
      public getCruiseSnapshotUrl_argsStandardScheme getScheme() {
        return new getCruiseSnapshotUrl_argsStandardScheme();
      }
    }

    private static class getCruiseSnapshotUrl_argsStandardScheme extends StandardScheme<getCruiseSnapshotUrl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCruiseSnapshotUrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruisePlanId = iprot.readString();
                struct.setCruisePlanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCruiseSnapshotUrl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruisePlanId != null) {
          oprot.writeFieldBegin(CRUISE_PLAN_ID_FIELD_DESC);
          oprot.writeString(struct.cruisePlanId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCruiseSnapshotUrl_argsTupleSchemeFactory implements SchemeFactory {
      public getCruiseSnapshotUrl_argsTupleScheme getScheme() {
        return new getCruiseSnapshotUrl_argsTupleScheme();
      }
    }

    private static class getCruiseSnapshotUrl_argsTupleScheme extends TupleScheme<getCruiseSnapshotUrl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCruiseSnapshotUrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruisePlanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCruisePlanId()) {
          oprot.writeString(struct.cruisePlanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCruiseSnapshotUrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cruisePlanId = iprot.readString();
          struct.setCruisePlanIdIsSet(true);
        }
      }
    }

  }

  public static class getCruiseSnapshotUrl_result implements org.apache.thrift.TBase<getCruiseSnapshotUrl_result, getCruiseSnapshotUrl_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCruiseSnapshotUrl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCruiseSnapshotUrl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCruiseSnapshotUrl_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCruiseSnapshotUrl_result.class, metaDataMap);
    }

    public getCruiseSnapshotUrl_result() {
    }

    public getCruiseSnapshotUrl_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCruiseSnapshotUrl_result(getCruiseSnapshotUrl_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getCruiseSnapshotUrl_result deepCopy() {
      return new getCruiseSnapshotUrl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getCruiseSnapshotUrl_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCruiseSnapshotUrl_result)
        return this.equals((getCruiseSnapshotUrl_result)that);
      return false;
    }

    public boolean equals(getCruiseSnapshotUrl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCruiseSnapshotUrl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCruiseSnapshotUrl_result typedOther = (getCruiseSnapshotUrl_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCruiseSnapshotUrl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCruiseSnapshotUrl_resultStandardSchemeFactory implements SchemeFactory {
      public getCruiseSnapshotUrl_resultStandardScheme getScheme() {
        return new getCruiseSnapshotUrl_resultStandardScheme();
      }
    }

    private static class getCruiseSnapshotUrl_resultStandardScheme extends StandardScheme<getCruiseSnapshotUrl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCruiseSnapshotUrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCruiseSnapshotUrl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCruiseSnapshotUrl_resultTupleSchemeFactory implements SchemeFactory {
      public getCruiseSnapshotUrl_resultTupleScheme getScheme() {
        return new getCruiseSnapshotUrl_resultTupleScheme();
      }
    }

    private static class getCruiseSnapshotUrl_resultTupleScheme extends TupleScheme<getCruiseSnapshotUrl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCruiseSnapshotUrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCruiseSnapshotUrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class triggerCruiseEvent_args implements org.apache.thrift.TBase<triggerCruiseEvent_args, triggerCruiseEvent_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerCruiseEvent_args");

    private static final org.apache.thrift.protocol.TField CRUISE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cruisePlanId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new triggerCruiseEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new triggerCruiseEvent_argsTupleSchemeFactory());
    }

    public String cruisePlanId; // required
    public String startTimestamp; // required
    public int duration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_PLAN_ID((short)1, "cruisePlanId"),
      START_TIMESTAMP((short)2, "startTimestamp"),
      DURATION((short)3, "duration");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_PLAN_ID
            return CRUISE_PLAN_ID;
          case 2: // START_TIMESTAMP
            return START_TIMESTAMP;
          case 3: // DURATION
            return DURATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DURATION_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("cruisePlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerCruiseEvent_args.class, metaDataMap);
    }

    public triggerCruiseEvent_args() {
    }

    public triggerCruiseEvent_args(
      String cruisePlanId,
      String startTimestamp,
      int duration)
    {
      this();
      this.cruisePlanId = cruisePlanId;
      this.startTimestamp = startTimestamp;
      this.duration = duration;
      setDurationIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public triggerCruiseEvent_args(triggerCruiseEvent_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetCruisePlanId()) {
        this.cruisePlanId = other.cruisePlanId;
      }
      if (other.isSetStartTimestamp()) {
        this.startTimestamp = other.startTimestamp;
      }
      this.duration = other.duration;
    }

    public triggerCruiseEvent_args deepCopy() {
      return new triggerCruiseEvent_args(this);
    }

    @Override
    public void clear() {
      this.cruisePlanId = null;
      this.startTimestamp = null;
      setDurationIsSet(false);
      this.duration = 0;
    }

    public String getCruisePlanId() {
      return this.cruisePlanId;
    }

    public triggerCruiseEvent_args setCruisePlanId(String cruisePlanId) {
      this.cruisePlanId = cruisePlanId;
      return this;
    }

    public void unsetCruisePlanId() {
      this.cruisePlanId = null;
    }

    /** Returns true if field cruisePlanId is set (has been assigned a value) and false otherwise */
    public boolean isSetCruisePlanId() {
      return this.cruisePlanId != null;
    }

    public void setCruisePlanIdIsSet(boolean value) {
      if (!value) {
        this.cruisePlanId = null;
      }
    }

    public String getStartTimestamp() {
      return this.startTimestamp;
    }

    public triggerCruiseEvent_args setStartTimestamp(String startTimestamp) {
      this.startTimestamp = startTimestamp;
      return this;
    }

    public void unsetStartTimestamp() {
      this.startTimestamp = null;
    }

    /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTimestamp() {
      return this.startTimestamp != null;
    }

    public void setStartTimestampIsSet(boolean value) {
      if (!value) {
        this.startTimestamp = null;
      }
    }

    public int getDuration() {
      return this.duration;
    }

    public triggerCruiseEvent_args setDuration(int duration) {
      this.duration = duration;
      setDurationIsSet(true);
      return this;
    }

    public void unsetDuration() {
      __isset_bit_vector.clear(__DURATION_ISSET_ID);
    }

    /** Returns true if field duration is set (has been assigned a value) and false otherwise */
    public boolean isSetDuration() {
      return __isset_bit_vector.get(__DURATION_ISSET_ID);
    }

    public void setDurationIsSet(boolean value) {
      __isset_bit_vector.set(__DURATION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_PLAN_ID:
        if (value == null) {
          unsetCruisePlanId();
        } else {
          setCruisePlanId((String)value);
        }
        break;

      case START_TIMESTAMP:
        if (value == null) {
          unsetStartTimestamp();
        } else {
          setStartTimestamp((String)value);
        }
        break;

      case DURATION:
        if (value == null) {
          unsetDuration();
        } else {
          setDuration((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_PLAN_ID:
        return getCruisePlanId();

      case START_TIMESTAMP:
        return getStartTimestamp();

      case DURATION:
        return Integer.valueOf(getDuration());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_PLAN_ID:
        return isSetCruisePlanId();
      case START_TIMESTAMP:
        return isSetStartTimestamp();
      case DURATION:
        return isSetDuration();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerCruiseEvent_args)
        return this.equals((triggerCruiseEvent_args)that);
      return false;
    }

    public boolean equals(triggerCruiseEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_cruisePlanId = true && this.isSetCruisePlanId();
      boolean that_present_cruisePlanId = true && that.isSetCruisePlanId();
      if (this_present_cruisePlanId || that_present_cruisePlanId) {
        if (!(this_present_cruisePlanId && that_present_cruisePlanId))
          return false;
        if (!this.cruisePlanId.equals(that.cruisePlanId))
          return false;
      }

      boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
      boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
      if (this_present_startTimestamp || that_present_startTimestamp) {
        if (!(this_present_startTimestamp && that_present_startTimestamp))
          return false;
        if (!this.startTimestamp.equals(that.startTimestamp))
          return false;
      }

      boolean this_present_duration = true;
      boolean that_present_duration = true;
      if (this_present_duration || that_present_duration) {
        if (!(this_present_duration && that_present_duration))
          return false;
        if (this.duration != that.duration)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(triggerCruiseEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      triggerCruiseEvent_args typedOther = (triggerCruiseEvent_args)other;

      lastComparison = Boolean.valueOf(isSetCruisePlanId()).compareTo(typedOther.isSetCruisePlanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruisePlanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruisePlanId, typedOther.cruisePlanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDuration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("triggerCruiseEvent_args(");
      boolean first = true;

      sb.append("cruisePlanId:");
      if (this.cruisePlanId == null) {
        sb.append("null");
      } else {
        sb.append(this.cruisePlanId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      if (this.startTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.startTimestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("duration:");
      sb.append(this.duration);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class triggerCruiseEvent_argsStandardSchemeFactory implements SchemeFactory {
      public triggerCruiseEvent_argsStandardScheme getScheme() {
        return new triggerCruiseEvent_argsStandardScheme();
      }
    }

    private static class triggerCruiseEvent_argsStandardScheme extends StandardScheme<triggerCruiseEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerCruiseEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruisePlanId = iprot.readString();
                struct.setCruisePlanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTimestamp = iprot.readString();
                struct.setStartTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DURATION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.duration = iprot.readI32();
                struct.setDurationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerCruiseEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruisePlanId != null) {
          oprot.writeFieldBegin(CRUISE_PLAN_ID_FIELD_DESC);
          oprot.writeString(struct.cruisePlanId);
          oprot.writeFieldEnd();
        }
        if (struct.startTimestamp != null) {
          oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.startTimestamp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DURATION_FIELD_DESC);
        oprot.writeI32(struct.duration);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class triggerCruiseEvent_argsTupleSchemeFactory implements SchemeFactory {
      public triggerCruiseEvent_argsTupleScheme getScheme() {
        return new triggerCruiseEvent_argsTupleScheme();
      }
    }

    private static class triggerCruiseEvent_argsTupleScheme extends TupleScheme<triggerCruiseEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerCruiseEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruisePlanId()) {
          optionals.set(0);
        }
        if (struct.isSetStartTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetDuration()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCruisePlanId()) {
          oprot.writeString(struct.cruisePlanId);
        }
        if (struct.isSetStartTimestamp()) {
          oprot.writeString(struct.startTimestamp);
        }
        if (struct.isSetDuration()) {
          oprot.writeI32(struct.duration);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerCruiseEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cruisePlanId = iprot.readString();
          struct.setCruisePlanIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTimestamp = iprot.readString();
          struct.setStartTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.duration = iprot.readI32();
          struct.setDurationIsSet(true);
        }
      }
    }

  }

  public static class triggerCruiseEvent_result implements org.apache.thrift.TBase<triggerCruiseEvent_result, triggerCruiseEvent_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerCruiseEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new triggerCruiseEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new triggerCruiseEvent_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerCruiseEvent_result.class, metaDataMap);
    }

    public triggerCruiseEvent_result() {
    }

    public triggerCruiseEvent_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public triggerCruiseEvent_result(triggerCruiseEvent_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public triggerCruiseEvent_result deepCopy() {
      return new triggerCruiseEvent_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public triggerCruiseEvent_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerCruiseEvent_result)
        return this.equals((triggerCruiseEvent_result)that);
      return false;
    }

    public boolean equals(triggerCruiseEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(triggerCruiseEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      triggerCruiseEvent_result typedOther = (triggerCruiseEvent_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("triggerCruiseEvent_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class triggerCruiseEvent_resultStandardSchemeFactory implements SchemeFactory {
      public triggerCruiseEvent_resultStandardScheme getScheme() {
        return new triggerCruiseEvent_resultStandardScheme();
      }
    }

    private static class triggerCruiseEvent_resultStandardScheme extends StandardScheme<triggerCruiseEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerCruiseEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerCruiseEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class triggerCruiseEvent_resultTupleSchemeFactory implements SchemeFactory {
      public triggerCruiseEvent_resultTupleScheme getScheme() {
        return new triggerCruiseEvent_resultTupleScheme();
      }
    }

    private static class triggerCruiseEvent_resultTupleScheme extends TupleScheme<triggerCruiseEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerCruiseEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerCruiseEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCruiseEventPlaybackVideoUrl_args implements org.apache.thrift.TBase<getCruiseEventPlaybackVideoUrl_args, getCruiseEventPlaybackVideoUrl_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCruiseEventPlaybackVideoUrl_args");

    private static final org.apache.thrift.protocol.TField CRUISE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cruisePlanId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCruiseEventPlaybackVideoUrl_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCruiseEventPlaybackVideoUrl_argsTupleSchemeFactory());
    }

    public String cruisePlanId; // required
    public String startTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_PLAN_ID((short)1, "cruisePlanId"),
      START_TIMESTAMP((short)2, "startTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_PLAN_ID
            return CRUISE_PLAN_ID;
          case 2: // START_TIMESTAMP
            return START_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("cruisePlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCruiseEventPlaybackVideoUrl_args.class, metaDataMap);
    }

    public getCruiseEventPlaybackVideoUrl_args() {
    }

    public getCruiseEventPlaybackVideoUrl_args(
      String cruisePlanId,
      String startTimestamp)
    {
      this();
      this.cruisePlanId = cruisePlanId;
      this.startTimestamp = startTimestamp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCruiseEventPlaybackVideoUrl_args(getCruiseEventPlaybackVideoUrl_args other) {
      if (other.isSetCruisePlanId()) {
        this.cruisePlanId = other.cruisePlanId;
      }
      if (other.isSetStartTimestamp()) {
        this.startTimestamp = other.startTimestamp;
      }
    }

    public getCruiseEventPlaybackVideoUrl_args deepCopy() {
      return new getCruiseEventPlaybackVideoUrl_args(this);
    }

    @Override
    public void clear() {
      this.cruisePlanId = null;
      this.startTimestamp = null;
    }

    public String getCruisePlanId() {
      return this.cruisePlanId;
    }

    public getCruiseEventPlaybackVideoUrl_args setCruisePlanId(String cruisePlanId) {
      this.cruisePlanId = cruisePlanId;
      return this;
    }

    public void unsetCruisePlanId() {
      this.cruisePlanId = null;
    }

    /** Returns true if field cruisePlanId is set (has been assigned a value) and false otherwise */
    public boolean isSetCruisePlanId() {
      return this.cruisePlanId != null;
    }

    public void setCruisePlanIdIsSet(boolean value) {
      if (!value) {
        this.cruisePlanId = null;
      }
    }

    public String getStartTimestamp() {
      return this.startTimestamp;
    }

    public getCruiseEventPlaybackVideoUrl_args setStartTimestamp(String startTimestamp) {
      this.startTimestamp = startTimestamp;
      return this;
    }

    public void unsetStartTimestamp() {
      this.startTimestamp = null;
    }

    /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTimestamp() {
      return this.startTimestamp != null;
    }

    public void setStartTimestampIsSet(boolean value) {
      if (!value) {
        this.startTimestamp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_PLAN_ID:
        if (value == null) {
          unsetCruisePlanId();
        } else {
          setCruisePlanId((String)value);
        }
        break;

      case START_TIMESTAMP:
        if (value == null) {
          unsetStartTimestamp();
        } else {
          setStartTimestamp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_PLAN_ID:
        return getCruisePlanId();

      case START_TIMESTAMP:
        return getStartTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_PLAN_ID:
        return isSetCruisePlanId();
      case START_TIMESTAMP:
        return isSetStartTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCruiseEventPlaybackVideoUrl_args)
        return this.equals((getCruiseEventPlaybackVideoUrl_args)that);
      return false;
    }

    public boolean equals(getCruiseEventPlaybackVideoUrl_args that) {
      if (that == null)
        return false;

      boolean this_present_cruisePlanId = true && this.isSetCruisePlanId();
      boolean that_present_cruisePlanId = true && that.isSetCruisePlanId();
      if (this_present_cruisePlanId || that_present_cruisePlanId) {
        if (!(this_present_cruisePlanId && that_present_cruisePlanId))
          return false;
        if (!this.cruisePlanId.equals(that.cruisePlanId))
          return false;
      }

      boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
      boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
      if (this_present_startTimestamp || that_present_startTimestamp) {
        if (!(this_present_startTimestamp && that_present_startTimestamp))
          return false;
        if (!this.startTimestamp.equals(that.startTimestamp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCruiseEventPlaybackVideoUrl_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCruiseEventPlaybackVideoUrl_args typedOther = (getCruiseEventPlaybackVideoUrl_args)other;

      lastComparison = Boolean.valueOf(isSetCruisePlanId()).compareTo(typedOther.isSetCruisePlanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruisePlanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruisePlanId, typedOther.cruisePlanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCruiseEventPlaybackVideoUrl_args(");
      boolean first = true;

      sb.append("cruisePlanId:");
      if (this.cruisePlanId == null) {
        sb.append("null");
      } else {
        sb.append(this.cruisePlanId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      if (this.startTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.startTimestamp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCruiseEventPlaybackVideoUrl_argsStandardSchemeFactory implements SchemeFactory {
      public getCruiseEventPlaybackVideoUrl_argsStandardScheme getScheme() {
        return new getCruiseEventPlaybackVideoUrl_argsStandardScheme();
      }
    }

    private static class getCruiseEventPlaybackVideoUrl_argsStandardScheme extends StandardScheme<getCruiseEventPlaybackVideoUrl_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCruiseEventPlaybackVideoUrl_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruisePlanId = iprot.readString();
                struct.setCruisePlanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTimestamp = iprot.readString();
                struct.setStartTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCruiseEventPlaybackVideoUrl_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruisePlanId != null) {
          oprot.writeFieldBegin(CRUISE_PLAN_ID_FIELD_DESC);
          oprot.writeString(struct.cruisePlanId);
          oprot.writeFieldEnd();
        }
        if (struct.startTimestamp != null) {
          oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.startTimestamp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCruiseEventPlaybackVideoUrl_argsTupleSchemeFactory implements SchemeFactory {
      public getCruiseEventPlaybackVideoUrl_argsTupleScheme getScheme() {
        return new getCruiseEventPlaybackVideoUrl_argsTupleScheme();
      }
    }

    private static class getCruiseEventPlaybackVideoUrl_argsTupleScheme extends TupleScheme<getCruiseEventPlaybackVideoUrl_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCruiseEventPlaybackVideoUrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruisePlanId()) {
          optionals.set(0);
        }
        if (struct.isSetStartTimestamp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCruisePlanId()) {
          oprot.writeString(struct.cruisePlanId);
        }
        if (struct.isSetStartTimestamp()) {
          oprot.writeString(struct.startTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCruiseEventPlaybackVideoUrl_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cruisePlanId = iprot.readString();
          struct.setCruisePlanIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTimestamp = iprot.readString();
          struct.setStartTimestampIsSet(true);
        }
      }
    }

  }

  public static class getCruiseEventPlaybackVideoUrl_result implements org.apache.thrift.TBase<getCruiseEventPlaybackVideoUrl_result, getCruiseEventPlaybackVideoUrl_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCruiseEventPlaybackVideoUrl_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCruiseEventPlaybackVideoUrl_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCruiseEventPlaybackVideoUrl_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCruiseEventPlaybackVideoUrl_result.class, metaDataMap);
    }

    public getCruiseEventPlaybackVideoUrl_result() {
    }

    public getCruiseEventPlaybackVideoUrl_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCruiseEventPlaybackVideoUrl_result(getCruiseEventPlaybackVideoUrl_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getCruiseEventPlaybackVideoUrl_result deepCopy() {
      return new getCruiseEventPlaybackVideoUrl_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getCruiseEventPlaybackVideoUrl_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCruiseEventPlaybackVideoUrl_result)
        return this.equals((getCruiseEventPlaybackVideoUrl_result)that);
      return false;
    }

    public boolean equals(getCruiseEventPlaybackVideoUrl_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCruiseEventPlaybackVideoUrl_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCruiseEventPlaybackVideoUrl_result typedOther = (getCruiseEventPlaybackVideoUrl_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCruiseEventPlaybackVideoUrl_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCruiseEventPlaybackVideoUrl_resultStandardSchemeFactory implements SchemeFactory {
      public getCruiseEventPlaybackVideoUrl_resultStandardScheme getScheme() {
        return new getCruiseEventPlaybackVideoUrl_resultStandardScheme();
      }
    }

    private static class getCruiseEventPlaybackVideoUrl_resultStandardScheme extends StandardScheme<getCruiseEventPlaybackVideoUrl_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCruiseEventPlaybackVideoUrl_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCruiseEventPlaybackVideoUrl_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCruiseEventPlaybackVideoUrl_resultTupleSchemeFactory implements SchemeFactory {
      public getCruiseEventPlaybackVideoUrl_resultTupleScheme getScheme() {
        return new getCruiseEventPlaybackVideoUrl_resultTupleScheme();
      }
    }

    private static class getCruiseEventPlaybackVideoUrl_resultTupleScheme extends TupleScheme<getCruiseEventPlaybackVideoUrl_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCruiseEventPlaybackVideoUrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCruiseEventPlaybackVideoUrl_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCruisePlaybackItem_args implements org.apache.thrift.TBase<getCruisePlaybackItem_args, getCruisePlaybackItem_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCruisePlaybackItem_args");

    private static final org.apache.thrift.protocol.TField CRUISE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cruisePlanId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCruisePlaybackItem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCruisePlaybackItem_argsTupleSchemeFactory());
    }

    public String cruisePlanId; // required
    public int index; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_PLAN_ID((short)1, "cruisePlanId"),
      INDEX((short)2, "index");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_PLAN_ID
            return CRUISE_PLAN_ID;
          case 2: // INDEX
            return INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INDEX_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("cruisePlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCruisePlaybackItem_args.class, metaDataMap);
    }

    public getCruisePlaybackItem_args() {
    }

    public getCruisePlaybackItem_args(
      String cruisePlanId,
      int index)
    {
      this();
      this.cruisePlanId = cruisePlanId;
      this.index = index;
      setIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCruisePlaybackItem_args(getCruisePlaybackItem_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetCruisePlanId()) {
        this.cruisePlanId = other.cruisePlanId;
      }
      this.index = other.index;
    }

    public getCruisePlaybackItem_args deepCopy() {
      return new getCruisePlaybackItem_args(this);
    }

    @Override
    public void clear() {
      this.cruisePlanId = null;
      setIndexIsSet(false);
      this.index = 0;
    }

    public String getCruisePlanId() {
      return this.cruisePlanId;
    }

    public getCruisePlaybackItem_args setCruisePlanId(String cruisePlanId) {
      this.cruisePlanId = cruisePlanId;
      return this;
    }

    public void unsetCruisePlanId() {
      this.cruisePlanId = null;
    }

    /** Returns true if field cruisePlanId is set (has been assigned a value) and false otherwise */
    public boolean isSetCruisePlanId() {
      return this.cruisePlanId != null;
    }

    public void setCruisePlanIdIsSet(boolean value) {
      if (!value) {
        this.cruisePlanId = null;
      }
    }

    public int getIndex() {
      return this.index;
    }

    public getCruisePlaybackItem_args setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bit_vector.clear(__INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return __isset_bit_vector.get(__INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bit_vector.set(__INDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_PLAN_ID:
        if (value == null) {
          unsetCruisePlanId();
        } else {
          setCruisePlanId((String)value);
        }
        break;

      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_PLAN_ID:
        return getCruisePlanId();

      case INDEX:
        return Integer.valueOf(getIndex());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_PLAN_ID:
        return isSetCruisePlanId();
      case INDEX:
        return isSetIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCruisePlaybackItem_args)
        return this.equals((getCruisePlaybackItem_args)that);
      return false;
    }

    public boolean equals(getCruisePlaybackItem_args that) {
      if (that == null)
        return false;

      boolean this_present_cruisePlanId = true && this.isSetCruisePlanId();
      boolean that_present_cruisePlanId = true && that.isSetCruisePlanId();
      if (this_present_cruisePlanId || that_present_cruisePlanId) {
        if (!(this_present_cruisePlanId && that_present_cruisePlanId))
          return false;
        if (!this.cruisePlanId.equals(that.cruisePlanId))
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCruisePlaybackItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCruisePlaybackItem_args typedOther = (getCruisePlaybackItem_args)other;

      lastComparison = Boolean.valueOf(isSetCruisePlanId()).compareTo(typedOther.isSetCruisePlanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruisePlanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruisePlanId, typedOther.cruisePlanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCruisePlaybackItem_args(");
      boolean first = true;

      sb.append("cruisePlanId:");
      if (this.cruisePlanId == null) {
        sb.append("null");
      } else {
        sb.append(this.cruisePlanId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCruisePlaybackItem_argsStandardSchemeFactory implements SchemeFactory {
      public getCruisePlaybackItem_argsStandardScheme getScheme() {
        return new getCruisePlaybackItem_argsStandardScheme();
      }
    }

    private static class getCruisePlaybackItem_argsStandardScheme extends StandardScheme<getCruisePlaybackItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCruisePlaybackItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruisePlanId = iprot.readString();
                struct.setCruisePlanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.index = iprot.readI32();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCruisePlaybackItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruisePlanId != null) {
          oprot.writeFieldBegin(CRUISE_PLAN_ID_FIELD_DESC);
          oprot.writeString(struct.cruisePlanId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI32(struct.index);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCruisePlaybackItem_argsTupleSchemeFactory implements SchemeFactory {
      public getCruisePlaybackItem_argsTupleScheme getScheme() {
        return new getCruisePlaybackItem_argsTupleScheme();
      }
    }

    private static class getCruisePlaybackItem_argsTupleScheme extends TupleScheme<getCruisePlaybackItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCruisePlaybackItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruisePlanId()) {
          optionals.set(0);
        }
        if (struct.isSetIndex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCruisePlanId()) {
          oprot.writeString(struct.cruisePlanId);
        }
        if (struct.isSetIndex()) {
          oprot.writeI32(struct.index);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCruisePlaybackItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cruisePlanId = iprot.readString();
          struct.setCruisePlanIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.index = iprot.readI32();
          struct.setIndexIsSet(true);
        }
      }
    }

  }

  public static class getCruisePlaybackItem_result implements org.apache.thrift.TBase<getCruisePlaybackItem_result, getCruisePlaybackItem_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCruisePlaybackItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCruisePlaybackItem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCruisePlaybackItem_resultTupleSchemeFactory());
    }

    public CruiseRecord success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CruiseRecord.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCruisePlaybackItem_result.class, metaDataMap);
    }

    public getCruisePlaybackItem_result() {
    }

    public getCruisePlaybackItem_result(
      CruiseRecord success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCruisePlaybackItem_result(getCruisePlaybackItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new CruiseRecord(other.success);
      }
    }

    public getCruisePlaybackItem_result deepCopy() {
      return new getCruisePlaybackItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CruiseRecord getSuccess() {
      return this.success;
    }

    public getCruisePlaybackItem_result setSuccess(CruiseRecord success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CruiseRecord)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCruisePlaybackItem_result)
        return this.equals((getCruisePlaybackItem_result)that);
      return false;
    }

    public boolean equals(getCruisePlaybackItem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getCruisePlaybackItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getCruisePlaybackItem_result typedOther = (getCruisePlaybackItem_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCruisePlaybackItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCruisePlaybackItem_resultStandardSchemeFactory implements SchemeFactory {
      public getCruisePlaybackItem_resultStandardScheme getScheme() {
        return new getCruisePlaybackItem_resultStandardScheme();
      }
    }

    private static class getCruisePlaybackItem_resultStandardScheme extends StandardScheme<getCruisePlaybackItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCruisePlaybackItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CruiseRecord();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCruisePlaybackItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCruisePlaybackItem_resultTupleSchemeFactory implements SchemeFactory {
      public getCruisePlaybackItem_resultTupleScheme getScheme() {
        return new getCruisePlaybackItem_resultTupleScheme();
      }
    }

    private static class getCruisePlaybackItem_resultTupleScheme extends TupleScheme<getCruisePlaybackItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCruisePlaybackItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCruisePlaybackItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CruiseRecord();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class exportCruiseData_args implements org.apache.thrift.TBase<exportCruiseData_args, exportCruiseData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportCruiseData_args");

    private static final org.apache.thrift.protocol.TField CRUISE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cruisePlanId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SEGMENT_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("segmentIdList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportCruiseData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportCruiseData_argsTupleSchemeFactory());
    }

    public String cruisePlanId; // required
    public List<String> segmentIdList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_PLAN_ID((short)1, "cruisePlanId"),
      SEGMENT_ID_LIST((short)2, "segmentIdList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_PLAN_ID
            return CRUISE_PLAN_ID;
          case 2: // SEGMENT_ID_LIST
            return SEGMENT_ID_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("cruisePlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SEGMENT_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("segmentIdList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportCruiseData_args.class, metaDataMap);
    }

    public exportCruiseData_args() {
    }

    public exportCruiseData_args(
      String cruisePlanId,
      List<String> segmentIdList)
    {
      this();
      this.cruisePlanId = cruisePlanId;
      this.segmentIdList = segmentIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportCruiseData_args(exportCruiseData_args other) {
      if (other.isSetCruisePlanId()) {
        this.cruisePlanId = other.cruisePlanId;
      }
      if (other.isSetSegmentIdList()) {
        List<String> __this__segmentIdList = new ArrayList<String>();
        for (String other_element : other.segmentIdList) {
          __this__segmentIdList.add(other_element);
        }
        this.segmentIdList = __this__segmentIdList;
      }
    }

    public exportCruiseData_args deepCopy() {
      return new exportCruiseData_args(this);
    }

    @Override
    public void clear() {
      this.cruisePlanId = null;
      this.segmentIdList = null;
    }

    public String getCruisePlanId() {
      return this.cruisePlanId;
    }

    public exportCruiseData_args setCruisePlanId(String cruisePlanId) {
      this.cruisePlanId = cruisePlanId;
      return this;
    }

    public void unsetCruisePlanId() {
      this.cruisePlanId = null;
    }

    /** Returns true if field cruisePlanId is set (has been assigned a value) and false otherwise */
    public boolean isSetCruisePlanId() {
      return this.cruisePlanId != null;
    }

    public void setCruisePlanIdIsSet(boolean value) {
      if (!value) {
        this.cruisePlanId = null;
      }
    }

    public int getSegmentIdListSize() {
      return (this.segmentIdList == null) ? 0 : this.segmentIdList.size();
    }

    public java.util.Iterator<String> getSegmentIdListIterator() {
      return (this.segmentIdList == null) ? null : this.segmentIdList.iterator();
    }

    public void addToSegmentIdList(String elem) {
      if (this.segmentIdList == null) {
        this.segmentIdList = new ArrayList<String>();
      }
      this.segmentIdList.add(elem);
    }

    public List<String> getSegmentIdList() {
      return this.segmentIdList;
    }

    public exportCruiseData_args setSegmentIdList(List<String> segmentIdList) {
      this.segmentIdList = segmentIdList;
      return this;
    }

    public void unsetSegmentIdList() {
      this.segmentIdList = null;
    }

    /** Returns true if field segmentIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetSegmentIdList() {
      return this.segmentIdList != null;
    }

    public void setSegmentIdListIsSet(boolean value) {
      if (!value) {
        this.segmentIdList = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_PLAN_ID:
        if (value == null) {
          unsetCruisePlanId();
        } else {
          setCruisePlanId((String)value);
        }
        break;

      case SEGMENT_ID_LIST:
        if (value == null) {
          unsetSegmentIdList();
        } else {
          setSegmentIdList((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_PLAN_ID:
        return getCruisePlanId();

      case SEGMENT_ID_LIST:
        return getSegmentIdList();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_PLAN_ID:
        return isSetCruisePlanId();
      case SEGMENT_ID_LIST:
        return isSetSegmentIdList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportCruiseData_args)
        return this.equals((exportCruiseData_args)that);
      return false;
    }

    public boolean equals(exportCruiseData_args that) {
      if (that == null)
        return false;

      boolean this_present_cruisePlanId = true && this.isSetCruisePlanId();
      boolean that_present_cruisePlanId = true && that.isSetCruisePlanId();
      if (this_present_cruisePlanId || that_present_cruisePlanId) {
        if (!(this_present_cruisePlanId && that_present_cruisePlanId))
          return false;
        if (!this.cruisePlanId.equals(that.cruisePlanId))
          return false;
      }

      boolean this_present_segmentIdList = true && this.isSetSegmentIdList();
      boolean that_present_segmentIdList = true && that.isSetSegmentIdList();
      if (this_present_segmentIdList || that_present_segmentIdList) {
        if (!(this_present_segmentIdList && that_present_segmentIdList))
          return false;
        if (!this.segmentIdList.equals(that.segmentIdList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exportCruiseData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exportCruiseData_args typedOther = (exportCruiseData_args)other;

      lastComparison = Boolean.valueOf(isSetCruisePlanId()).compareTo(typedOther.isSetCruisePlanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruisePlanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruisePlanId, typedOther.cruisePlanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSegmentIdList()).compareTo(typedOther.isSetSegmentIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSegmentIdList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.segmentIdList, typedOther.segmentIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportCruiseData_args(");
      boolean first = true;

      sb.append("cruisePlanId:");
      if (this.cruisePlanId == null) {
        sb.append("null");
      } else {
        sb.append(this.cruisePlanId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("segmentIdList:");
      if (this.segmentIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.segmentIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportCruiseData_argsStandardSchemeFactory implements SchemeFactory {
      public exportCruiseData_argsStandardScheme getScheme() {
        return new exportCruiseData_argsStandardScheme();
      }
    }

    private static class exportCruiseData_argsStandardScheme extends StandardScheme<exportCruiseData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportCruiseData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruisePlanId = iprot.readString();
                struct.setCruisePlanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SEGMENT_ID_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.segmentIdList = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.segmentIdList.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSegmentIdListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportCruiseData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruisePlanId != null) {
          oprot.writeFieldBegin(CRUISE_PLAN_ID_FIELD_DESC);
          oprot.writeString(struct.cruisePlanId);
          oprot.writeFieldEnd();
        }
        if (struct.segmentIdList != null) {
          oprot.writeFieldBegin(SEGMENT_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.segmentIdList.size()));
            for (String _iter19 : struct.segmentIdList)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportCruiseData_argsTupleSchemeFactory implements SchemeFactory {
      public exportCruiseData_argsTupleScheme getScheme() {
        return new exportCruiseData_argsTupleScheme();
      }
    }

    private static class exportCruiseData_argsTupleScheme extends TupleScheme<exportCruiseData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportCruiseData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruisePlanId()) {
          optionals.set(0);
        }
        if (struct.isSetSegmentIdList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCruisePlanId()) {
          oprot.writeString(struct.cruisePlanId);
        }
        if (struct.isSetSegmentIdList()) {
          {
            oprot.writeI32(struct.segmentIdList.size());
            for (String _iter20 : struct.segmentIdList)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportCruiseData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cruisePlanId = iprot.readString();
          struct.setCruisePlanIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.segmentIdList = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.segmentIdList.add(_elem23);
            }
          }
          struct.setSegmentIdListIsSet(true);
        }
      }
    }

  }

  public static class exportCruiseData_result implements org.apache.thrift.TBase<exportCruiseData_result, exportCruiseData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exportCruiseData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new exportCruiseData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new exportCruiseData_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exportCruiseData_result.class, metaDataMap);
    }

    public exportCruiseData_result() {
    }

    public exportCruiseData_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exportCruiseData_result(exportCruiseData_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public exportCruiseData_result deepCopy() {
      return new exportCruiseData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public exportCruiseData_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof exportCruiseData_result)
        return this.equals((exportCruiseData_result)that);
      return false;
    }

    public boolean equals(exportCruiseData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(exportCruiseData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      exportCruiseData_result typedOther = (exportCruiseData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("exportCruiseData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exportCruiseData_resultStandardSchemeFactory implements SchemeFactory {
      public exportCruiseData_resultStandardScheme getScheme() {
        return new exportCruiseData_resultStandardScheme();
      }
    }

    private static class exportCruiseData_resultStandardScheme extends StandardScheme<exportCruiseData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exportCruiseData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exportCruiseData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exportCruiseData_resultTupleSchemeFactory implements SchemeFactory {
      public exportCruiseData_resultTupleScheme getScheme() {
        return new exportCruiseData_resultTupleScheme();
      }
    }

    private static class exportCruiseData_resultTupleScheme extends TupleScheme<exportCruiseData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exportCruiseData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exportCruiseData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class importCruiseData_args implements org.apache.thrift.TBase<importCruiseData_args, importCruiseData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importCruiseData_args");

    private static final org.apache.thrift.protocol.TField CRUISE_FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("cruiseFilePath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new importCruiseData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new importCruiseData_argsTupleSchemeFactory());
    }

    public String cruiseFilePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_FILE_PATH((short)1, "cruiseFilePath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_FILE_PATH
            return CRUISE_FILE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("cruiseFilePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importCruiseData_args.class, metaDataMap);
    }

    public importCruiseData_args() {
    }

    public importCruiseData_args(
      String cruiseFilePath)
    {
      this();
      this.cruiseFilePath = cruiseFilePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public importCruiseData_args(importCruiseData_args other) {
      if (other.isSetCruiseFilePath()) {
        this.cruiseFilePath = other.cruiseFilePath;
      }
    }

    public importCruiseData_args deepCopy() {
      return new importCruiseData_args(this);
    }

    @Override
    public void clear() {
      this.cruiseFilePath = null;
    }

    public String getCruiseFilePath() {
      return this.cruiseFilePath;
    }

    public importCruiseData_args setCruiseFilePath(String cruiseFilePath) {
      this.cruiseFilePath = cruiseFilePath;
      return this;
    }

    public void unsetCruiseFilePath() {
      this.cruiseFilePath = null;
    }

    /** Returns true if field cruiseFilePath is set (has been assigned a value) and false otherwise */
    public boolean isSetCruiseFilePath() {
      return this.cruiseFilePath != null;
    }

    public void setCruiseFilePathIsSet(boolean value) {
      if (!value) {
        this.cruiseFilePath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_FILE_PATH:
        if (value == null) {
          unsetCruiseFilePath();
        } else {
          setCruiseFilePath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_FILE_PATH:
        return getCruiseFilePath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_FILE_PATH:
        return isSetCruiseFilePath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof importCruiseData_args)
        return this.equals((importCruiseData_args)that);
      return false;
    }

    public boolean equals(importCruiseData_args that) {
      if (that == null)
        return false;

      boolean this_present_cruiseFilePath = true && this.isSetCruiseFilePath();
      boolean that_present_cruiseFilePath = true && that.isSetCruiseFilePath();
      if (this_present_cruiseFilePath || that_present_cruiseFilePath) {
        if (!(this_present_cruiseFilePath && that_present_cruiseFilePath))
          return false;
        if (!this.cruiseFilePath.equals(that.cruiseFilePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(importCruiseData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      importCruiseData_args typedOther = (importCruiseData_args)other;

      lastComparison = Boolean.valueOf(isSetCruiseFilePath()).compareTo(typedOther.isSetCruiseFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruiseFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruiseFilePath, typedOther.cruiseFilePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("importCruiseData_args(");
      boolean first = true;

      sb.append("cruiseFilePath:");
      if (this.cruiseFilePath == null) {
        sb.append("null");
      } else {
        sb.append(this.cruiseFilePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class importCruiseData_argsStandardSchemeFactory implements SchemeFactory {
      public importCruiseData_argsStandardScheme getScheme() {
        return new importCruiseData_argsStandardScheme();
      }
    }

    private static class importCruiseData_argsStandardScheme extends StandardScheme<importCruiseData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, importCruiseData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruiseFilePath = iprot.readString();
                struct.setCruiseFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, importCruiseData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruiseFilePath != null) {
          oprot.writeFieldBegin(CRUISE_FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.cruiseFilePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class importCruiseData_argsTupleSchemeFactory implements SchemeFactory {
      public importCruiseData_argsTupleScheme getScheme() {
        return new importCruiseData_argsTupleScheme();
      }
    }

    private static class importCruiseData_argsTupleScheme extends TupleScheme<importCruiseData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, importCruiseData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruiseFilePath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCruiseFilePath()) {
          oprot.writeString(struct.cruiseFilePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, importCruiseData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cruiseFilePath = iprot.readString();
          struct.setCruiseFilePathIsSet(true);
        }
      }
    }

  }

  public static class importCruiseData_result implements org.apache.thrift.TBase<importCruiseData_result, importCruiseData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importCruiseData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new importCruiseData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new importCruiseData_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importCruiseData_result.class, metaDataMap);
    }

    public importCruiseData_result() {
    }

    public importCruiseData_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public importCruiseData_result(importCruiseData_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public importCruiseData_result deepCopy() {
      return new importCruiseData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public importCruiseData_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof importCruiseData_result)
        return this.equals((importCruiseData_result)that);
      return false;
    }

    public boolean equals(importCruiseData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(importCruiseData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      importCruiseData_result typedOther = (importCruiseData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("importCruiseData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class importCruiseData_resultStandardSchemeFactory implements SchemeFactory {
      public importCruiseData_resultStandardScheme getScheme() {
        return new importCruiseData_resultStandardScheme();
      }
    }

    private static class importCruiseData_resultStandardScheme extends StandardScheme<importCruiseData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, importCruiseData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, importCruiseData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class importCruiseData_resultTupleSchemeFactory implements SchemeFactory {
      public importCruiseData_resultTupleScheme getScheme() {
        return new importCruiseData_resultTupleScheme();
      }
    }

    private static class importCruiseData_resultTupleScheme extends TupleScheme<importCruiseData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, importCruiseData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, importCruiseData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteCruisePlan_args implements org.apache.thrift.TBase<deleteCruisePlan_args, deleteCruisePlan_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCruisePlan_args");

    private static final org.apache.thrift.protocol.TField CRUISE_PLAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cruisePlanId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCruisePlan_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCruisePlan_argsTupleSchemeFactory());
    }

    public String cruisePlanId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CRUISE_PLAN_ID((short)1, "cruisePlanId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CRUISE_PLAN_ID
            return CRUISE_PLAN_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CRUISE_PLAN_ID, new org.apache.thrift.meta_data.FieldMetaData("cruisePlanId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCruisePlan_args.class, metaDataMap);
    }

    public deleteCruisePlan_args() {
    }

    public deleteCruisePlan_args(
      String cruisePlanId)
    {
      this();
      this.cruisePlanId = cruisePlanId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCruisePlan_args(deleteCruisePlan_args other) {
      if (other.isSetCruisePlanId()) {
        this.cruisePlanId = other.cruisePlanId;
      }
    }

    public deleteCruisePlan_args deepCopy() {
      return new deleteCruisePlan_args(this);
    }

    @Override
    public void clear() {
      this.cruisePlanId = null;
    }

    public String getCruisePlanId() {
      return this.cruisePlanId;
    }

    public deleteCruisePlan_args setCruisePlanId(String cruisePlanId) {
      this.cruisePlanId = cruisePlanId;
      return this;
    }

    public void unsetCruisePlanId() {
      this.cruisePlanId = null;
    }

    /** Returns true if field cruisePlanId is set (has been assigned a value) and false otherwise */
    public boolean isSetCruisePlanId() {
      return this.cruisePlanId != null;
    }

    public void setCruisePlanIdIsSet(boolean value) {
      if (!value) {
        this.cruisePlanId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CRUISE_PLAN_ID:
        if (value == null) {
          unsetCruisePlanId();
        } else {
          setCruisePlanId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CRUISE_PLAN_ID:
        return getCruisePlanId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CRUISE_PLAN_ID:
        return isSetCruisePlanId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCruisePlan_args)
        return this.equals((deleteCruisePlan_args)that);
      return false;
    }

    public boolean equals(deleteCruisePlan_args that) {
      if (that == null)
        return false;

      boolean this_present_cruisePlanId = true && this.isSetCruisePlanId();
      boolean that_present_cruisePlanId = true && that.isSetCruisePlanId();
      if (this_present_cruisePlanId || that_present_cruisePlanId) {
        if (!(this_present_cruisePlanId && that_present_cruisePlanId))
          return false;
        if (!this.cruisePlanId.equals(that.cruisePlanId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteCruisePlan_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteCruisePlan_args typedOther = (deleteCruisePlan_args)other;

      lastComparison = Boolean.valueOf(isSetCruisePlanId()).compareTo(typedOther.isSetCruisePlanId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCruisePlanId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cruisePlanId, typedOther.cruisePlanId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCruisePlan_args(");
      boolean first = true;

      sb.append("cruisePlanId:");
      if (this.cruisePlanId == null) {
        sb.append("null");
      } else {
        sb.append(this.cruisePlanId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCruisePlan_argsStandardSchemeFactory implements SchemeFactory {
      public deleteCruisePlan_argsStandardScheme getScheme() {
        return new deleteCruisePlan_argsStandardScheme();
      }
    }

    private static class deleteCruisePlan_argsStandardScheme extends StandardScheme<deleteCruisePlan_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCruisePlan_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CRUISE_PLAN_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cruisePlanId = iprot.readString();
                struct.setCruisePlanIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCruisePlan_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cruisePlanId != null) {
          oprot.writeFieldBegin(CRUISE_PLAN_ID_FIELD_DESC);
          oprot.writeString(struct.cruisePlanId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCruisePlan_argsTupleSchemeFactory implements SchemeFactory {
      public deleteCruisePlan_argsTupleScheme getScheme() {
        return new deleteCruisePlan_argsTupleScheme();
      }
    }

    private static class deleteCruisePlan_argsTupleScheme extends TupleScheme<deleteCruisePlan_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCruisePlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCruisePlanId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCruisePlanId()) {
          oprot.writeString(struct.cruisePlanId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCruisePlan_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cruisePlanId = iprot.readString();
          struct.setCruisePlanIdIsSet(true);
        }
      }
    }

  }

  public static class deleteCruisePlan_result implements org.apache.thrift.TBase<deleteCruisePlan_result, deleteCruisePlan_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCruisePlan_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteCruisePlan_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteCruisePlan_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCruisePlan_result.class, metaDataMap);
    }

    public deleteCruisePlan_result() {
    }

    public deleteCruisePlan_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCruisePlan_result(deleteCruisePlan_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public deleteCruisePlan_result deepCopy() {
      return new deleteCruisePlan_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteCruisePlan_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteCruisePlan_result)
        return this.equals((deleteCruisePlan_result)that);
      return false;
    }

    public boolean equals(deleteCruisePlan_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteCruisePlan_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteCruisePlan_result typedOther = (deleteCruisePlan_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteCruisePlan_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCruisePlan_resultStandardSchemeFactory implements SchemeFactory {
      public deleteCruisePlan_resultStandardScheme getScheme() {
        return new deleteCruisePlan_resultStandardScheme();
      }
    }

    private static class deleteCruisePlan_resultStandardScheme extends StandardScheme<deleteCruisePlan_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCruisePlan_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCruisePlan_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCruisePlan_resultTupleSchemeFactory implements SchemeFactory {
      public deleteCruisePlan_resultTupleScheme getScheme() {
        return new deleteCruisePlan_resultTupleScheme();
      }
    }

    private static class deleteCruisePlan_resultTupleScheme extends TupleScheme<deleteCruisePlan_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCruisePlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCruisePlan_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
