/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.waterway.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Compass Data.
 * (1) pitch - -90.0~90.0, up-positive, down-negative.
 * (2) roll - -180.0~180.0, right-positive, left-negative.
 * (3) heading - 0~360.0, 0-true north, increase clock-wise.
 */
public class CompassData implements org.apache.thrift.TBase<CompassData, CompassData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompassData");

  private static final org.apache.thrift.protocol.TField PITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("pitch", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField ROLL_FIELD_DESC = new org.apache.thrift.protocol.TField("roll", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField HEADING_FIELD_DESC = new org.apache.thrift.protocol.TField("heading", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CompassDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CompassDataTupleSchemeFactory());
  }

  public double pitch; // required
  public double roll; // required
  public double heading; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PITCH((short)1, "pitch"),
    ROLL((short)2, "roll"),
    HEADING((short)3, "heading");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PITCH
          return PITCH;
        case 2: // ROLL
          return ROLL;
        case 3: // HEADING
          return HEADING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PITCH_ISSET_ID = 0;
  private static final int __ROLL_ISSET_ID = 1;
  private static final int __HEADING_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PITCH, new org.apache.thrift.meta_data.FieldMetaData("pitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ROLL, new org.apache.thrift.meta_data.FieldMetaData("roll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HEADING, new org.apache.thrift.meta_data.FieldMetaData("heading", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompassData.class, metaDataMap);
  }

  public CompassData() {
  }

  public CompassData(
    double pitch,
    double roll,
    double heading)
  {
    this();
    this.pitch = pitch;
    setPitchIsSet(true);
    this.roll = roll;
    setRollIsSet(true);
    this.heading = heading;
    setHeadingIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompassData(CompassData other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.pitch = other.pitch;
    this.roll = other.roll;
    this.heading = other.heading;
  }

  public CompassData deepCopy() {
    return new CompassData(this);
  }

  @Override
  public void clear() {
    setPitchIsSet(false);
    this.pitch = 0.0;
    setRollIsSet(false);
    this.roll = 0.0;
    setHeadingIsSet(false);
    this.heading = 0.0;
  }

  public double getPitch() {
    return this.pitch;
  }

  public CompassData setPitch(double pitch) {
    this.pitch = pitch;
    setPitchIsSet(true);
    return this;
  }

  public void unsetPitch() {
    __isset_bit_vector.clear(__PITCH_ISSET_ID);
  }

  /** Returns true if field pitch is set (has been assigned a value) and false otherwise */
  public boolean isSetPitch() {
    return __isset_bit_vector.get(__PITCH_ISSET_ID);
  }

  public void setPitchIsSet(boolean value) {
    __isset_bit_vector.set(__PITCH_ISSET_ID, value);
  }

  public double getRoll() {
    return this.roll;
  }

  public CompassData setRoll(double roll) {
    this.roll = roll;
    setRollIsSet(true);
    return this;
  }

  public void unsetRoll() {
    __isset_bit_vector.clear(__ROLL_ISSET_ID);
  }

  /** Returns true if field roll is set (has been assigned a value) and false otherwise */
  public boolean isSetRoll() {
    return __isset_bit_vector.get(__ROLL_ISSET_ID);
  }

  public void setRollIsSet(boolean value) {
    __isset_bit_vector.set(__ROLL_ISSET_ID, value);
  }

  public double getHeading() {
    return this.heading;
  }

  public CompassData setHeading(double heading) {
    this.heading = heading;
    setHeadingIsSet(true);
    return this;
  }

  public void unsetHeading() {
    __isset_bit_vector.clear(__HEADING_ISSET_ID);
  }

  /** Returns true if field heading is set (has been assigned a value) and false otherwise */
  public boolean isSetHeading() {
    return __isset_bit_vector.get(__HEADING_ISSET_ID);
  }

  public void setHeadingIsSet(boolean value) {
    __isset_bit_vector.set(__HEADING_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PITCH:
      if (value == null) {
        unsetPitch();
      } else {
        setPitch((Double)value);
      }
      break;

    case ROLL:
      if (value == null) {
        unsetRoll();
      } else {
        setRoll((Double)value);
      }
      break;

    case HEADING:
      if (value == null) {
        unsetHeading();
      } else {
        setHeading((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PITCH:
      return Double.valueOf(getPitch());

    case ROLL:
      return Double.valueOf(getRoll());

    case HEADING:
      return Double.valueOf(getHeading());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PITCH:
      return isSetPitch();
    case ROLL:
      return isSetRoll();
    case HEADING:
      return isSetHeading();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CompassData)
      return this.equals((CompassData)that);
    return false;
  }

  public boolean equals(CompassData that) {
    if (that == null)
      return false;

    boolean this_present_pitch = true;
    boolean that_present_pitch = true;
    if (this_present_pitch || that_present_pitch) {
      if (!(this_present_pitch && that_present_pitch))
        return false;
      if (this.pitch != that.pitch)
        return false;
    }

    boolean this_present_roll = true;
    boolean that_present_roll = true;
    if (this_present_roll || that_present_roll) {
      if (!(this_present_roll && that_present_roll))
        return false;
      if (this.roll != that.roll)
        return false;
    }

    boolean this_present_heading = true;
    boolean that_present_heading = true;
    if (this_present_heading || that_present_heading) {
      if (!(this_present_heading && that_present_heading))
        return false;
      if (this.heading != that.heading)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CompassData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CompassData typedOther = (CompassData)other;

    lastComparison = Boolean.valueOf(isSetPitch()).compareTo(typedOther.isSetPitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pitch, typedOther.pitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoll()).compareTo(typedOther.isSetRoll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roll, typedOther.roll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeading()).compareTo(typedOther.isSetHeading());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeading()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.heading, typedOther.heading);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CompassData(");
    boolean first = true;

    sb.append("pitch:");
    sb.append(this.pitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roll:");
    sb.append(this.roll);
    first = false;
    if (!first) sb.append(", ");
    sb.append("heading:");
    sb.append(this.heading);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompassDataStandardSchemeFactory implements SchemeFactory {
    public CompassDataStandardScheme getScheme() {
      return new CompassDataStandardScheme();
    }
  }

  private static class CompassDataStandardScheme extends StandardScheme<CompassData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompassData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.pitch = iprot.readDouble();
              struct.setPitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROLL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.roll = iprot.readDouble();
              struct.setRollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HEADING
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.heading = iprot.readDouble();
              struct.setHeadingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompassData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PITCH_FIELD_DESC);
      oprot.writeDouble(struct.pitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROLL_FIELD_DESC);
      oprot.writeDouble(struct.roll);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEADING_FIELD_DESC);
      oprot.writeDouble(struct.heading);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompassDataTupleSchemeFactory implements SchemeFactory {
    public CompassDataTupleScheme getScheme() {
      return new CompassDataTupleScheme();
    }
  }

  private static class CompassDataTupleScheme extends TupleScheme<CompassData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompassData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPitch()) {
        optionals.set(0);
      }
      if (struct.isSetRoll()) {
        optionals.set(1);
      }
      if (struct.isSetHeading()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPitch()) {
        oprot.writeDouble(struct.pitch);
      }
      if (struct.isSetRoll()) {
        oprot.writeDouble(struct.roll);
      }
      if (struct.isSetHeading()) {
        oprot.writeDouble(struct.heading);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompassData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.pitch = iprot.readDouble();
        struct.setPitchIsSet(true);
      }
      if (incoming.get(1)) {
        struct.roll = iprot.readDouble();
        struct.setRollIsSet(true);
      }
      if (incoming.get(2)) {
        struct.heading = iprot.readDouble();
        struct.setHeadingIsSet(true);
      }
    }
  }

}

