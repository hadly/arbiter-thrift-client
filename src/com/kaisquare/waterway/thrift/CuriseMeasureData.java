/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.waterway.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Curise Measure Data.
 * (1) gps_data - gps value.
 * (2) compass_data - compass value.
 * (3) distancer_data - distancer value.
 * (4) gps_status - GPS device's status:
 *     "online" if the device is currently connected and able to communicate with the backend (Core Engine).
 *     "offline" if the device is not connected to the backend.
 * (5) compass_status - compass's status, "online" or "offline".
 * (6) distancer_status - distancer's status, "online" or "offline".
 */
public class CuriseMeasureData implements org.apache.thrift.TBase<CuriseMeasureData, CuriseMeasureData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CuriseMeasureData");

  private static final org.apache.thrift.protocol.TField GPS_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("gps_data", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COMPASS_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("compass_data", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DISTANCER_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("distancer_data", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField GPS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("gps_status", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMPASS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("compass_status", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DISTANCER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("distancer_status", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CuriseMeasureDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CuriseMeasureDataTupleSchemeFactory());
  }

  public GPSData gps_data; // required
  public CompassData compass_data; // required
  public DistancerData distancer_data; // required
  public String gps_status; // required
  public String compass_status; // required
  public String distancer_status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GPS_DATA((short)1, "gps_data"),
    COMPASS_DATA((short)2, "compass_data"),
    DISTANCER_DATA((short)3, "distancer_data"),
    GPS_STATUS((short)4, "gps_status"),
    COMPASS_STATUS((short)5, "compass_status"),
    DISTANCER_STATUS((short)6, "distancer_status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GPS_DATA
          return GPS_DATA;
        case 2: // COMPASS_DATA
          return COMPASS_DATA;
        case 3: // DISTANCER_DATA
          return DISTANCER_DATA;
        case 4: // GPS_STATUS
          return GPS_STATUS;
        case 5: // COMPASS_STATUS
          return COMPASS_STATUS;
        case 6: // DISTANCER_STATUS
          return DISTANCER_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GPS_DATA, new org.apache.thrift.meta_data.FieldMetaData("gps_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GPSData.class)));
    tmpMap.put(_Fields.COMPASS_DATA, new org.apache.thrift.meta_data.FieldMetaData("compass_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompassData.class)));
    tmpMap.put(_Fields.DISTANCER_DATA, new org.apache.thrift.meta_data.FieldMetaData("distancer_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DistancerData.class)));
    tmpMap.put(_Fields.GPS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("gps_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPASS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("compass_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTANCER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("distancer_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CuriseMeasureData.class, metaDataMap);
  }

  public CuriseMeasureData() {
  }

  public CuriseMeasureData(
    GPSData gps_data,
    CompassData compass_data,
    DistancerData distancer_data,
    String gps_status,
    String compass_status,
    String distancer_status)
  {
    this();
    this.gps_data = gps_data;
    this.compass_data = compass_data;
    this.distancer_data = distancer_data;
    this.gps_status = gps_status;
    this.compass_status = compass_status;
    this.distancer_status = distancer_status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CuriseMeasureData(CuriseMeasureData other) {
    if (other.isSetGps_data()) {
      this.gps_data = new GPSData(other.gps_data);
    }
    if (other.isSetCompass_data()) {
      this.compass_data = new CompassData(other.compass_data);
    }
    if (other.isSetDistancer_data()) {
      this.distancer_data = new DistancerData(other.distancer_data);
    }
    if (other.isSetGps_status()) {
      this.gps_status = other.gps_status;
    }
    if (other.isSetCompass_status()) {
      this.compass_status = other.compass_status;
    }
    if (other.isSetDistancer_status()) {
      this.distancer_status = other.distancer_status;
    }
  }

  public CuriseMeasureData deepCopy() {
    return new CuriseMeasureData(this);
  }

  @Override
  public void clear() {
    this.gps_data = null;
    this.compass_data = null;
    this.distancer_data = null;
    this.gps_status = null;
    this.compass_status = null;
    this.distancer_status = null;
  }

  public GPSData getGps_data() {
    return this.gps_data;
  }

  public CuriseMeasureData setGps_data(GPSData gps_data) {
    this.gps_data = gps_data;
    return this;
  }

  public void unsetGps_data() {
    this.gps_data = null;
  }

  /** Returns true if field gps_data is set (has been assigned a value) and false otherwise */
  public boolean isSetGps_data() {
    return this.gps_data != null;
  }

  public void setGps_dataIsSet(boolean value) {
    if (!value) {
      this.gps_data = null;
    }
  }

  public CompassData getCompass_data() {
    return this.compass_data;
  }

  public CuriseMeasureData setCompass_data(CompassData compass_data) {
    this.compass_data = compass_data;
    return this;
  }

  public void unsetCompass_data() {
    this.compass_data = null;
  }

  /** Returns true if field compass_data is set (has been assigned a value) and false otherwise */
  public boolean isSetCompass_data() {
    return this.compass_data != null;
  }

  public void setCompass_dataIsSet(boolean value) {
    if (!value) {
      this.compass_data = null;
    }
  }

  public DistancerData getDistancer_data() {
    return this.distancer_data;
  }

  public CuriseMeasureData setDistancer_data(DistancerData distancer_data) {
    this.distancer_data = distancer_data;
    return this;
  }

  public void unsetDistancer_data() {
    this.distancer_data = null;
  }

  /** Returns true if field distancer_data is set (has been assigned a value) and false otherwise */
  public boolean isSetDistancer_data() {
    return this.distancer_data != null;
  }

  public void setDistancer_dataIsSet(boolean value) {
    if (!value) {
      this.distancer_data = null;
    }
  }

  public String getGps_status() {
    return this.gps_status;
  }

  public CuriseMeasureData setGps_status(String gps_status) {
    this.gps_status = gps_status;
    return this;
  }

  public void unsetGps_status() {
    this.gps_status = null;
  }

  /** Returns true if field gps_status is set (has been assigned a value) and false otherwise */
  public boolean isSetGps_status() {
    return this.gps_status != null;
  }

  public void setGps_statusIsSet(boolean value) {
    if (!value) {
      this.gps_status = null;
    }
  }

  public String getCompass_status() {
    return this.compass_status;
  }

  public CuriseMeasureData setCompass_status(String compass_status) {
    this.compass_status = compass_status;
    return this;
  }

  public void unsetCompass_status() {
    this.compass_status = null;
  }

  /** Returns true if field compass_status is set (has been assigned a value) and false otherwise */
  public boolean isSetCompass_status() {
    return this.compass_status != null;
  }

  public void setCompass_statusIsSet(boolean value) {
    if (!value) {
      this.compass_status = null;
    }
  }

  public String getDistancer_status() {
    return this.distancer_status;
  }

  public CuriseMeasureData setDistancer_status(String distancer_status) {
    this.distancer_status = distancer_status;
    return this;
  }

  public void unsetDistancer_status() {
    this.distancer_status = null;
  }

  /** Returns true if field distancer_status is set (has been assigned a value) and false otherwise */
  public boolean isSetDistancer_status() {
    return this.distancer_status != null;
  }

  public void setDistancer_statusIsSet(boolean value) {
    if (!value) {
      this.distancer_status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GPS_DATA:
      if (value == null) {
        unsetGps_data();
      } else {
        setGps_data((GPSData)value);
      }
      break;

    case COMPASS_DATA:
      if (value == null) {
        unsetCompass_data();
      } else {
        setCompass_data((CompassData)value);
      }
      break;

    case DISTANCER_DATA:
      if (value == null) {
        unsetDistancer_data();
      } else {
        setDistancer_data((DistancerData)value);
      }
      break;

    case GPS_STATUS:
      if (value == null) {
        unsetGps_status();
      } else {
        setGps_status((String)value);
      }
      break;

    case COMPASS_STATUS:
      if (value == null) {
        unsetCompass_status();
      } else {
        setCompass_status((String)value);
      }
      break;

    case DISTANCER_STATUS:
      if (value == null) {
        unsetDistancer_status();
      } else {
        setDistancer_status((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GPS_DATA:
      return getGps_data();

    case COMPASS_DATA:
      return getCompass_data();

    case DISTANCER_DATA:
      return getDistancer_data();

    case GPS_STATUS:
      return getGps_status();

    case COMPASS_STATUS:
      return getCompass_status();

    case DISTANCER_STATUS:
      return getDistancer_status();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GPS_DATA:
      return isSetGps_data();
    case COMPASS_DATA:
      return isSetCompass_data();
    case DISTANCER_DATA:
      return isSetDistancer_data();
    case GPS_STATUS:
      return isSetGps_status();
    case COMPASS_STATUS:
      return isSetCompass_status();
    case DISTANCER_STATUS:
      return isSetDistancer_status();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CuriseMeasureData)
      return this.equals((CuriseMeasureData)that);
    return false;
  }

  public boolean equals(CuriseMeasureData that) {
    if (that == null)
      return false;

    boolean this_present_gps_data = true && this.isSetGps_data();
    boolean that_present_gps_data = true && that.isSetGps_data();
    if (this_present_gps_data || that_present_gps_data) {
      if (!(this_present_gps_data && that_present_gps_data))
        return false;
      if (!this.gps_data.equals(that.gps_data))
        return false;
    }

    boolean this_present_compass_data = true && this.isSetCompass_data();
    boolean that_present_compass_data = true && that.isSetCompass_data();
    if (this_present_compass_data || that_present_compass_data) {
      if (!(this_present_compass_data && that_present_compass_data))
        return false;
      if (!this.compass_data.equals(that.compass_data))
        return false;
    }

    boolean this_present_distancer_data = true && this.isSetDistancer_data();
    boolean that_present_distancer_data = true && that.isSetDistancer_data();
    if (this_present_distancer_data || that_present_distancer_data) {
      if (!(this_present_distancer_data && that_present_distancer_data))
        return false;
      if (!this.distancer_data.equals(that.distancer_data))
        return false;
    }

    boolean this_present_gps_status = true && this.isSetGps_status();
    boolean that_present_gps_status = true && that.isSetGps_status();
    if (this_present_gps_status || that_present_gps_status) {
      if (!(this_present_gps_status && that_present_gps_status))
        return false;
      if (!this.gps_status.equals(that.gps_status))
        return false;
    }

    boolean this_present_compass_status = true && this.isSetCompass_status();
    boolean that_present_compass_status = true && that.isSetCompass_status();
    if (this_present_compass_status || that_present_compass_status) {
      if (!(this_present_compass_status && that_present_compass_status))
        return false;
      if (!this.compass_status.equals(that.compass_status))
        return false;
    }

    boolean this_present_distancer_status = true && this.isSetDistancer_status();
    boolean that_present_distancer_status = true && that.isSetDistancer_status();
    if (this_present_distancer_status || that_present_distancer_status) {
      if (!(this_present_distancer_status && that_present_distancer_status))
        return false;
      if (!this.distancer_status.equals(that.distancer_status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CuriseMeasureData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CuriseMeasureData typedOther = (CuriseMeasureData)other;

    lastComparison = Boolean.valueOf(isSetGps_data()).compareTo(typedOther.isSetGps_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGps_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gps_data, typedOther.gps_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompass_data()).compareTo(typedOther.isSetCompass_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompass_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compass_data, typedOther.compass_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistancer_data()).compareTo(typedOther.isSetDistancer_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistancer_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distancer_data, typedOther.distancer_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGps_status()).compareTo(typedOther.isSetGps_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGps_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gps_status, typedOther.gps_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompass_status()).compareTo(typedOther.isSetCompass_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompass_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compass_status, typedOther.compass_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistancer_status()).compareTo(typedOther.isSetDistancer_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistancer_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distancer_status, typedOther.distancer_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CuriseMeasureData(");
    boolean first = true;

    sb.append("gps_data:");
    if (this.gps_data == null) {
      sb.append("null");
    } else {
      sb.append(this.gps_data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compass_data:");
    if (this.compass_data == null) {
      sb.append("null");
    } else {
      sb.append(this.compass_data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("distancer_data:");
    if (this.distancer_data == null) {
      sb.append("null");
    } else {
      sb.append(this.distancer_data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gps_status:");
    if (this.gps_status == null) {
      sb.append("null");
    } else {
      sb.append(this.gps_status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compass_status:");
    if (this.compass_status == null) {
      sb.append("null");
    } else {
      sb.append(this.compass_status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("distancer_status:");
    if (this.distancer_status == null) {
      sb.append("null");
    } else {
      sb.append(this.distancer_status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CuriseMeasureDataStandardSchemeFactory implements SchemeFactory {
    public CuriseMeasureDataStandardScheme getScheme() {
      return new CuriseMeasureDataStandardScheme();
    }
  }

  private static class CuriseMeasureDataStandardScheme extends StandardScheme<CuriseMeasureData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CuriseMeasureData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GPS_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.gps_data = new GPSData();
              struct.gps_data.read(iprot);
              struct.setGps_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPASS_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.compass_data = new CompassData();
              struct.compass_data.read(iprot);
              struct.setCompass_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DISTANCER_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.distancer_data = new DistancerData();
              struct.distancer_data.read(iprot);
              struct.setDistancer_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GPS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gps_status = iprot.readString();
              struct.setGps_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPASS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compass_status = iprot.readString();
              struct.setCompass_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DISTANCER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.distancer_status = iprot.readString();
              struct.setDistancer_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CuriseMeasureData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gps_data != null) {
        oprot.writeFieldBegin(GPS_DATA_FIELD_DESC);
        struct.gps_data.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.compass_data != null) {
        oprot.writeFieldBegin(COMPASS_DATA_FIELD_DESC);
        struct.compass_data.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.distancer_data != null) {
        oprot.writeFieldBegin(DISTANCER_DATA_FIELD_DESC);
        struct.distancer_data.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.gps_status != null) {
        oprot.writeFieldBegin(GPS_STATUS_FIELD_DESC);
        oprot.writeString(struct.gps_status);
        oprot.writeFieldEnd();
      }
      if (struct.compass_status != null) {
        oprot.writeFieldBegin(COMPASS_STATUS_FIELD_DESC);
        oprot.writeString(struct.compass_status);
        oprot.writeFieldEnd();
      }
      if (struct.distancer_status != null) {
        oprot.writeFieldBegin(DISTANCER_STATUS_FIELD_DESC);
        oprot.writeString(struct.distancer_status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CuriseMeasureDataTupleSchemeFactory implements SchemeFactory {
    public CuriseMeasureDataTupleScheme getScheme() {
      return new CuriseMeasureDataTupleScheme();
    }
  }

  private static class CuriseMeasureDataTupleScheme extends TupleScheme<CuriseMeasureData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CuriseMeasureData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGps_data()) {
        optionals.set(0);
      }
      if (struct.isSetCompass_data()) {
        optionals.set(1);
      }
      if (struct.isSetDistancer_data()) {
        optionals.set(2);
      }
      if (struct.isSetGps_status()) {
        optionals.set(3);
      }
      if (struct.isSetCompass_status()) {
        optionals.set(4);
      }
      if (struct.isSetDistancer_status()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetGps_data()) {
        struct.gps_data.write(oprot);
      }
      if (struct.isSetCompass_data()) {
        struct.compass_data.write(oprot);
      }
      if (struct.isSetDistancer_data()) {
        struct.distancer_data.write(oprot);
      }
      if (struct.isSetGps_status()) {
        oprot.writeString(struct.gps_status);
      }
      if (struct.isSetCompass_status()) {
        oprot.writeString(struct.compass_status);
      }
      if (struct.isSetDistancer_status()) {
        oprot.writeString(struct.distancer_status);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CuriseMeasureData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.gps_data = new GPSData();
        struct.gps_data.read(iprot);
        struct.setGps_dataIsSet(true);
      }
      if (incoming.get(1)) {
        struct.compass_data = new CompassData();
        struct.compass_data.read(iprot);
        struct.setCompass_dataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.distancer_data = new DistancerData();
        struct.distancer_data.read(iprot);
        struct.setDistancer_dataIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gps_status = iprot.readString();
        struct.setGps_statusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.compass_status = iprot.readString();
        struct.setCompass_statusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.distancer_status = iprot.readString();
        struct.setDistancer_statusIsSet(true);
      }
    }
  }

}

