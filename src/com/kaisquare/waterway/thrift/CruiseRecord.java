/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.waterway.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Cruise Record Item.
 * (1) index - index of the records, [0,total), negative indicates invalid record.
 * (2) total - total number of the records.
 * (3) timestamp - UTC timestamp.
 * (4) snapshot_url - http snapshot url.
 * (5) gps_data - gps value.
 */
public class CruiseRecord implements org.apache.thrift.TBase<CruiseRecord, CruiseRecord._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CruiseRecord");

  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot_url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GPS_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("gps_data", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CruiseRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CruiseRecordTupleSchemeFactory());
  }

  public int index; // required
  public int total; // required
  public long timestamp; // required
  public String snapshot_url; // required
  public GPSData gps_data; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INDEX((short)1, "index"),
    TOTAL((short)2, "total"),
    TIMESTAMP((short)3, "timestamp"),
    SNAPSHOT_URL((short)4, "snapshot_url"),
    GPS_DATA((short)5, "gps_data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INDEX
          return INDEX;
        case 2: // TOTAL
          return TOTAL;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // SNAPSHOT_URL
          return SNAPSHOT_URL;
        case 5: // GPS_DATA
          return GPS_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INDEX_ISSET_ID = 0;
  private static final int __TOTAL_ISSET_ID = 1;
  private static final int __TIMESTAMP_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SNAPSHOT_URL, new org.apache.thrift.meta_data.FieldMetaData("snapshot_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GPS_DATA, new org.apache.thrift.meta_data.FieldMetaData("gps_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GPSData.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CruiseRecord.class, metaDataMap);
  }

  public CruiseRecord() {
  }

  public CruiseRecord(
    int index,
    int total,
    long timestamp,
    String snapshot_url,
    GPSData gps_data)
  {
    this();
    this.index = index;
    setIndexIsSet(true);
    this.total = total;
    setTotalIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.snapshot_url = snapshot_url;
    this.gps_data = gps_data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CruiseRecord(CruiseRecord other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.index = other.index;
    this.total = other.total;
    this.timestamp = other.timestamp;
    if (other.isSetSnapshot_url()) {
      this.snapshot_url = other.snapshot_url;
    }
    if (other.isSetGps_data()) {
      this.gps_data = new GPSData(other.gps_data);
    }
  }

  public CruiseRecord deepCopy() {
    return new CruiseRecord(this);
  }

  @Override
  public void clear() {
    setIndexIsSet(false);
    this.index = 0;
    setTotalIsSet(false);
    this.total = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.snapshot_url = null;
    this.gps_data = null;
  }

  public int getIndex() {
    return this.index;
  }

  public CruiseRecord setIndex(int index) {
    this.index = index;
    setIndexIsSet(true);
    return this;
  }

  public void unsetIndex() {
    __isset_bit_vector.clear(__INDEX_ISSET_ID);
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return __isset_bit_vector.get(__INDEX_ISSET_ID);
  }

  public void setIndexIsSet(boolean value) {
    __isset_bit_vector.set(__INDEX_ISSET_ID, value);
  }

  public int getTotal() {
    return this.total;
  }

  public CruiseRecord setTotal(int total) {
    this.total = total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bit_vector.clear(__TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return __isset_bit_vector.get(__TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bit_vector.set(__TOTAL_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public CruiseRecord setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
  }

  public String getSnapshot_url() {
    return this.snapshot_url;
  }

  public CruiseRecord setSnapshot_url(String snapshot_url) {
    this.snapshot_url = snapshot_url;
    return this;
  }

  public void unsetSnapshot_url() {
    this.snapshot_url = null;
  }

  /** Returns true if field snapshot_url is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshot_url() {
    return this.snapshot_url != null;
  }

  public void setSnapshot_urlIsSet(boolean value) {
    if (!value) {
      this.snapshot_url = null;
    }
  }

  public GPSData getGps_data() {
    return this.gps_data;
  }

  public CruiseRecord setGps_data(GPSData gps_data) {
    this.gps_data = gps_data;
    return this;
  }

  public void unsetGps_data() {
    this.gps_data = null;
  }

  /** Returns true if field gps_data is set (has been assigned a value) and false otherwise */
  public boolean isSetGps_data() {
    return this.gps_data != null;
  }

  public void setGps_dataIsSet(boolean value) {
    if (!value) {
      this.gps_data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((Integer)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Integer)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case SNAPSHOT_URL:
      if (value == null) {
        unsetSnapshot_url();
      } else {
        setSnapshot_url((String)value);
      }
      break;

    case GPS_DATA:
      if (value == null) {
        unsetGps_data();
      } else {
        setGps_data((GPSData)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INDEX:
      return Integer.valueOf(getIndex());

    case TOTAL:
      return Integer.valueOf(getTotal());

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case SNAPSHOT_URL:
      return getSnapshot_url();

    case GPS_DATA:
      return getGps_data();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INDEX:
      return isSetIndex();
    case TOTAL:
      return isSetTotal();
    case TIMESTAMP:
      return isSetTimestamp();
    case SNAPSHOT_URL:
      return isSetSnapshot_url();
    case GPS_DATA:
      return isSetGps_data();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CruiseRecord)
      return this.equals((CruiseRecord)that);
    return false;
  }

  public boolean equals(CruiseRecord that) {
    if (that == null)
      return false;

    boolean this_present_index = true;
    boolean that_present_index = true;
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (this.index != that.index)
        return false;
    }

    boolean this_present_total = true;
    boolean that_present_total = true;
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (this.total != that.total)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_snapshot_url = true && this.isSetSnapshot_url();
    boolean that_present_snapshot_url = true && that.isSetSnapshot_url();
    if (this_present_snapshot_url || that_present_snapshot_url) {
      if (!(this_present_snapshot_url && that_present_snapshot_url))
        return false;
      if (!this.snapshot_url.equals(that.snapshot_url))
        return false;
    }

    boolean this_present_gps_data = true && this.isSetGps_data();
    boolean that_present_gps_data = true && that.isSetGps_data();
    if (this_present_gps_data || that_present_gps_data) {
      if (!(this_present_gps_data && that_present_gps_data))
        return false;
      if (!this.gps_data.equals(that.gps_data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CruiseRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CruiseRecord typedOther = (CruiseRecord)other;

    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(typedOther.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, typedOther.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(typedOther.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, typedOther.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapshot_url()).compareTo(typedOther.isSetSnapshot_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshot_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot_url, typedOther.snapshot_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGps_data()).compareTo(typedOther.isSetGps_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGps_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gps_data, typedOther.gps_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CruiseRecord(");
    boolean first = true;

    sb.append("index:");
    sb.append(this.index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total:");
    sb.append(this.total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("snapshot_url:");
    if (this.snapshot_url == null) {
      sb.append("null");
    } else {
      sb.append(this.snapshot_url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gps_data:");
    if (this.gps_data == null) {
      sb.append("null");
    } else {
      sb.append(this.gps_data);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CruiseRecordStandardSchemeFactory implements SchemeFactory {
    public CruiseRecordStandardScheme getScheme() {
      return new CruiseRecordStandardScheme();
    }
  }

  private static class CruiseRecordStandardScheme extends StandardScheme<CruiseRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CruiseRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.index = iprot.readI32();
              struct.setIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total = iprot.readI32();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SNAPSHOT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snapshot_url = iprot.readString();
              struct.setSnapshot_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GPS_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.gps_data = new GPSData();
              struct.gps_data.read(iprot);
              struct.setGps_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CruiseRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI32(struct.index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeI32(struct.total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.snapshot_url != null) {
        oprot.writeFieldBegin(SNAPSHOT_URL_FIELD_DESC);
        oprot.writeString(struct.snapshot_url);
        oprot.writeFieldEnd();
      }
      if (struct.gps_data != null) {
        oprot.writeFieldBegin(GPS_DATA_FIELD_DESC);
        struct.gps_data.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CruiseRecordTupleSchemeFactory implements SchemeFactory {
    public CruiseRecordTupleScheme getScheme() {
      return new CruiseRecordTupleScheme();
    }
  }

  private static class CruiseRecordTupleScheme extends TupleScheme<CruiseRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CruiseRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIndex()) {
        optionals.set(0);
      }
      if (struct.isSetTotal()) {
        optionals.set(1);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetSnapshot_url()) {
        optionals.set(3);
      }
      if (struct.isSetGps_data()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIndex()) {
        oprot.writeI32(struct.index);
      }
      if (struct.isSetTotal()) {
        oprot.writeI32(struct.total);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetSnapshot_url()) {
        oprot.writeString(struct.snapshot_url);
      }
      if (struct.isSetGps_data()) {
        struct.gps_data.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CruiseRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.index = iprot.readI32();
        struct.setIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.total = iprot.readI32();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.snapshot_url = iprot.readString();
        struct.setSnapshot_urlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.gps_data = new GPSData();
        struct.gps_data.read(iprot);
        struct.setGps_dataIsSet(true);
      }
    }
  }

}

