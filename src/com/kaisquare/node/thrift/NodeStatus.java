/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.node.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Node Information
 * (1) createdTime - the UTC timestamp when node service started
 * (2) deviceAdded - the number of devices successfully added
 * (3) deviceFailed - the number of devices failed to add
 * (4) nodeMacAddress - MAC address of node
 * (5) nodeIpAddress - IP address of node
 * (6) kupHost - cloud arbiter hostname of node
 * (7) kupIpAddress - cloud arbiter IP address of node
 * (8) cpuUsage - cpu usage of node [0.00-100.00]
 * (9) memoryUsage - memory usage of node [0.00-100.00]
 * (10) diskUsage - disk usage of node [0.00-100.00]
 * (11) status - detailed device status in this node, ordered by deviceId
 * (12) statusData - json formatted extra information of status
 */
public class NodeStatus implements org.apache.thrift.TBase<NodeStatus, NodeStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NodeStatus");

  private static final org.apache.thrift.protocol.TField CREATED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createdTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DEVICE_ADDED_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceAdded", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DEVICE_FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceFailed", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NODE_MAC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeMacAddress", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NODE_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeIpAddress", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField KUP_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("kupHost", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField KUP_IP_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("kupIpAddress", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CPU_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuUsage", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField MEMORY_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryUsage", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField DISK_USAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("diskUsage", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("statusData", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NodeStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NodeStatusTupleSchemeFactory());
  }

  public long createdTime; // required
  public int deviceAdded; // required
  public int deviceFailed; // required
  public String nodeMacAddress; // required
  public String nodeIpAddress; // required
  public String kupHost; // required
  public String kupIpAddress; // required
  public double cpuUsage; // required
  public double memoryUsage; // required
  public double diskUsage; // required
  public List<DeviceStatus> status; // required
  public String statusData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CREATED_TIME((short)1, "createdTime"),
    DEVICE_ADDED((short)2, "deviceAdded"),
    DEVICE_FAILED((short)3, "deviceFailed"),
    NODE_MAC_ADDRESS((short)4, "nodeMacAddress"),
    NODE_IP_ADDRESS((short)5, "nodeIpAddress"),
    KUP_HOST((short)6, "kupHost"),
    KUP_IP_ADDRESS((short)7, "kupIpAddress"),
    CPU_USAGE((short)8, "cpuUsage"),
    MEMORY_USAGE((short)9, "memoryUsage"),
    DISK_USAGE((short)10, "diskUsage"),
    STATUS((short)11, "status"),
    STATUS_DATA((short)12, "statusData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREATED_TIME
          return CREATED_TIME;
        case 2: // DEVICE_ADDED
          return DEVICE_ADDED;
        case 3: // DEVICE_FAILED
          return DEVICE_FAILED;
        case 4: // NODE_MAC_ADDRESS
          return NODE_MAC_ADDRESS;
        case 5: // NODE_IP_ADDRESS
          return NODE_IP_ADDRESS;
        case 6: // KUP_HOST
          return KUP_HOST;
        case 7: // KUP_IP_ADDRESS
          return KUP_IP_ADDRESS;
        case 8: // CPU_USAGE
          return CPU_USAGE;
        case 9: // MEMORY_USAGE
          return MEMORY_USAGE;
        case 10: // DISK_USAGE
          return DISK_USAGE;
        case 11: // STATUS
          return STATUS;
        case 12: // STATUS_DATA
          return STATUS_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATEDTIME_ISSET_ID = 0;
  private static final int __DEVICEADDED_ISSET_ID = 1;
  private static final int __DEVICEFAILED_ISSET_ID = 2;
  private static final int __CPUUSAGE_ISSET_ID = 3;
  private static final int __MEMORYUSAGE_ISSET_ID = 4;
  private static final int __DISKUSAGE_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREATED_TIME, new org.apache.thrift.meta_data.FieldMetaData("createdTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEVICE_ADDED, new org.apache.thrift.meta_data.FieldMetaData("deviceAdded", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEVICE_FAILED, new org.apache.thrift.meta_data.FieldMetaData("deviceFailed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NODE_MAC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("nodeMacAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NODE_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("nodeIpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KUP_HOST, new org.apache.thrift.meta_data.FieldMetaData("kupHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KUP_IP_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("kupIpAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CPU_USAGE, new org.apache.thrift.meta_data.FieldMetaData("cpuUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEMORY_USAGE, new org.apache.thrift.meta_data.FieldMetaData("memoryUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DISK_USAGE, new org.apache.thrift.meta_data.FieldMetaData("diskUsage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceStatus.class))));
    tmpMap.put(_Fields.STATUS_DATA, new org.apache.thrift.meta_data.FieldMetaData("statusData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeStatus.class, metaDataMap);
  }

  public NodeStatus() {
  }

  public NodeStatus(
    long createdTime,
    int deviceAdded,
    int deviceFailed,
    String nodeMacAddress,
    String nodeIpAddress,
    String kupHost,
    String kupIpAddress,
    double cpuUsage,
    double memoryUsage,
    double diskUsage,
    List<DeviceStatus> status,
    String statusData)
  {
    this();
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
    this.deviceAdded = deviceAdded;
    setDeviceAddedIsSet(true);
    this.deviceFailed = deviceFailed;
    setDeviceFailedIsSet(true);
    this.nodeMacAddress = nodeMacAddress;
    this.nodeIpAddress = nodeIpAddress;
    this.kupHost = kupHost;
    this.kupIpAddress = kupIpAddress;
    this.cpuUsage = cpuUsage;
    setCpuUsageIsSet(true);
    this.memoryUsage = memoryUsage;
    setMemoryUsageIsSet(true);
    this.diskUsage = diskUsage;
    setDiskUsageIsSet(true);
    this.status = status;
    this.statusData = statusData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NodeStatus(NodeStatus other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.createdTime = other.createdTime;
    this.deviceAdded = other.deviceAdded;
    this.deviceFailed = other.deviceFailed;
    if (other.isSetNodeMacAddress()) {
      this.nodeMacAddress = other.nodeMacAddress;
    }
    if (other.isSetNodeIpAddress()) {
      this.nodeIpAddress = other.nodeIpAddress;
    }
    if (other.isSetKupHost()) {
      this.kupHost = other.kupHost;
    }
    if (other.isSetKupIpAddress()) {
      this.kupIpAddress = other.kupIpAddress;
    }
    this.cpuUsage = other.cpuUsage;
    this.memoryUsage = other.memoryUsage;
    this.diskUsage = other.diskUsage;
    if (other.isSetStatus()) {
      List<DeviceStatus> __this__status = new ArrayList<DeviceStatus>();
      for (DeviceStatus other_element : other.status) {
        __this__status.add(new DeviceStatus(other_element));
      }
      this.status = __this__status;
    }
    if (other.isSetStatusData()) {
      this.statusData = other.statusData;
    }
  }

  public NodeStatus deepCopy() {
    return new NodeStatus(this);
  }

  @Override
  public void clear() {
    setCreatedTimeIsSet(false);
    this.createdTime = 0;
    setDeviceAddedIsSet(false);
    this.deviceAdded = 0;
    setDeviceFailedIsSet(false);
    this.deviceFailed = 0;
    this.nodeMacAddress = null;
    this.nodeIpAddress = null;
    this.kupHost = null;
    this.kupIpAddress = null;
    setCpuUsageIsSet(false);
    this.cpuUsage = 0.0;
    setMemoryUsageIsSet(false);
    this.memoryUsage = 0.0;
    setDiskUsageIsSet(false);
    this.diskUsage = 0.0;
    this.status = null;
    this.statusData = null;
  }

  public long getCreatedTime() {
    return this.createdTime;
  }

  public NodeStatus setCreatedTime(long createdTime) {
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
    return this;
  }

  public void unsetCreatedTime() {
    __isset_bit_vector.clear(__CREATEDTIME_ISSET_ID);
  }

  /** Returns true if field createdTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedTime() {
    return __isset_bit_vector.get(__CREATEDTIME_ISSET_ID);
  }

  public void setCreatedTimeIsSet(boolean value) {
    __isset_bit_vector.set(__CREATEDTIME_ISSET_ID, value);
  }

  public int getDeviceAdded() {
    return this.deviceAdded;
  }

  public NodeStatus setDeviceAdded(int deviceAdded) {
    this.deviceAdded = deviceAdded;
    setDeviceAddedIsSet(true);
    return this;
  }

  public void unsetDeviceAdded() {
    __isset_bit_vector.clear(__DEVICEADDED_ISSET_ID);
  }

  /** Returns true if field deviceAdded is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceAdded() {
    return __isset_bit_vector.get(__DEVICEADDED_ISSET_ID);
  }

  public void setDeviceAddedIsSet(boolean value) {
    __isset_bit_vector.set(__DEVICEADDED_ISSET_ID, value);
  }

  public int getDeviceFailed() {
    return this.deviceFailed;
  }

  public NodeStatus setDeviceFailed(int deviceFailed) {
    this.deviceFailed = deviceFailed;
    setDeviceFailedIsSet(true);
    return this;
  }

  public void unsetDeviceFailed() {
    __isset_bit_vector.clear(__DEVICEFAILED_ISSET_ID);
  }

  /** Returns true if field deviceFailed is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceFailed() {
    return __isset_bit_vector.get(__DEVICEFAILED_ISSET_ID);
  }

  public void setDeviceFailedIsSet(boolean value) {
    __isset_bit_vector.set(__DEVICEFAILED_ISSET_ID, value);
  }

  public String getNodeMacAddress() {
    return this.nodeMacAddress;
  }

  public NodeStatus setNodeMacAddress(String nodeMacAddress) {
    this.nodeMacAddress = nodeMacAddress;
    return this;
  }

  public void unsetNodeMacAddress() {
    this.nodeMacAddress = null;
  }

  /** Returns true if field nodeMacAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeMacAddress() {
    return this.nodeMacAddress != null;
  }

  public void setNodeMacAddressIsSet(boolean value) {
    if (!value) {
      this.nodeMacAddress = null;
    }
  }

  public String getNodeIpAddress() {
    return this.nodeIpAddress;
  }

  public NodeStatus setNodeIpAddress(String nodeIpAddress) {
    this.nodeIpAddress = nodeIpAddress;
    return this;
  }

  public void unsetNodeIpAddress() {
    this.nodeIpAddress = null;
  }

  /** Returns true if field nodeIpAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeIpAddress() {
    return this.nodeIpAddress != null;
  }

  public void setNodeIpAddressIsSet(boolean value) {
    if (!value) {
      this.nodeIpAddress = null;
    }
  }

  public String getKupHost() {
    return this.kupHost;
  }

  public NodeStatus setKupHost(String kupHost) {
    this.kupHost = kupHost;
    return this;
  }

  public void unsetKupHost() {
    this.kupHost = null;
  }

  /** Returns true if field kupHost is set (has been assigned a value) and false otherwise */
  public boolean isSetKupHost() {
    return this.kupHost != null;
  }

  public void setKupHostIsSet(boolean value) {
    if (!value) {
      this.kupHost = null;
    }
  }

  public String getKupIpAddress() {
    return this.kupIpAddress;
  }

  public NodeStatus setKupIpAddress(String kupIpAddress) {
    this.kupIpAddress = kupIpAddress;
    return this;
  }

  public void unsetKupIpAddress() {
    this.kupIpAddress = null;
  }

  /** Returns true if field kupIpAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetKupIpAddress() {
    return this.kupIpAddress != null;
  }

  public void setKupIpAddressIsSet(boolean value) {
    if (!value) {
      this.kupIpAddress = null;
    }
  }

  public double getCpuUsage() {
    return this.cpuUsage;
  }

  public NodeStatus setCpuUsage(double cpuUsage) {
    this.cpuUsage = cpuUsage;
    setCpuUsageIsSet(true);
    return this;
  }

  public void unsetCpuUsage() {
    __isset_bit_vector.clear(__CPUUSAGE_ISSET_ID);
  }

  /** Returns true if field cpuUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuUsage() {
    return __isset_bit_vector.get(__CPUUSAGE_ISSET_ID);
  }

  public void setCpuUsageIsSet(boolean value) {
    __isset_bit_vector.set(__CPUUSAGE_ISSET_ID, value);
  }

  public double getMemoryUsage() {
    return this.memoryUsage;
  }

  public NodeStatus setMemoryUsage(double memoryUsage) {
    this.memoryUsage = memoryUsage;
    setMemoryUsageIsSet(true);
    return this;
  }

  public void unsetMemoryUsage() {
    __isset_bit_vector.clear(__MEMORYUSAGE_ISSET_ID);
  }

  /** Returns true if field memoryUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryUsage() {
    return __isset_bit_vector.get(__MEMORYUSAGE_ISSET_ID);
  }

  public void setMemoryUsageIsSet(boolean value) {
    __isset_bit_vector.set(__MEMORYUSAGE_ISSET_ID, value);
  }

  public double getDiskUsage() {
    return this.diskUsage;
  }

  public NodeStatus setDiskUsage(double diskUsage) {
    this.diskUsage = diskUsage;
    setDiskUsageIsSet(true);
    return this;
  }

  public void unsetDiskUsage() {
    __isset_bit_vector.clear(__DISKUSAGE_ISSET_ID);
  }

  /** Returns true if field diskUsage is set (has been assigned a value) and false otherwise */
  public boolean isSetDiskUsage() {
    return __isset_bit_vector.get(__DISKUSAGE_ISSET_ID);
  }

  public void setDiskUsageIsSet(boolean value) {
    __isset_bit_vector.set(__DISKUSAGE_ISSET_ID, value);
  }

  public int getStatusSize() {
    return (this.status == null) ? 0 : this.status.size();
  }

  public java.util.Iterator<DeviceStatus> getStatusIterator() {
    return (this.status == null) ? null : this.status.iterator();
  }

  public void addToStatus(DeviceStatus elem) {
    if (this.status == null) {
      this.status = new ArrayList<DeviceStatus>();
    }
    this.status.add(elem);
  }

  public List<DeviceStatus> getStatus() {
    return this.status;
  }

  public NodeStatus setStatus(List<DeviceStatus> status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getStatusData() {
    return this.statusData;
  }

  public NodeStatus setStatusData(String statusData) {
    this.statusData = statusData;
    return this;
  }

  public void unsetStatusData() {
    this.statusData = null;
  }

  /** Returns true if field statusData is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusData() {
    return this.statusData != null;
  }

  public void setStatusDataIsSet(boolean value) {
    if (!value) {
      this.statusData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CREATED_TIME:
      if (value == null) {
        unsetCreatedTime();
      } else {
        setCreatedTime((Long)value);
      }
      break;

    case DEVICE_ADDED:
      if (value == null) {
        unsetDeviceAdded();
      } else {
        setDeviceAdded((Integer)value);
      }
      break;

    case DEVICE_FAILED:
      if (value == null) {
        unsetDeviceFailed();
      } else {
        setDeviceFailed((Integer)value);
      }
      break;

    case NODE_MAC_ADDRESS:
      if (value == null) {
        unsetNodeMacAddress();
      } else {
        setNodeMacAddress((String)value);
      }
      break;

    case NODE_IP_ADDRESS:
      if (value == null) {
        unsetNodeIpAddress();
      } else {
        setNodeIpAddress((String)value);
      }
      break;

    case KUP_HOST:
      if (value == null) {
        unsetKupHost();
      } else {
        setKupHost((String)value);
      }
      break;

    case KUP_IP_ADDRESS:
      if (value == null) {
        unsetKupIpAddress();
      } else {
        setKupIpAddress((String)value);
      }
      break;

    case CPU_USAGE:
      if (value == null) {
        unsetCpuUsage();
      } else {
        setCpuUsage((Double)value);
      }
      break;

    case MEMORY_USAGE:
      if (value == null) {
        unsetMemoryUsage();
      } else {
        setMemoryUsage((Double)value);
      }
      break;

    case DISK_USAGE:
      if (value == null) {
        unsetDiskUsage();
      } else {
        setDiskUsage((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((List<DeviceStatus>)value);
      }
      break;

    case STATUS_DATA:
      if (value == null) {
        unsetStatusData();
      } else {
        setStatusData((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CREATED_TIME:
      return Long.valueOf(getCreatedTime());

    case DEVICE_ADDED:
      return Integer.valueOf(getDeviceAdded());

    case DEVICE_FAILED:
      return Integer.valueOf(getDeviceFailed());

    case NODE_MAC_ADDRESS:
      return getNodeMacAddress();

    case NODE_IP_ADDRESS:
      return getNodeIpAddress();

    case KUP_HOST:
      return getKupHost();

    case KUP_IP_ADDRESS:
      return getKupIpAddress();

    case CPU_USAGE:
      return Double.valueOf(getCpuUsage());

    case MEMORY_USAGE:
      return Double.valueOf(getMemoryUsage());

    case DISK_USAGE:
      return Double.valueOf(getDiskUsage());

    case STATUS:
      return getStatus();

    case STATUS_DATA:
      return getStatusData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CREATED_TIME:
      return isSetCreatedTime();
    case DEVICE_ADDED:
      return isSetDeviceAdded();
    case DEVICE_FAILED:
      return isSetDeviceFailed();
    case NODE_MAC_ADDRESS:
      return isSetNodeMacAddress();
    case NODE_IP_ADDRESS:
      return isSetNodeIpAddress();
    case KUP_HOST:
      return isSetKupHost();
    case KUP_IP_ADDRESS:
      return isSetKupIpAddress();
    case CPU_USAGE:
      return isSetCpuUsage();
    case MEMORY_USAGE:
      return isSetMemoryUsage();
    case DISK_USAGE:
      return isSetDiskUsage();
    case STATUS:
      return isSetStatus();
    case STATUS_DATA:
      return isSetStatusData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NodeStatus)
      return this.equals((NodeStatus)that);
    return false;
  }

  public boolean equals(NodeStatus that) {
    if (that == null)
      return false;

    boolean this_present_createdTime = true;
    boolean that_present_createdTime = true;
    if (this_present_createdTime || that_present_createdTime) {
      if (!(this_present_createdTime && that_present_createdTime))
        return false;
      if (this.createdTime != that.createdTime)
        return false;
    }

    boolean this_present_deviceAdded = true;
    boolean that_present_deviceAdded = true;
    if (this_present_deviceAdded || that_present_deviceAdded) {
      if (!(this_present_deviceAdded && that_present_deviceAdded))
        return false;
      if (this.deviceAdded != that.deviceAdded)
        return false;
    }

    boolean this_present_deviceFailed = true;
    boolean that_present_deviceFailed = true;
    if (this_present_deviceFailed || that_present_deviceFailed) {
      if (!(this_present_deviceFailed && that_present_deviceFailed))
        return false;
      if (this.deviceFailed != that.deviceFailed)
        return false;
    }

    boolean this_present_nodeMacAddress = true && this.isSetNodeMacAddress();
    boolean that_present_nodeMacAddress = true && that.isSetNodeMacAddress();
    if (this_present_nodeMacAddress || that_present_nodeMacAddress) {
      if (!(this_present_nodeMacAddress && that_present_nodeMacAddress))
        return false;
      if (!this.nodeMacAddress.equals(that.nodeMacAddress))
        return false;
    }

    boolean this_present_nodeIpAddress = true && this.isSetNodeIpAddress();
    boolean that_present_nodeIpAddress = true && that.isSetNodeIpAddress();
    if (this_present_nodeIpAddress || that_present_nodeIpAddress) {
      if (!(this_present_nodeIpAddress && that_present_nodeIpAddress))
        return false;
      if (!this.nodeIpAddress.equals(that.nodeIpAddress))
        return false;
    }

    boolean this_present_kupHost = true && this.isSetKupHost();
    boolean that_present_kupHost = true && that.isSetKupHost();
    if (this_present_kupHost || that_present_kupHost) {
      if (!(this_present_kupHost && that_present_kupHost))
        return false;
      if (!this.kupHost.equals(that.kupHost))
        return false;
    }

    boolean this_present_kupIpAddress = true && this.isSetKupIpAddress();
    boolean that_present_kupIpAddress = true && that.isSetKupIpAddress();
    if (this_present_kupIpAddress || that_present_kupIpAddress) {
      if (!(this_present_kupIpAddress && that_present_kupIpAddress))
        return false;
      if (!this.kupIpAddress.equals(that.kupIpAddress))
        return false;
    }

    boolean this_present_cpuUsage = true;
    boolean that_present_cpuUsage = true;
    if (this_present_cpuUsage || that_present_cpuUsage) {
      if (!(this_present_cpuUsage && that_present_cpuUsage))
        return false;
      if (this.cpuUsage != that.cpuUsage)
        return false;
    }

    boolean this_present_memoryUsage = true;
    boolean that_present_memoryUsage = true;
    if (this_present_memoryUsage || that_present_memoryUsage) {
      if (!(this_present_memoryUsage && that_present_memoryUsage))
        return false;
      if (this.memoryUsage != that.memoryUsage)
        return false;
    }

    boolean this_present_diskUsage = true;
    boolean that_present_diskUsage = true;
    if (this_present_diskUsage || that_present_diskUsage) {
      if (!(this_present_diskUsage && that_present_diskUsage))
        return false;
      if (this.diskUsage != that.diskUsage)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_statusData = true && this.isSetStatusData();
    boolean that_present_statusData = true && that.isSetStatusData();
    if (this_present_statusData || that_present_statusData) {
      if (!(this_present_statusData && that_present_statusData))
        return false;
      if (!this.statusData.equals(that.statusData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(NodeStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NodeStatus typedOther = (NodeStatus)other;

    lastComparison = Boolean.valueOf(isSetCreatedTime()).compareTo(typedOther.isSetCreatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdTime, typedOther.createdTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceAdded()).compareTo(typedOther.isSetDeviceAdded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceAdded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceAdded, typedOther.deviceAdded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceFailed()).compareTo(typedOther.isSetDeviceFailed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceFailed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceFailed, typedOther.deviceFailed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeMacAddress()).compareTo(typedOther.isSetNodeMacAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeMacAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeMacAddress, typedOther.nodeMacAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodeIpAddress()).compareTo(typedOther.isSetNodeIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeIpAddress, typedOther.nodeIpAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKupHost()).compareTo(typedOther.isSetKupHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKupHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kupHost, typedOther.kupHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKupIpAddress()).compareTo(typedOther.isSetKupIpAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKupIpAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kupIpAddress, typedOther.kupIpAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuUsage()).compareTo(typedOther.isSetCpuUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuUsage, typedOther.cpuUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemoryUsage()).compareTo(typedOther.isSetMemoryUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryUsage, typedOther.memoryUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiskUsage()).compareTo(typedOther.isSetDiskUsage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiskUsage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diskUsage, typedOther.diskUsage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusData()).compareTo(typedOther.isSetStatusData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusData, typedOther.statusData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NodeStatus(");
    boolean first = true;

    sb.append("createdTime:");
    sb.append(this.createdTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceAdded:");
    sb.append(this.deviceAdded);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceFailed:");
    sb.append(this.deviceFailed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeMacAddress:");
    if (this.nodeMacAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeMacAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodeIpAddress:");
    if (this.nodeIpAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.nodeIpAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kupHost:");
    if (this.kupHost == null) {
      sb.append("null");
    } else {
      sb.append(this.kupHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kupIpAddress:");
    if (this.kupIpAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.kupIpAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cpuUsage:");
    sb.append(this.cpuUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("memoryUsage:");
    sb.append(this.memoryUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("diskUsage:");
    sb.append(this.diskUsage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusData:");
    if (this.statusData == null) {
      sb.append("null");
    } else {
      sb.append(this.statusData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NodeStatusStandardSchemeFactory implements SchemeFactory {
    public NodeStatusStandardScheme getScheme() {
      return new NodeStatusStandardScheme();
    }
  }

  private static class NodeStatusStandardScheme extends StandardScheme<NodeStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NodeStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CREATED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdTime = iprot.readI64();
              struct.setCreatedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEVICE_ADDED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deviceAdded = iprot.readI32();
              struct.setDeviceAddedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEVICE_FAILED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deviceFailed = iprot.readI32();
              struct.setDeviceFailedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NODE_MAC_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeMacAddress = iprot.readString();
              struct.setNodeMacAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NODE_IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nodeIpAddress = iprot.readString();
              struct.setNodeIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KUP_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kupHost = iprot.readString();
              struct.setKupHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KUP_IP_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kupIpAddress = iprot.readString();
              struct.setKupIpAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CPU_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.cpuUsage = iprot.readDouble();
              struct.setCpuUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MEMORY_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.memoryUsage = iprot.readDouble();
              struct.setMemoryUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DISK_USAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.diskUsage = iprot.readDouble();
              struct.setDiskUsageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.status = new ArrayList<DeviceStatus>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  DeviceStatus _elem2; // required
                  _elem2 = new DeviceStatus();
                  _elem2.read(iprot);
                  struct.status.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusData = iprot.readString();
              struct.setStatusDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NodeStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
      oprot.writeI64(struct.createdTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEVICE_ADDED_FIELD_DESC);
      oprot.writeI32(struct.deviceAdded);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEVICE_FAILED_FIELD_DESC);
      oprot.writeI32(struct.deviceFailed);
      oprot.writeFieldEnd();
      if (struct.nodeMacAddress != null) {
        oprot.writeFieldBegin(NODE_MAC_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.nodeMacAddress);
        oprot.writeFieldEnd();
      }
      if (struct.nodeIpAddress != null) {
        oprot.writeFieldBegin(NODE_IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.nodeIpAddress);
        oprot.writeFieldEnd();
      }
      if (struct.kupHost != null) {
        oprot.writeFieldBegin(KUP_HOST_FIELD_DESC);
        oprot.writeString(struct.kupHost);
        oprot.writeFieldEnd();
      }
      if (struct.kupIpAddress != null) {
        oprot.writeFieldBegin(KUP_IP_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.kupIpAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CPU_USAGE_FIELD_DESC);
      oprot.writeDouble(struct.cpuUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMORY_USAGE_FIELD_DESC);
      oprot.writeDouble(struct.memoryUsage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISK_USAGE_FIELD_DESC);
      oprot.writeDouble(struct.diskUsage);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.status.size()));
          for (DeviceStatus _iter3 : struct.status)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.statusData != null) {
        oprot.writeFieldBegin(STATUS_DATA_FIELD_DESC);
        oprot.writeString(struct.statusData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NodeStatusTupleSchemeFactory implements SchemeFactory {
    public NodeStatusTupleScheme getScheme() {
      return new NodeStatusTupleScheme();
    }
  }

  private static class NodeStatusTupleScheme extends TupleScheme<NodeStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NodeStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCreatedTime()) {
        optionals.set(0);
      }
      if (struct.isSetDeviceAdded()) {
        optionals.set(1);
      }
      if (struct.isSetDeviceFailed()) {
        optionals.set(2);
      }
      if (struct.isSetNodeMacAddress()) {
        optionals.set(3);
      }
      if (struct.isSetNodeIpAddress()) {
        optionals.set(4);
      }
      if (struct.isSetKupHost()) {
        optionals.set(5);
      }
      if (struct.isSetKupIpAddress()) {
        optionals.set(6);
      }
      if (struct.isSetCpuUsage()) {
        optionals.set(7);
      }
      if (struct.isSetMemoryUsage()) {
        optionals.set(8);
      }
      if (struct.isSetDiskUsage()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      if (struct.isSetStatusData()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetCreatedTime()) {
        oprot.writeI64(struct.createdTime);
      }
      if (struct.isSetDeviceAdded()) {
        oprot.writeI32(struct.deviceAdded);
      }
      if (struct.isSetDeviceFailed()) {
        oprot.writeI32(struct.deviceFailed);
      }
      if (struct.isSetNodeMacAddress()) {
        oprot.writeString(struct.nodeMacAddress);
      }
      if (struct.isSetNodeIpAddress()) {
        oprot.writeString(struct.nodeIpAddress);
      }
      if (struct.isSetKupHost()) {
        oprot.writeString(struct.kupHost);
      }
      if (struct.isSetKupIpAddress()) {
        oprot.writeString(struct.kupIpAddress);
      }
      if (struct.isSetCpuUsage()) {
        oprot.writeDouble(struct.cpuUsage);
      }
      if (struct.isSetMemoryUsage()) {
        oprot.writeDouble(struct.memoryUsage);
      }
      if (struct.isSetDiskUsage()) {
        oprot.writeDouble(struct.diskUsage);
      }
      if (struct.isSetStatus()) {
        {
          oprot.writeI32(struct.status.size());
          for (DeviceStatus _iter4 : struct.status)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetStatusData()) {
        oprot.writeString(struct.statusData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NodeStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.createdTime = iprot.readI64();
        struct.setCreatedTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deviceAdded = iprot.readI32();
        struct.setDeviceAddedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deviceFailed = iprot.readI32();
        struct.setDeviceFailedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nodeMacAddress = iprot.readString();
        struct.setNodeMacAddressIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nodeIpAddress = iprot.readString();
        struct.setNodeIpAddressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.kupHost = iprot.readString();
        struct.setKupHostIsSet(true);
      }
      if (incoming.get(6)) {
        struct.kupIpAddress = iprot.readString();
        struct.setKupIpAddressIsSet(true);
      }
      if (incoming.get(7)) {
        struct.cpuUsage = iprot.readDouble();
        struct.setCpuUsageIsSet(true);
      }
      if (incoming.get(8)) {
        struct.memoryUsage = iprot.readDouble();
        struct.setMemoryUsageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.diskUsage = iprot.readDouble();
        struct.setDiskUsageIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.status = new ArrayList<DeviceStatus>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            DeviceStatus _elem7; // required
            _elem7 = new DeviceStatus();
            _elem7.read(iprot);
            struct.status.add(_elem7);
          }
        }
        struct.setStatusIsSet(true);
      }
      if (incoming.get(11)) {
        struct.statusData = iprot.readString();
        struct.setStatusDataIsSet(true);
      }
    }
  }

}

