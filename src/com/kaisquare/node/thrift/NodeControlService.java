/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.node.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NodeControlService {

  /**
   * NodeControlService - this service provides interface for
   * management (control) of node. Cloud arbiter use this to exchange message
   * with node arbiter.
   */
  public interface Iface {

    /**
     * Periodically called to update the status of a node.
     * (1) macAddress - MAC address of node
     * (2) status - node status
     * 
     * @param macAddress
     * @param status
     */
    public boolean updateNodeStatus(String macAddress, NodeStatus status) throws org.apache.thrift.TException;

    /**
     * Node arbiter send heart beat to cloud arbiter every second, return
     * the command information if there are operations need node to do.
     * (1) macAddress - MAC address of node
     * (2) confirmedCommands - A list of command information that node successfully executed
     * 
     * @param macAddress
     * @param confirmedCommands
     */
    public List<CommandInfo> sendHeartBeat(String macAddress, List<CommandInfo> confirmedCommands) throws org.apache.thrift.TException;

    /**
     * Node arbiter send data to cloud arbiter
     * (1) macAddress - MAC address of node
     * (2) dataType - The type of data that will send
     * (3) stringData - Detailed information of the data(json format string)
     * RETURN true if the operation succeed, false if fail.
     * 
     * @param macAddress
     * @param dataType
     * @param stringData
     */
    public boolean sendNodeData(String macAddress, String dataType, String stringData) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void updateNodeStatus(String macAddress, NodeStatus status, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateNodeStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void sendHeartBeat(String macAddress, List<CommandInfo> confirmedCommands, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sendHeartBeat_call> resultHandler) throws org.apache.thrift.TException;

    public void sendNodeData(String macAddress, String dataType, String stringData, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.sendNodeData_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean updateNodeStatus(String macAddress, NodeStatus status) throws org.apache.thrift.TException
    {
      send_updateNodeStatus(macAddress, status);
      return recv_updateNodeStatus();
    }

    public void send_updateNodeStatus(String macAddress, NodeStatus status) throws org.apache.thrift.TException
    {
      updateNodeStatus_args args = new updateNodeStatus_args();
      args.setMacAddress(macAddress);
      args.setStatus(status);
      sendBase("updateNodeStatus", args);
    }

    public boolean recv_updateNodeStatus() throws org.apache.thrift.TException
    {
      updateNodeStatus_result result = new updateNodeStatus_result();
      receiveBase(result, "updateNodeStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateNodeStatus failed: unknown result");
    }

    public List<CommandInfo> sendHeartBeat(String macAddress, List<CommandInfo> confirmedCommands) throws org.apache.thrift.TException
    {
      send_sendHeartBeat(macAddress, confirmedCommands);
      return recv_sendHeartBeat();
    }

    public void send_sendHeartBeat(String macAddress, List<CommandInfo> confirmedCommands) throws org.apache.thrift.TException
    {
      sendHeartBeat_args args = new sendHeartBeat_args();
      args.setMacAddress(macAddress);
      args.setConfirmedCommands(confirmedCommands);
      sendBase("sendHeartBeat", args);
    }

    public List<CommandInfo> recv_sendHeartBeat() throws org.apache.thrift.TException
    {
      sendHeartBeat_result result = new sendHeartBeat_result();
      receiveBase(result, "sendHeartBeat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendHeartBeat failed: unknown result");
    }

    public boolean sendNodeData(String macAddress, String dataType, String stringData) throws org.apache.thrift.TException
    {
      send_sendNodeData(macAddress, dataType, stringData);
      return recv_sendNodeData();
    }

    public void send_sendNodeData(String macAddress, String dataType, String stringData) throws org.apache.thrift.TException
    {
      sendNodeData_args args = new sendNodeData_args();
      args.setMacAddress(macAddress);
      args.setDataType(dataType);
      args.setStringData(stringData);
      sendBase("sendNodeData", args);
    }

    public boolean recv_sendNodeData() throws org.apache.thrift.TException
    {
      sendNodeData_result result = new sendNodeData_result();
      receiveBase(result, "sendNodeData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendNodeData failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void updateNodeStatus(String macAddress, NodeStatus status, org.apache.thrift.async.AsyncMethodCallback<updateNodeStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateNodeStatus_call method_call = new updateNodeStatus_call(macAddress, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateNodeStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String macAddress;
      private NodeStatus status;
      public updateNodeStatus_call(String macAddress, NodeStatus status, org.apache.thrift.async.AsyncMethodCallback<updateNodeStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.macAddress = macAddress;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateNodeStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateNodeStatus_args args = new updateNodeStatus_args();
        args.setMacAddress(macAddress);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateNodeStatus();
      }
    }

    public void sendHeartBeat(String macAddress, List<CommandInfo> confirmedCommands, org.apache.thrift.async.AsyncMethodCallback<sendHeartBeat_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendHeartBeat_call method_call = new sendHeartBeat_call(macAddress, confirmedCommands, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendHeartBeat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String macAddress;
      private List<CommandInfo> confirmedCommands;
      public sendHeartBeat_call(String macAddress, List<CommandInfo> confirmedCommands, org.apache.thrift.async.AsyncMethodCallback<sendHeartBeat_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.macAddress = macAddress;
        this.confirmedCommands = confirmedCommands;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendHeartBeat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendHeartBeat_args args = new sendHeartBeat_args();
        args.setMacAddress(macAddress);
        args.setConfirmedCommands(confirmedCommands);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CommandInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendHeartBeat();
      }
    }

    public void sendNodeData(String macAddress, String dataType, String stringData, org.apache.thrift.async.AsyncMethodCallback<sendNodeData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendNodeData_call method_call = new sendNodeData_call(macAddress, dataType, stringData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendNodeData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String macAddress;
      private String dataType;
      private String stringData;
      public sendNodeData_call(String macAddress, String dataType, String stringData, org.apache.thrift.async.AsyncMethodCallback<sendNodeData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.macAddress = macAddress;
        this.dataType = dataType;
        this.stringData = stringData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendNodeData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendNodeData_args args = new sendNodeData_args();
        args.setMacAddress(macAddress);
        args.setDataType(dataType);
        args.setStringData(stringData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendNodeData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("updateNodeStatus", new updateNodeStatus());
      processMap.put("sendHeartBeat", new sendHeartBeat());
      processMap.put("sendNodeData", new sendNodeData());
      return processMap;
    }

    private static class updateNodeStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateNodeStatus_args> {
      public updateNodeStatus() {
        super("updateNodeStatus");
      }

      protected updateNodeStatus_args getEmptyArgsInstance() {
        return new updateNodeStatus_args();
      }

      protected updateNodeStatus_result getResult(I iface, updateNodeStatus_args args) throws org.apache.thrift.TException {
        updateNodeStatus_result result = new updateNodeStatus_result();
        result.success = iface.updateNodeStatus(args.macAddress, args.status);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class sendHeartBeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendHeartBeat_args> {
      public sendHeartBeat() {
        super("sendHeartBeat");
      }

      protected sendHeartBeat_args getEmptyArgsInstance() {
        return new sendHeartBeat_args();
      }

      protected sendHeartBeat_result getResult(I iface, sendHeartBeat_args args) throws org.apache.thrift.TException {
        sendHeartBeat_result result = new sendHeartBeat_result();
        result.success = iface.sendHeartBeat(args.macAddress, args.confirmedCommands);
        return result;
      }
    }

    private static class sendNodeData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendNodeData_args> {
      public sendNodeData() {
        super("sendNodeData");
      }

      protected sendNodeData_args getEmptyArgsInstance() {
        return new sendNodeData_args();
      }

      protected sendNodeData_result getResult(I iface, sendNodeData_args args) throws org.apache.thrift.TException {
        sendNodeData_result result = new sendNodeData_result();
        result.success = iface.sendNodeData(args.macAddress, args.dataType, args.stringData);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class updateNodeStatus_args implements org.apache.thrift.TBase<updateNodeStatus_args, updateNodeStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNodeStatus_args");

    private static final org.apache.thrift.protocol.TField MAC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("macAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNodeStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNodeStatus_argsTupleSchemeFactory());
    }

    public String macAddress; // required
    public NodeStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAC_ADDRESS((short)1, "macAddress"),
      STATUS((short)2, "status");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAC_ADDRESS
            return MAC_ADDRESS;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("macAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNodeStatus_args.class, metaDataMap);
    }

    public updateNodeStatus_args() {
    }

    public updateNodeStatus_args(
      String macAddress,
      NodeStatus status)
    {
      this();
      this.macAddress = macAddress;
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNodeStatus_args(updateNodeStatus_args other) {
      if (other.isSetMacAddress()) {
        this.macAddress = other.macAddress;
      }
      if (other.isSetStatus()) {
        this.status = new NodeStatus(other.status);
      }
    }

    public updateNodeStatus_args deepCopy() {
      return new updateNodeStatus_args(this);
    }

    @Override
    public void clear() {
      this.macAddress = null;
      this.status = null;
    }

    public String getMacAddress() {
      return this.macAddress;
    }

    public updateNodeStatus_args setMacAddress(String macAddress) {
      this.macAddress = macAddress;
      return this;
    }

    public void unsetMacAddress() {
      this.macAddress = null;
    }

    /** Returns true if field macAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetMacAddress() {
      return this.macAddress != null;
    }

    public void setMacAddressIsSet(boolean value) {
      if (!value) {
        this.macAddress = null;
      }
    }

    public NodeStatus getStatus() {
      return this.status;
    }

    public updateNodeStatus_args setStatus(NodeStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAC_ADDRESS:
        if (value == null) {
          unsetMacAddress();
        } else {
          setMacAddress((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((NodeStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAC_ADDRESS:
        return getMacAddress();

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAC_ADDRESS:
        return isSetMacAddress();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNodeStatus_args)
        return this.equals((updateNodeStatus_args)that);
      return false;
    }

    public boolean equals(updateNodeStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_macAddress = true && this.isSetMacAddress();
      boolean that_present_macAddress = true && that.isSetMacAddress();
      if (this_present_macAddress || that_present_macAddress) {
        if (!(this_present_macAddress && that_present_macAddress))
          return false;
        if (!this.macAddress.equals(that.macAddress))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateNodeStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateNodeStatus_args typedOther = (updateNodeStatus_args)other;

      lastComparison = Boolean.valueOf(isSetMacAddress()).compareTo(typedOther.isSetMacAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMacAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macAddress, typedOther.macAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNodeStatus_args(");
      boolean first = true;

      sb.append("macAddress:");
      if (this.macAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.macAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNodeStatus_argsStandardSchemeFactory implements SchemeFactory {
      public updateNodeStatus_argsStandardScheme getScheme() {
        return new updateNodeStatus_argsStandardScheme();
      }
    }

    private static class updateNodeStatus_argsStandardScheme extends StandardScheme<updateNodeStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNodeStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAC_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.macAddress = iprot.readString();
                struct.setMacAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.status = new NodeStatus();
                struct.status.read(iprot);
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNodeStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.macAddress != null) {
          oprot.writeFieldBegin(MAC_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.macAddress);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNodeStatus_argsTupleSchemeFactory implements SchemeFactory {
      public updateNodeStatus_argsTupleScheme getScheme() {
        return new updateNodeStatus_argsTupleScheme();
      }
    }

    private static class updateNodeStatus_argsTupleScheme extends TupleScheme<updateNodeStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNodeStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMacAddress()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMacAddress()) {
          oprot.writeString(struct.macAddress);
        }
        if (struct.isSetStatus()) {
          struct.status.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNodeStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.macAddress = iprot.readString();
          struct.setMacAddressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = new NodeStatus();
          struct.status.read(iprot);
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  public static class updateNodeStatus_result implements org.apache.thrift.TBase<updateNodeStatus_result, updateNodeStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateNodeStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateNodeStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateNodeStatus_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateNodeStatus_result.class, metaDataMap);
    }

    public updateNodeStatus_result() {
    }

    public updateNodeStatus_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNodeStatus_result(updateNodeStatus_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public updateNodeStatus_result deepCopy() {
      return new updateNodeStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateNodeStatus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNodeStatus_result)
        return this.equals((updateNodeStatus_result)that);
      return false;
    }

    public boolean equals(updateNodeStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateNodeStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateNodeStatus_result typedOther = (updateNodeStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateNodeStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateNodeStatus_resultStandardSchemeFactory implements SchemeFactory {
      public updateNodeStatus_resultStandardScheme getScheme() {
        return new updateNodeStatus_resultStandardScheme();
      }
    }

    private static class updateNodeStatus_resultStandardScheme extends StandardScheme<updateNodeStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateNodeStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateNodeStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateNodeStatus_resultTupleSchemeFactory implements SchemeFactory {
      public updateNodeStatus_resultTupleScheme getScheme() {
        return new updateNodeStatus_resultTupleScheme();
      }
    }

    private static class updateNodeStatus_resultTupleScheme extends TupleScheme<updateNodeStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateNodeStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateNodeStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendHeartBeat_args implements org.apache.thrift.TBase<sendHeartBeat_args, sendHeartBeat_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendHeartBeat_args");

    private static final org.apache.thrift.protocol.TField MAC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("macAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONFIRMED_COMMANDS_FIELD_DESC = new org.apache.thrift.protocol.TField("confirmedCommands", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendHeartBeat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendHeartBeat_argsTupleSchemeFactory());
    }

    public String macAddress; // required
    public List<CommandInfo> confirmedCommands; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAC_ADDRESS((short)1, "macAddress"),
      CONFIRMED_COMMANDS((short)2, "confirmedCommands");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAC_ADDRESS
            return MAC_ADDRESS;
          case 2: // CONFIRMED_COMMANDS
            return CONFIRMED_COMMANDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("macAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONFIRMED_COMMANDS, new org.apache.thrift.meta_data.FieldMetaData("confirmedCommands", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommandInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendHeartBeat_args.class, metaDataMap);
    }

    public sendHeartBeat_args() {
    }

    public sendHeartBeat_args(
      String macAddress,
      List<CommandInfo> confirmedCommands)
    {
      this();
      this.macAddress = macAddress;
      this.confirmedCommands = confirmedCommands;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendHeartBeat_args(sendHeartBeat_args other) {
      if (other.isSetMacAddress()) {
        this.macAddress = other.macAddress;
      }
      if (other.isSetConfirmedCommands()) {
        List<CommandInfo> __this__confirmedCommands = new ArrayList<CommandInfo>();
        for (CommandInfo other_element : other.confirmedCommands) {
          __this__confirmedCommands.add(new CommandInfo(other_element));
        }
        this.confirmedCommands = __this__confirmedCommands;
      }
    }

    public sendHeartBeat_args deepCopy() {
      return new sendHeartBeat_args(this);
    }

    @Override
    public void clear() {
      this.macAddress = null;
      this.confirmedCommands = null;
    }

    public String getMacAddress() {
      return this.macAddress;
    }

    public sendHeartBeat_args setMacAddress(String macAddress) {
      this.macAddress = macAddress;
      return this;
    }

    public void unsetMacAddress() {
      this.macAddress = null;
    }

    /** Returns true if field macAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetMacAddress() {
      return this.macAddress != null;
    }

    public void setMacAddressIsSet(boolean value) {
      if (!value) {
        this.macAddress = null;
      }
    }

    public int getConfirmedCommandsSize() {
      return (this.confirmedCommands == null) ? 0 : this.confirmedCommands.size();
    }

    public java.util.Iterator<CommandInfo> getConfirmedCommandsIterator() {
      return (this.confirmedCommands == null) ? null : this.confirmedCommands.iterator();
    }

    public void addToConfirmedCommands(CommandInfo elem) {
      if (this.confirmedCommands == null) {
        this.confirmedCommands = new ArrayList<CommandInfo>();
      }
      this.confirmedCommands.add(elem);
    }

    public List<CommandInfo> getConfirmedCommands() {
      return this.confirmedCommands;
    }

    public sendHeartBeat_args setConfirmedCommands(List<CommandInfo> confirmedCommands) {
      this.confirmedCommands = confirmedCommands;
      return this;
    }

    public void unsetConfirmedCommands() {
      this.confirmedCommands = null;
    }

    /** Returns true if field confirmedCommands is set (has been assigned a value) and false otherwise */
    public boolean isSetConfirmedCommands() {
      return this.confirmedCommands != null;
    }

    public void setConfirmedCommandsIsSet(boolean value) {
      if (!value) {
        this.confirmedCommands = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAC_ADDRESS:
        if (value == null) {
          unsetMacAddress();
        } else {
          setMacAddress((String)value);
        }
        break;

      case CONFIRMED_COMMANDS:
        if (value == null) {
          unsetConfirmedCommands();
        } else {
          setConfirmedCommands((List<CommandInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAC_ADDRESS:
        return getMacAddress();

      case CONFIRMED_COMMANDS:
        return getConfirmedCommands();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAC_ADDRESS:
        return isSetMacAddress();
      case CONFIRMED_COMMANDS:
        return isSetConfirmedCommands();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendHeartBeat_args)
        return this.equals((sendHeartBeat_args)that);
      return false;
    }

    public boolean equals(sendHeartBeat_args that) {
      if (that == null)
        return false;

      boolean this_present_macAddress = true && this.isSetMacAddress();
      boolean that_present_macAddress = true && that.isSetMacAddress();
      if (this_present_macAddress || that_present_macAddress) {
        if (!(this_present_macAddress && that_present_macAddress))
          return false;
        if (!this.macAddress.equals(that.macAddress))
          return false;
      }

      boolean this_present_confirmedCommands = true && this.isSetConfirmedCommands();
      boolean that_present_confirmedCommands = true && that.isSetConfirmedCommands();
      if (this_present_confirmedCommands || that_present_confirmedCommands) {
        if (!(this_present_confirmedCommands && that_present_confirmedCommands))
          return false;
        if (!this.confirmedCommands.equals(that.confirmedCommands))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendHeartBeat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendHeartBeat_args typedOther = (sendHeartBeat_args)other;

      lastComparison = Boolean.valueOf(isSetMacAddress()).compareTo(typedOther.isSetMacAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMacAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macAddress, typedOther.macAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfirmedCommands()).compareTo(typedOther.isSetConfirmedCommands());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfirmedCommands()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirmedCommands, typedOther.confirmedCommands);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendHeartBeat_args(");
      boolean first = true;

      sb.append("macAddress:");
      if (this.macAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.macAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("confirmedCommands:");
      if (this.confirmedCommands == null) {
        sb.append("null");
      } else {
        sb.append(this.confirmedCommands);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendHeartBeat_argsStandardSchemeFactory implements SchemeFactory {
      public sendHeartBeat_argsStandardScheme getScheme() {
        return new sendHeartBeat_argsStandardScheme();
      }
    }

    private static class sendHeartBeat_argsStandardScheme extends StandardScheme<sendHeartBeat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendHeartBeat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAC_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.macAddress = iprot.readString();
                struct.setMacAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONFIRMED_COMMANDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.confirmedCommands = new ArrayList<CommandInfo>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    CommandInfo _elem10; // required
                    _elem10 = new CommandInfo();
                    _elem10.read(iprot);
                    struct.confirmedCommands.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setConfirmedCommandsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendHeartBeat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.macAddress != null) {
          oprot.writeFieldBegin(MAC_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.macAddress);
          oprot.writeFieldEnd();
        }
        if (struct.confirmedCommands != null) {
          oprot.writeFieldBegin(CONFIRMED_COMMANDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.confirmedCommands.size()));
            for (CommandInfo _iter11 : struct.confirmedCommands)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendHeartBeat_argsTupleSchemeFactory implements SchemeFactory {
      public sendHeartBeat_argsTupleScheme getScheme() {
        return new sendHeartBeat_argsTupleScheme();
      }
    }

    private static class sendHeartBeat_argsTupleScheme extends TupleScheme<sendHeartBeat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendHeartBeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMacAddress()) {
          optionals.set(0);
        }
        if (struct.isSetConfirmedCommands()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMacAddress()) {
          oprot.writeString(struct.macAddress);
        }
        if (struct.isSetConfirmedCommands()) {
          {
            oprot.writeI32(struct.confirmedCommands.size());
            for (CommandInfo _iter12 : struct.confirmedCommands)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendHeartBeat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.macAddress = iprot.readString();
          struct.setMacAddressIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.confirmedCommands = new ArrayList<CommandInfo>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              CommandInfo _elem15; // required
              _elem15 = new CommandInfo();
              _elem15.read(iprot);
              struct.confirmedCommands.add(_elem15);
            }
          }
          struct.setConfirmedCommandsIsSet(true);
        }
      }
    }

  }

  public static class sendHeartBeat_result implements org.apache.thrift.TBase<sendHeartBeat_result, sendHeartBeat_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendHeartBeat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendHeartBeat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendHeartBeat_resultTupleSchemeFactory());
    }

    public List<CommandInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommandInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendHeartBeat_result.class, metaDataMap);
    }

    public sendHeartBeat_result() {
    }

    public sendHeartBeat_result(
      List<CommandInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendHeartBeat_result(sendHeartBeat_result other) {
      if (other.isSetSuccess()) {
        List<CommandInfo> __this__success = new ArrayList<CommandInfo>();
        for (CommandInfo other_element : other.success) {
          __this__success.add(new CommandInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public sendHeartBeat_result deepCopy() {
      return new sendHeartBeat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CommandInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CommandInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<CommandInfo>();
      }
      this.success.add(elem);
    }

    public List<CommandInfo> getSuccess() {
      return this.success;
    }

    public sendHeartBeat_result setSuccess(List<CommandInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CommandInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendHeartBeat_result)
        return this.equals((sendHeartBeat_result)that);
      return false;
    }

    public boolean equals(sendHeartBeat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendHeartBeat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendHeartBeat_result typedOther = (sendHeartBeat_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendHeartBeat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendHeartBeat_resultStandardSchemeFactory implements SchemeFactory {
      public sendHeartBeat_resultStandardScheme getScheme() {
        return new sendHeartBeat_resultStandardScheme();
      }
    }

    private static class sendHeartBeat_resultStandardScheme extends StandardScheme<sendHeartBeat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendHeartBeat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<CommandInfo>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    CommandInfo _elem18; // required
                    _elem18 = new CommandInfo();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendHeartBeat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CommandInfo _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendHeartBeat_resultTupleSchemeFactory implements SchemeFactory {
      public sendHeartBeat_resultTupleScheme getScheme() {
        return new sendHeartBeat_resultTupleScheme();
      }
    }

    private static class sendHeartBeat_resultTupleScheme extends TupleScheme<sendHeartBeat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendHeartBeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CommandInfo _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendHeartBeat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CommandInfo>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              CommandInfo _elem23; // required
              _elem23 = new CommandInfo();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendNodeData_args implements org.apache.thrift.TBase<sendNodeData_args, sendNodeData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendNodeData_args");

    private static final org.apache.thrift.protocol.TField MAC_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("macAddress", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STRING_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("stringData", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendNodeData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendNodeData_argsTupleSchemeFactory());
    }

    public String macAddress; // required
    public String dataType; // required
    public String stringData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MAC_ADDRESS((short)1, "macAddress"),
      DATA_TYPE((short)2, "dataType"),
      STRING_DATA((short)3, "stringData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MAC_ADDRESS
            return MAC_ADDRESS;
          case 2: // DATA_TYPE
            return DATA_TYPE;
          case 3: // STRING_DATA
            return STRING_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MAC_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("macAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STRING_DATA, new org.apache.thrift.meta_data.FieldMetaData("stringData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendNodeData_args.class, metaDataMap);
    }

    public sendNodeData_args() {
    }

    public sendNodeData_args(
      String macAddress,
      String dataType,
      String stringData)
    {
      this();
      this.macAddress = macAddress;
      this.dataType = dataType;
      this.stringData = stringData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendNodeData_args(sendNodeData_args other) {
      if (other.isSetMacAddress()) {
        this.macAddress = other.macAddress;
      }
      if (other.isSetDataType()) {
        this.dataType = other.dataType;
      }
      if (other.isSetStringData()) {
        this.stringData = other.stringData;
      }
    }

    public sendNodeData_args deepCopy() {
      return new sendNodeData_args(this);
    }

    @Override
    public void clear() {
      this.macAddress = null;
      this.dataType = null;
      this.stringData = null;
    }

    public String getMacAddress() {
      return this.macAddress;
    }

    public sendNodeData_args setMacAddress(String macAddress) {
      this.macAddress = macAddress;
      return this;
    }

    public void unsetMacAddress() {
      this.macAddress = null;
    }

    /** Returns true if field macAddress is set (has been assigned a value) and false otherwise */
    public boolean isSetMacAddress() {
      return this.macAddress != null;
    }

    public void setMacAddressIsSet(boolean value) {
      if (!value) {
        this.macAddress = null;
      }
    }

    public String getDataType() {
      return this.dataType;
    }

    public sendNodeData_args setDataType(String dataType) {
      this.dataType = dataType;
      return this;
    }

    public void unsetDataType() {
      this.dataType = null;
    }

    /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
    public boolean isSetDataType() {
      return this.dataType != null;
    }

    public void setDataTypeIsSet(boolean value) {
      if (!value) {
        this.dataType = null;
      }
    }

    public String getStringData() {
      return this.stringData;
    }

    public sendNodeData_args setStringData(String stringData) {
      this.stringData = stringData;
      return this;
    }

    public void unsetStringData() {
      this.stringData = null;
    }

    /** Returns true if field stringData is set (has been assigned a value) and false otherwise */
    public boolean isSetStringData() {
      return this.stringData != null;
    }

    public void setStringDataIsSet(boolean value) {
      if (!value) {
        this.stringData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MAC_ADDRESS:
        if (value == null) {
          unsetMacAddress();
        } else {
          setMacAddress((String)value);
        }
        break;

      case DATA_TYPE:
        if (value == null) {
          unsetDataType();
        } else {
          setDataType((String)value);
        }
        break;

      case STRING_DATA:
        if (value == null) {
          unsetStringData();
        } else {
          setStringData((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MAC_ADDRESS:
        return getMacAddress();

      case DATA_TYPE:
        return getDataType();

      case STRING_DATA:
        return getStringData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MAC_ADDRESS:
        return isSetMacAddress();
      case DATA_TYPE:
        return isSetDataType();
      case STRING_DATA:
        return isSetStringData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendNodeData_args)
        return this.equals((sendNodeData_args)that);
      return false;
    }

    public boolean equals(sendNodeData_args that) {
      if (that == null)
        return false;

      boolean this_present_macAddress = true && this.isSetMacAddress();
      boolean that_present_macAddress = true && that.isSetMacAddress();
      if (this_present_macAddress || that_present_macAddress) {
        if (!(this_present_macAddress && that_present_macAddress))
          return false;
        if (!this.macAddress.equals(that.macAddress))
          return false;
      }

      boolean this_present_dataType = true && this.isSetDataType();
      boolean that_present_dataType = true && that.isSetDataType();
      if (this_present_dataType || that_present_dataType) {
        if (!(this_present_dataType && that_present_dataType))
          return false;
        if (!this.dataType.equals(that.dataType))
          return false;
      }

      boolean this_present_stringData = true && this.isSetStringData();
      boolean that_present_stringData = true && that.isSetStringData();
      if (this_present_stringData || that_present_stringData) {
        if (!(this_present_stringData && that_present_stringData))
          return false;
        if (!this.stringData.equals(that.stringData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendNodeData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendNodeData_args typedOther = (sendNodeData_args)other;

      lastComparison = Boolean.valueOf(isSetMacAddress()).compareTo(typedOther.isSetMacAddress());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMacAddress()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.macAddress, typedOther.macAddress);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDataType()).compareTo(typedOther.isSetDataType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, typedOther.dataType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStringData()).compareTo(typedOther.isSetStringData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStringData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringData, typedOther.stringData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendNodeData_args(");
      boolean first = true;

      sb.append("macAddress:");
      if (this.macAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.macAddress);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataType:");
      if (this.dataType == null) {
        sb.append("null");
      } else {
        sb.append(this.dataType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("stringData:");
      if (this.stringData == null) {
        sb.append("null");
      } else {
        sb.append(this.stringData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendNodeData_argsStandardSchemeFactory implements SchemeFactory {
      public sendNodeData_argsStandardScheme getScheme() {
        return new sendNodeData_argsStandardScheme();
      }
    }

    private static class sendNodeData_argsStandardScheme extends StandardScheme<sendNodeData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendNodeData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MAC_ADDRESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.macAddress = iprot.readString();
                struct.setMacAddressIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataType = iprot.readString();
                struct.setDataTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STRING_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stringData = iprot.readString();
                struct.setStringDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendNodeData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.macAddress != null) {
          oprot.writeFieldBegin(MAC_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.macAddress);
          oprot.writeFieldEnd();
        }
        if (struct.dataType != null) {
          oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
          oprot.writeString(struct.dataType);
          oprot.writeFieldEnd();
        }
        if (struct.stringData != null) {
          oprot.writeFieldBegin(STRING_DATA_FIELD_DESC);
          oprot.writeString(struct.stringData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendNodeData_argsTupleSchemeFactory implements SchemeFactory {
      public sendNodeData_argsTupleScheme getScheme() {
        return new sendNodeData_argsTupleScheme();
      }
    }

    private static class sendNodeData_argsTupleScheme extends TupleScheme<sendNodeData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendNodeData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMacAddress()) {
          optionals.set(0);
        }
        if (struct.isSetDataType()) {
          optionals.set(1);
        }
        if (struct.isSetStringData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMacAddress()) {
          oprot.writeString(struct.macAddress);
        }
        if (struct.isSetDataType()) {
          oprot.writeString(struct.dataType);
        }
        if (struct.isSetStringData()) {
          oprot.writeString(struct.stringData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendNodeData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.macAddress = iprot.readString();
          struct.setMacAddressIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataType = iprot.readString();
          struct.setDataTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stringData = iprot.readString();
          struct.setStringDataIsSet(true);
        }
      }
    }

  }

  public static class sendNodeData_result implements org.apache.thrift.TBase<sendNodeData_result, sendNodeData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendNodeData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendNodeData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendNodeData_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendNodeData_result.class, metaDataMap);
    }

    public sendNodeData_result() {
    }

    public sendNodeData_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendNodeData_result(sendNodeData_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public sendNodeData_result deepCopy() {
      return new sendNodeData_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendNodeData_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendNodeData_result)
        return this.equals((sendNodeData_result)that);
      return false;
    }

    public boolean equals(sendNodeData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(sendNodeData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      sendNodeData_result typedOther = (sendNodeData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendNodeData_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendNodeData_resultStandardSchemeFactory implements SchemeFactory {
      public sendNodeData_resultStandardScheme getScheme() {
        return new sendNodeData_resultStandardScheme();
      }
    }

    private static class sendNodeData_resultStandardScheme extends StandardScheme<sendNodeData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendNodeData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendNodeData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendNodeData_resultTupleSchemeFactory implements SchemeFactory {
      public sendNodeData_resultTupleScheme getScheme() {
        return new sendNodeData_resultTupleScheme();
      }
    }

    private static class sendNodeData_resultTupleScheme extends TupleScheme<sendNodeData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendNodeData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendNodeData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
