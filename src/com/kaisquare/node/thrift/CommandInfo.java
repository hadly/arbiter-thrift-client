/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.node.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Command Information
 * (1) command - command type
 * (2) channelMask - binary mask for channels
 * (3) commandData - json formatted extra information of command
 */
public class CommandInfo implements org.apache.thrift.TBase<CommandInfo, CommandInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommandInfo");

  private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CHANNEL_MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("channelMask", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMMAND_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("commandData", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommandInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommandInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see NodeOperation
   */
  public NodeOperation command; // required
  public int channelMask; // required
  public String commandData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see NodeOperation
     */
    COMMAND((short)1, "command"),
    CHANNEL_MASK((short)2, "channelMask"),
    COMMAND_DATA((short)3, "commandData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMAND
          return COMMAND;
        case 2: // CHANNEL_MASK
          return CHANNEL_MASK;
        case 3: // COMMAND_DATA
          return COMMAND_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHANNELMASK_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NodeOperation.class)));
    tmpMap.put(_Fields.CHANNEL_MASK, new org.apache.thrift.meta_data.FieldMetaData("channelMask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMAND_DATA, new org.apache.thrift.meta_data.FieldMetaData("commandData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommandInfo.class, metaDataMap);
  }

  public CommandInfo() {
  }

  public CommandInfo(
    NodeOperation command,
    int channelMask,
    String commandData)
  {
    this();
    this.command = command;
    this.channelMask = channelMask;
    setChannelMaskIsSet(true);
    this.commandData = commandData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommandInfo(CommandInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetCommand()) {
      this.command = other.command;
    }
    this.channelMask = other.channelMask;
    if (other.isSetCommandData()) {
      this.commandData = other.commandData;
    }
  }

  public CommandInfo deepCopy() {
    return new CommandInfo(this);
  }

  @Override
  public void clear() {
    this.command = null;
    setChannelMaskIsSet(false);
    this.channelMask = 0;
    this.commandData = null;
  }

  /**
   * 
   * @see NodeOperation
   */
  public NodeOperation getCommand() {
    return this.command;
  }

  /**
   * 
   * @see NodeOperation
   */
  public CommandInfo setCommand(NodeOperation command) {
    this.command = command;
    return this;
  }

  public void unsetCommand() {
    this.command = null;
  }

  /** Returns true if field command is set (has been assigned a value) and false otherwise */
  public boolean isSetCommand() {
    return this.command != null;
  }

  public void setCommandIsSet(boolean value) {
    if (!value) {
      this.command = null;
    }
  }

  public int getChannelMask() {
    return this.channelMask;
  }

  public CommandInfo setChannelMask(int channelMask) {
    this.channelMask = channelMask;
    setChannelMaskIsSet(true);
    return this;
  }

  public void unsetChannelMask() {
    __isset_bit_vector.clear(__CHANNELMASK_ISSET_ID);
  }

  /** Returns true if field channelMask is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelMask() {
    return __isset_bit_vector.get(__CHANNELMASK_ISSET_ID);
  }

  public void setChannelMaskIsSet(boolean value) {
    __isset_bit_vector.set(__CHANNELMASK_ISSET_ID, value);
  }

  public String getCommandData() {
    return this.commandData;
  }

  public CommandInfo setCommandData(String commandData) {
    this.commandData = commandData;
    return this;
  }

  public void unsetCommandData() {
    this.commandData = null;
  }

  /** Returns true if field commandData is set (has been assigned a value) and false otherwise */
  public boolean isSetCommandData() {
    return this.commandData != null;
  }

  public void setCommandDataIsSet(boolean value) {
    if (!value) {
      this.commandData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMAND:
      if (value == null) {
        unsetCommand();
      } else {
        setCommand((NodeOperation)value);
      }
      break;

    case CHANNEL_MASK:
      if (value == null) {
        unsetChannelMask();
      } else {
        setChannelMask((Integer)value);
      }
      break;

    case COMMAND_DATA:
      if (value == null) {
        unsetCommandData();
      } else {
        setCommandData((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMAND:
      return getCommand();

    case CHANNEL_MASK:
      return Integer.valueOf(getChannelMask());

    case COMMAND_DATA:
      return getCommandData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMAND:
      return isSetCommand();
    case CHANNEL_MASK:
      return isSetChannelMask();
    case COMMAND_DATA:
      return isSetCommandData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommandInfo)
      return this.equals((CommandInfo)that);
    return false;
  }

  public boolean equals(CommandInfo that) {
    if (that == null)
      return false;

    boolean this_present_command = true && this.isSetCommand();
    boolean that_present_command = true && that.isSetCommand();
    if (this_present_command || that_present_command) {
      if (!(this_present_command && that_present_command))
        return false;
      if (!this.command.equals(that.command))
        return false;
    }

    boolean this_present_channelMask = true;
    boolean that_present_channelMask = true;
    if (this_present_channelMask || that_present_channelMask) {
      if (!(this_present_channelMask && that_present_channelMask))
        return false;
      if (this.channelMask != that.channelMask)
        return false;
    }

    boolean this_present_commandData = true && this.isSetCommandData();
    boolean that_present_commandData = true && that.isSetCommandData();
    if (this_present_commandData || that_present_commandData) {
      if (!(this_present_commandData && that_present_commandData))
        return false;
      if (!this.commandData.equals(that.commandData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CommandInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CommandInfo typedOther = (CommandInfo)other;

    lastComparison = Boolean.valueOf(isSetCommand()).compareTo(typedOther.isSetCommand());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommand()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, typedOther.command);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelMask()).compareTo(typedOther.isSetChannelMask());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelMask()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelMask, typedOther.channelMask);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommandData()).compareTo(typedOther.isSetCommandData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommandData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commandData, typedOther.commandData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommandInfo(");
    boolean first = true;

    sb.append("command:");
    if (this.command == null) {
      sb.append("null");
    } else {
      sb.append(this.command);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelMask:");
    sb.append(this.channelMask);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commandData:");
    if (this.commandData == null) {
      sb.append("null");
    } else {
      sb.append(this.commandData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommandInfoStandardSchemeFactory implements SchemeFactory {
    public CommandInfoStandardScheme getScheme() {
      return new CommandInfoStandardScheme();
    }
  }

  private static class CommandInfoStandardScheme extends StandardScheme<CommandInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommandInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMAND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.command = NodeOperation.findByValue(iprot.readI32());
              struct.setCommandIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANNEL_MASK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channelMask = iprot.readI32();
              struct.setChannelMaskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMAND_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commandData = iprot.readString();
              struct.setCommandDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommandInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.command != null) {
        oprot.writeFieldBegin(COMMAND_FIELD_DESC);
        oprot.writeI32(struct.command.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANNEL_MASK_FIELD_DESC);
      oprot.writeI32(struct.channelMask);
      oprot.writeFieldEnd();
      if (struct.commandData != null) {
        oprot.writeFieldBegin(COMMAND_DATA_FIELD_DESC);
        oprot.writeString(struct.commandData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommandInfoTupleSchemeFactory implements SchemeFactory {
    public CommandInfoTupleScheme getScheme() {
      return new CommandInfoTupleScheme();
    }
  }

  private static class CommandInfoTupleScheme extends TupleScheme<CommandInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommandInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommand()) {
        optionals.set(0);
      }
      if (struct.isSetChannelMask()) {
        optionals.set(1);
      }
      if (struct.isSetCommandData()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCommand()) {
        oprot.writeI32(struct.command.getValue());
      }
      if (struct.isSetChannelMask()) {
        oprot.writeI32(struct.channelMask);
      }
      if (struct.isSetCommandData()) {
        oprot.writeString(struct.commandData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommandInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.command = NodeOperation.findByValue(iprot.readI32());
        struct.setCommandIsSet(true);
      }
      if (incoming.get(1)) {
        struct.channelMask = iprot.readI32();
        struct.setChannelMaskIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commandData = iprot.readString();
        struct.setCommandDataIsSet(true);
      }
    }
  }

}

