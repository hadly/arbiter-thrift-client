/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Detailed Device Information
 * Most of the fields in this API are mapped to corresponding fields in
 * Core Engine's existing database. RMS+ can safely ignore the fields that
 * it does not require.
 * 
 * (1) id - Unique identifier of this device
 * (2) name - Device Name
 * (3) key - MAC address of the device in the common notational format, e.g. 01:23:45:67:89:ab
 * (4) host - Device IP address or hostname
 * (5) port - Device port.
 * (6) login - Device login (user name). Ignore if not required.
 * (7) password - Device password. Ignore if not required.
 * (8) address - The default physical address of the location where the device is installed (postal address).
 * (9) lat - The default Latitude
 * (10) lng - The default Longitude
 * (11) accountId - ID of account this device is associated with.
 * (12) modelId - Model of this device
 * (13) statusId - "pending" or "active". Default status is "pending" until
 *                it is activated by the activateDevice() function.
 * (14) functionalityId - Not used
 * (15) alertFlag - Not used
 * (16) alive - Not used
 * (17) currentPositionId - Not used
 * (18) action - Not used
 * (19) eventSettings - Not used
 * (20) deviceServerUrls - Not used
 * (21) liveview - Not used
 * (22) snapshotRecordingEnabled - "true" to enable snapshot recording, "false" to disable
 * (23) snapshotRecordingInterval - Save the snapshot for this device every "snapshotRecordingInterval" seconds. Unit is "second".
 * (24) cloudRecordingEnabled - "true" to enable recording of device in cloud, "false" to disable
 */
public class DeviceDetails implements org.apache.thrift.TBase<DeviceDetails, DeviceDetails._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeviceDetails");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("login", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LAT_FIELD_DESC = new org.apache.thrift.protocol.TField("lat", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField LNG_FIELD_DESC = new org.apache.thrift.protocol.TField("lng", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accountId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField STATUS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("statusId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField FUNCTIONALITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("functionalityId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField ALERT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("alertFlag", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ALIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("alive", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField CURRENT_POSITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("currentPositionId", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField EVENT_SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventSettings", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField DEVICE_SERVER_URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceServerUrls", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField LIVEVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("liveview", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_RECORDING_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshotRecordingEnabled", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField SNAPSHOT_RECORDING_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshotRecordingInterval", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField CLOUD_RECORDING_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudRecordingEnabled", org.apache.thrift.protocol.TType.STRING, (short)24);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeviceDetailsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeviceDetailsTupleSchemeFactory());
  }

  public String id; // required
  public String name; // required
  public String key; // required
  public String host; // required
  public String port; // required
  public String login; // required
  public String password; // required
  public String address; // required
  public String lat; // required
  public String lng; // required
  public String accountId; // required
  public String modelId; // required
  public String statusId; // required
  public String functionalityId; // required
  public String alertFlag; // required
  public String alive; // required
  public String currentPositionId; // required
  public String action; // required
  public String eventSettings; // required
  public String deviceServerUrls; // required
  public String liveview; // required
  public String snapshotRecordingEnabled; // required
  public String snapshotRecordingInterval; // required
  public String cloudRecordingEnabled; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    KEY((short)3, "key"),
    HOST((short)4, "host"),
    PORT((short)5, "port"),
    LOGIN((short)6, "login"),
    PASSWORD((short)7, "password"),
    ADDRESS((short)8, "address"),
    LAT((short)9, "lat"),
    LNG((short)10, "lng"),
    ACCOUNT_ID((short)11, "accountId"),
    MODEL_ID((short)12, "modelId"),
    STATUS_ID((short)13, "statusId"),
    FUNCTIONALITY_ID((short)14, "functionalityId"),
    ALERT_FLAG((short)15, "alertFlag"),
    ALIVE((short)16, "alive"),
    CURRENT_POSITION_ID((short)17, "currentPositionId"),
    ACTION((short)18, "action"),
    EVENT_SETTINGS((short)19, "eventSettings"),
    DEVICE_SERVER_URLS((short)20, "deviceServerUrls"),
    LIVEVIEW((short)21, "liveview"),
    SNAPSHOT_RECORDING_ENABLED((short)22, "snapshotRecordingEnabled"),
    SNAPSHOT_RECORDING_INTERVAL((short)23, "snapshotRecordingInterval"),
    CLOUD_RECORDING_ENABLED((short)24, "cloudRecordingEnabled");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // KEY
          return KEY;
        case 4: // HOST
          return HOST;
        case 5: // PORT
          return PORT;
        case 6: // LOGIN
          return LOGIN;
        case 7: // PASSWORD
          return PASSWORD;
        case 8: // ADDRESS
          return ADDRESS;
        case 9: // LAT
          return LAT;
        case 10: // LNG
          return LNG;
        case 11: // ACCOUNT_ID
          return ACCOUNT_ID;
        case 12: // MODEL_ID
          return MODEL_ID;
        case 13: // STATUS_ID
          return STATUS_ID;
        case 14: // FUNCTIONALITY_ID
          return FUNCTIONALITY_ID;
        case 15: // ALERT_FLAG
          return ALERT_FLAG;
        case 16: // ALIVE
          return ALIVE;
        case 17: // CURRENT_POSITION_ID
          return CURRENT_POSITION_ID;
        case 18: // ACTION
          return ACTION;
        case 19: // EVENT_SETTINGS
          return EVENT_SETTINGS;
        case 20: // DEVICE_SERVER_URLS
          return DEVICE_SERVER_URLS;
        case 21: // LIVEVIEW
          return LIVEVIEW;
        case 22: // SNAPSHOT_RECORDING_ENABLED
          return SNAPSHOT_RECORDING_ENABLED;
        case 23: // SNAPSHOT_RECORDING_INTERVAL
          return SNAPSHOT_RECORDING_INTERVAL;
        case 24: // CLOUD_RECORDING_ENABLED
          return CLOUD_RECORDING_ENABLED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN, new org.apache.thrift.meta_data.FieldMetaData("login", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAT, new org.apache.thrift.meta_data.FieldMetaData("lat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LNG, new org.apache.thrift.meta_data.FieldMetaData("lng", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("accountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_ID, new org.apache.thrift.meta_data.FieldMetaData("statusId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FUNCTIONALITY_ID, new org.apache.thrift.meta_data.FieldMetaData("functionalityId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALERT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("alertFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALIVE, new org.apache.thrift.meta_data.FieldMetaData("alive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENT_POSITION_ID, new org.apache.thrift.meta_data.FieldMetaData("currentPositionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EVENT_SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("eventSettings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_SERVER_URLS, new org.apache.thrift.meta_data.FieldMetaData("deviceServerUrls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVEVIEW, new org.apache.thrift.meta_data.FieldMetaData("liveview", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNAPSHOT_RECORDING_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("snapshotRecordingEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNAPSHOT_RECORDING_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("snapshotRecordingInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLOUD_RECORDING_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("cloudRecordingEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeviceDetails.class, metaDataMap);
  }

  public DeviceDetails() {
  }

  public DeviceDetails(
    String id,
    String name,
    String key,
    String host,
    String port,
    String login,
    String password,
    String address,
    String lat,
    String lng,
    String accountId,
    String modelId,
    String statusId,
    String functionalityId,
    String alertFlag,
    String alive,
    String currentPositionId,
    String action,
    String eventSettings,
    String deviceServerUrls,
    String liveview,
    String snapshotRecordingEnabled,
    String snapshotRecordingInterval,
    String cloudRecordingEnabled)
  {
    this();
    this.id = id;
    this.name = name;
    this.key = key;
    this.host = host;
    this.port = port;
    this.login = login;
    this.password = password;
    this.address = address;
    this.lat = lat;
    this.lng = lng;
    this.accountId = accountId;
    this.modelId = modelId;
    this.statusId = statusId;
    this.functionalityId = functionalityId;
    this.alertFlag = alertFlag;
    this.alive = alive;
    this.currentPositionId = currentPositionId;
    this.action = action;
    this.eventSettings = eventSettings;
    this.deviceServerUrls = deviceServerUrls;
    this.liveview = liveview;
    this.snapshotRecordingEnabled = snapshotRecordingEnabled;
    this.snapshotRecordingInterval = snapshotRecordingInterval;
    this.cloudRecordingEnabled = cloudRecordingEnabled;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeviceDetails(DeviceDetails other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    if (other.isSetPort()) {
      this.port = other.port;
    }
    if (other.isSetLogin()) {
      this.login = other.login;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetLat()) {
      this.lat = other.lat;
    }
    if (other.isSetLng()) {
      this.lng = other.lng;
    }
    if (other.isSetAccountId()) {
      this.accountId = other.accountId;
    }
    if (other.isSetModelId()) {
      this.modelId = other.modelId;
    }
    if (other.isSetStatusId()) {
      this.statusId = other.statusId;
    }
    if (other.isSetFunctionalityId()) {
      this.functionalityId = other.functionalityId;
    }
    if (other.isSetAlertFlag()) {
      this.alertFlag = other.alertFlag;
    }
    if (other.isSetAlive()) {
      this.alive = other.alive;
    }
    if (other.isSetCurrentPositionId()) {
      this.currentPositionId = other.currentPositionId;
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetEventSettings()) {
      this.eventSettings = other.eventSettings;
    }
    if (other.isSetDeviceServerUrls()) {
      this.deviceServerUrls = other.deviceServerUrls;
    }
    if (other.isSetLiveview()) {
      this.liveview = other.liveview;
    }
    if (other.isSetSnapshotRecordingEnabled()) {
      this.snapshotRecordingEnabled = other.snapshotRecordingEnabled;
    }
    if (other.isSetSnapshotRecordingInterval()) {
      this.snapshotRecordingInterval = other.snapshotRecordingInterval;
    }
    if (other.isSetCloudRecordingEnabled()) {
      this.cloudRecordingEnabled = other.cloudRecordingEnabled;
    }
  }

  public DeviceDetails deepCopy() {
    return new DeviceDetails(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.key = null;
    this.host = null;
    this.port = null;
    this.login = null;
    this.password = null;
    this.address = null;
    this.lat = null;
    this.lng = null;
    this.accountId = null;
    this.modelId = null;
    this.statusId = null;
    this.functionalityId = null;
    this.alertFlag = null;
    this.alive = null;
    this.currentPositionId = null;
    this.action = null;
    this.eventSettings = null;
    this.deviceServerUrls = null;
    this.liveview = null;
    this.snapshotRecordingEnabled = null;
    this.snapshotRecordingInterval = null;
    this.cloudRecordingEnabled = null;
  }

  public String getId() {
    return this.id;
  }

  public DeviceDetails setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public DeviceDetails setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getKey() {
    return this.key;
  }

  public DeviceDetails setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public String getHost() {
    return this.host;
  }

  public DeviceDetails setHost(String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public String getPort() {
    return this.port;
  }

  public DeviceDetails setPort(String port) {
    this.port = port;
    return this;
  }

  public void unsetPort() {
    this.port = null;
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return this.port != null;
  }

  public void setPortIsSet(boolean value) {
    if (!value) {
      this.port = null;
    }
  }

  public String getLogin() {
    return this.login;
  }

  public DeviceDetails setLogin(String login) {
    this.login = login;
    return this;
  }

  public void unsetLogin() {
    this.login = null;
  }

  /** Returns true if field login is set (has been assigned a value) and false otherwise */
  public boolean isSetLogin() {
    return this.login != null;
  }

  public void setLoginIsSet(boolean value) {
    if (!value) {
      this.login = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public DeviceDetails setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public DeviceDetails setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getLat() {
    return this.lat;
  }

  public DeviceDetails setLat(String lat) {
    this.lat = lat;
    return this;
  }

  public void unsetLat() {
    this.lat = null;
  }

  /** Returns true if field lat is set (has been assigned a value) and false otherwise */
  public boolean isSetLat() {
    return this.lat != null;
  }

  public void setLatIsSet(boolean value) {
    if (!value) {
      this.lat = null;
    }
  }

  public String getLng() {
    return this.lng;
  }

  public DeviceDetails setLng(String lng) {
    this.lng = lng;
    return this;
  }

  public void unsetLng() {
    this.lng = null;
  }

  /** Returns true if field lng is set (has been assigned a value) and false otherwise */
  public boolean isSetLng() {
    return this.lng != null;
  }

  public void setLngIsSet(boolean value) {
    if (!value) {
      this.lng = null;
    }
  }

  public String getAccountId() {
    return this.accountId;
  }

  public DeviceDetails setAccountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

  public void unsetAccountId() {
    this.accountId = null;
  }

  /** Returns true if field accountId is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountId() {
    return this.accountId != null;
  }

  public void setAccountIdIsSet(boolean value) {
    if (!value) {
      this.accountId = null;
    }
  }

  public String getModelId() {
    return this.modelId;
  }

  public DeviceDetails setModelId(String modelId) {
    this.modelId = modelId;
    return this;
  }

  public void unsetModelId() {
    this.modelId = null;
  }

  /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
  public boolean isSetModelId() {
    return this.modelId != null;
  }

  public void setModelIdIsSet(boolean value) {
    if (!value) {
      this.modelId = null;
    }
  }

  public String getStatusId() {
    return this.statusId;
  }

  public DeviceDetails setStatusId(String statusId) {
    this.statusId = statusId;
    return this;
  }

  public void unsetStatusId() {
    this.statusId = null;
  }

  /** Returns true if field statusId is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusId() {
    return this.statusId != null;
  }

  public void setStatusIdIsSet(boolean value) {
    if (!value) {
      this.statusId = null;
    }
  }

  public String getFunctionalityId() {
    return this.functionalityId;
  }

  public DeviceDetails setFunctionalityId(String functionalityId) {
    this.functionalityId = functionalityId;
    return this;
  }

  public void unsetFunctionalityId() {
    this.functionalityId = null;
  }

  /** Returns true if field functionalityId is set (has been assigned a value) and false otherwise */
  public boolean isSetFunctionalityId() {
    return this.functionalityId != null;
  }

  public void setFunctionalityIdIsSet(boolean value) {
    if (!value) {
      this.functionalityId = null;
    }
  }

  public String getAlertFlag() {
    return this.alertFlag;
  }

  public DeviceDetails setAlertFlag(String alertFlag) {
    this.alertFlag = alertFlag;
    return this;
  }

  public void unsetAlertFlag() {
    this.alertFlag = null;
  }

  /** Returns true if field alertFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetAlertFlag() {
    return this.alertFlag != null;
  }

  public void setAlertFlagIsSet(boolean value) {
    if (!value) {
      this.alertFlag = null;
    }
  }

  public String getAlive() {
    return this.alive;
  }

  public DeviceDetails setAlive(String alive) {
    this.alive = alive;
    return this;
  }

  public void unsetAlive() {
    this.alive = null;
  }

  /** Returns true if field alive is set (has been assigned a value) and false otherwise */
  public boolean isSetAlive() {
    return this.alive != null;
  }

  public void setAliveIsSet(boolean value) {
    if (!value) {
      this.alive = null;
    }
  }

  public String getCurrentPositionId() {
    return this.currentPositionId;
  }

  public DeviceDetails setCurrentPositionId(String currentPositionId) {
    this.currentPositionId = currentPositionId;
    return this;
  }

  public void unsetCurrentPositionId() {
    this.currentPositionId = null;
  }

  /** Returns true if field currentPositionId is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentPositionId() {
    return this.currentPositionId != null;
  }

  public void setCurrentPositionIdIsSet(boolean value) {
    if (!value) {
      this.currentPositionId = null;
    }
  }

  public String getAction() {
    return this.action;
  }

  public DeviceDetails setAction(String action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public String getEventSettings() {
    return this.eventSettings;
  }

  public DeviceDetails setEventSettings(String eventSettings) {
    this.eventSettings = eventSettings;
    return this;
  }

  public void unsetEventSettings() {
    this.eventSettings = null;
  }

  /** Returns true if field eventSettings is set (has been assigned a value) and false otherwise */
  public boolean isSetEventSettings() {
    return this.eventSettings != null;
  }

  public void setEventSettingsIsSet(boolean value) {
    if (!value) {
      this.eventSettings = null;
    }
  }

  public String getDeviceServerUrls() {
    return this.deviceServerUrls;
  }

  public DeviceDetails setDeviceServerUrls(String deviceServerUrls) {
    this.deviceServerUrls = deviceServerUrls;
    return this;
  }

  public void unsetDeviceServerUrls() {
    this.deviceServerUrls = null;
  }

  /** Returns true if field deviceServerUrls is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceServerUrls() {
    return this.deviceServerUrls != null;
  }

  public void setDeviceServerUrlsIsSet(boolean value) {
    if (!value) {
      this.deviceServerUrls = null;
    }
  }

  public String getLiveview() {
    return this.liveview;
  }

  public DeviceDetails setLiveview(String liveview) {
    this.liveview = liveview;
    return this;
  }

  public void unsetLiveview() {
    this.liveview = null;
  }

  /** Returns true if field liveview is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveview() {
    return this.liveview != null;
  }

  public void setLiveviewIsSet(boolean value) {
    if (!value) {
      this.liveview = null;
    }
  }

  public String getSnapshotRecordingEnabled() {
    return this.snapshotRecordingEnabled;
  }

  public DeviceDetails setSnapshotRecordingEnabled(String snapshotRecordingEnabled) {
    this.snapshotRecordingEnabled = snapshotRecordingEnabled;
    return this;
  }

  public void unsetSnapshotRecordingEnabled() {
    this.snapshotRecordingEnabled = null;
  }

  /** Returns true if field snapshotRecordingEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshotRecordingEnabled() {
    return this.snapshotRecordingEnabled != null;
  }

  public void setSnapshotRecordingEnabledIsSet(boolean value) {
    if (!value) {
      this.snapshotRecordingEnabled = null;
    }
  }

  public String getSnapshotRecordingInterval() {
    return this.snapshotRecordingInterval;
  }

  public DeviceDetails setSnapshotRecordingInterval(String snapshotRecordingInterval) {
    this.snapshotRecordingInterval = snapshotRecordingInterval;
    return this;
  }

  public void unsetSnapshotRecordingInterval() {
    this.snapshotRecordingInterval = null;
  }

  /** Returns true if field snapshotRecordingInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetSnapshotRecordingInterval() {
    return this.snapshotRecordingInterval != null;
  }

  public void setSnapshotRecordingIntervalIsSet(boolean value) {
    if (!value) {
      this.snapshotRecordingInterval = null;
    }
  }

  public String getCloudRecordingEnabled() {
    return this.cloudRecordingEnabled;
  }

  public DeviceDetails setCloudRecordingEnabled(String cloudRecordingEnabled) {
    this.cloudRecordingEnabled = cloudRecordingEnabled;
    return this;
  }

  public void unsetCloudRecordingEnabled() {
    this.cloudRecordingEnabled = null;
  }

  /** Returns true if field cloudRecordingEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetCloudRecordingEnabled() {
    return this.cloudRecordingEnabled != null;
  }

  public void setCloudRecordingEnabledIsSet(boolean value) {
    if (!value) {
      this.cloudRecordingEnabled = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((String)value);
      }
      break;

    case LOGIN:
      if (value == null) {
        unsetLogin();
      } else {
        setLogin((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case LAT:
      if (value == null) {
        unsetLat();
      } else {
        setLat((String)value);
      }
      break;

    case LNG:
      if (value == null) {
        unsetLng();
      } else {
        setLng((String)value);
      }
      break;

    case ACCOUNT_ID:
      if (value == null) {
        unsetAccountId();
      } else {
        setAccountId((String)value);
      }
      break;

    case MODEL_ID:
      if (value == null) {
        unsetModelId();
      } else {
        setModelId((String)value);
      }
      break;

    case STATUS_ID:
      if (value == null) {
        unsetStatusId();
      } else {
        setStatusId((String)value);
      }
      break;

    case FUNCTIONALITY_ID:
      if (value == null) {
        unsetFunctionalityId();
      } else {
        setFunctionalityId((String)value);
      }
      break;

    case ALERT_FLAG:
      if (value == null) {
        unsetAlertFlag();
      } else {
        setAlertFlag((String)value);
      }
      break;

    case ALIVE:
      if (value == null) {
        unsetAlive();
      } else {
        setAlive((String)value);
      }
      break;

    case CURRENT_POSITION_ID:
      if (value == null) {
        unsetCurrentPositionId();
      } else {
        setCurrentPositionId((String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((String)value);
      }
      break;

    case EVENT_SETTINGS:
      if (value == null) {
        unsetEventSettings();
      } else {
        setEventSettings((String)value);
      }
      break;

    case DEVICE_SERVER_URLS:
      if (value == null) {
        unsetDeviceServerUrls();
      } else {
        setDeviceServerUrls((String)value);
      }
      break;

    case LIVEVIEW:
      if (value == null) {
        unsetLiveview();
      } else {
        setLiveview((String)value);
      }
      break;

    case SNAPSHOT_RECORDING_ENABLED:
      if (value == null) {
        unsetSnapshotRecordingEnabled();
      } else {
        setSnapshotRecordingEnabled((String)value);
      }
      break;

    case SNAPSHOT_RECORDING_INTERVAL:
      if (value == null) {
        unsetSnapshotRecordingInterval();
      } else {
        setSnapshotRecordingInterval((String)value);
      }
      break;

    case CLOUD_RECORDING_ENABLED:
      if (value == null) {
        unsetCloudRecordingEnabled();
      } else {
        setCloudRecordingEnabled((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case KEY:
      return getKey();

    case HOST:
      return getHost();

    case PORT:
      return getPort();

    case LOGIN:
      return getLogin();

    case PASSWORD:
      return getPassword();

    case ADDRESS:
      return getAddress();

    case LAT:
      return getLat();

    case LNG:
      return getLng();

    case ACCOUNT_ID:
      return getAccountId();

    case MODEL_ID:
      return getModelId();

    case STATUS_ID:
      return getStatusId();

    case FUNCTIONALITY_ID:
      return getFunctionalityId();

    case ALERT_FLAG:
      return getAlertFlag();

    case ALIVE:
      return getAlive();

    case CURRENT_POSITION_ID:
      return getCurrentPositionId();

    case ACTION:
      return getAction();

    case EVENT_SETTINGS:
      return getEventSettings();

    case DEVICE_SERVER_URLS:
      return getDeviceServerUrls();

    case LIVEVIEW:
      return getLiveview();

    case SNAPSHOT_RECORDING_ENABLED:
      return getSnapshotRecordingEnabled();

    case SNAPSHOT_RECORDING_INTERVAL:
      return getSnapshotRecordingInterval();

    case CLOUD_RECORDING_ENABLED:
      return getCloudRecordingEnabled();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case KEY:
      return isSetKey();
    case HOST:
      return isSetHost();
    case PORT:
      return isSetPort();
    case LOGIN:
      return isSetLogin();
    case PASSWORD:
      return isSetPassword();
    case ADDRESS:
      return isSetAddress();
    case LAT:
      return isSetLat();
    case LNG:
      return isSetLng();
    case ACCOUNT_ID:
      return isSetAccountId();
    case MODEL_ID:
      return isSetModelId();
    case STATUS_ID:
      return isSetStatusId();
    case FUNCTIONALITY_ID:
      return isSetFunctionalityId();
    case ALERT_FLAG:
      return isSetAlertFlag();
    case ALIVE:
      return isSetAlive();
    case CURRENT_POSITION_ID:
      return isSetCurrentPositionId();
    case ACTION:
      return isSetAction();
    case EVENT_SETTINGS:
      return isSetEventSettings();
    case DEVICE_SERVER_URLS:
      return isSetDeviceServerUrls();
    case LIVEVIEW:
      return isSetLiveview();
    case SNAPSHOT_RECORDING_ENABLED:
      return isSetSnapshotRecordingEnabled();
    case SNAPSHOT_RECORDING_INTERVAL:
      return isSetSnapshotRecordingInterval();
    case CLOUD_RECORDING_ENABLED:
      return isSetCloudRecordingEnabled();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeviceDetails)
      return this.equals((DeviceDetails)that);
    return false;
  }

  public boolean equals(DeviceDetails that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (!this.port.equals(that.port))
        return false;
    }

    boolean this_present_login = true && this.isSetLogin();
    boolean that_present_login = true && that.isSetLogin();
    if (this_present_login || that_present_login) {
      if (!(this_present_login && that_present_login))
        return false;
      if (!this.login.equals(that.login))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_lat = true && this.isSetLat();
    boolean that_present_lat = true && that.isSetLat();
    if (this_present_lat || that_present_lat) {
      if (!(this_present_lat && that_present_lat))
        return false;
      if (!this.lat.equals(that.lat))
        return false;
    }

    boolean this_present_lng = true && this.isSetLng();
    boolean that_present_lng = true && that.isSetLng();
    if (this_present_lng || that_present_lng) {
      if (!(this_present_lng && that_present_lng))
        return false;
      if (!this.lng.equals(that.lng))
        return false;
    }

    boolean this_present_accountId = true && this.isSetAccountId();
    boolean that_present_accountId = true && that.isSetAccountId();
    if (this_present_accountId || that_present_accountId) {
      if (!(this_present_accountId && that_present_accountId))
        return false;
      if (!this.accountId.equals(that.accountId))
        return false;
    }

    boolean this_present_modelId = true && this.isSetModelId();
    boolean that_present_modelId = true && that.isSetModelId();
    if (this_present_modelId || that_present_modelId) {
      if (!(this_present_modelId && that_present_modelId))
        return false;
      if (!this.modelId.equals(that.modelId))
        return false;
    }

    boolean this_present_statusId = true && this.isSetStatusId();
    boolean that_present_statusId = true && that.isSetStatusId();
    if (this_present_statusId || that_present_statusId) {
      if (!(this_present_statusId && that_present_statusId))
        return false;
      if (!this.statusId.equals(that.statusId))
        return false;
    }

    boolean this_present_functionalityId = true && this.isSetFunctionalityId();
    boolean that_present_functionalityId = true && that.isSetFunctionalityId();
    if (this_present_functionalityId || that_present_functionalityId) {
      if (!(this_present_functionalityId && that_present_functionalityId))
        return false;
      if (!this.functionalityId.equals(that.functionalityId))
        return false;
    }

    boolean this_present_alertFlag = true && this.isSetAlertFlag();
    boolean that_present_alertFlag = true && that.isSetAlertFlag();
    if (this_present_alertFlag || that_present_alertFlag) {
      if (!(this_present_alertFlag && that_present_alertFlag))
        return false;
      if (!this.alertFlag.equals(that.alertFlag))
        return false;
    }

    boolean this_present_alive = true && this.isSetAlive();
    boolean that_present_alive = true && that.isSetAlive();
    if (this_present_alive || that_present_alive) {
      if (!(this_present_alive && that_present_alive))
        return false;
      if (!this.alive.equals(that.alive))
        return false;
    }

    boolean this_present_currentPositionId = true && this.isSetCurrentPositionId();
    boolean that_present_currentPositionId = true && that.isSetCurrentPositionId();
    if (this_present_currentPositionId || that_present_currentPositionId) {
      if (!(this_present_currentPositionId && that_present_currentPositionId))
        return false;
      if (!this.currentPositionId.equals(that.currentPositionId))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_eventSettings = true && this.isSetEventSettings();
    boolean that_present_eventSettings = true && that.isSetEventSettings();
    if (this_present_eventSettings || that_present_eventSettings) {
      if (!(this_present_eventSettings && that_present_eventSettings))
        return false;
      if (!this.eventSettings.equals(that.eventSettings))
        return false;
    }

    boolean this_present_deviceServerUrls = true && this.isSetDeviceServerUrls();
    boolean that_present_deviceServerUrls = true && that.isSetDeviceServerUrls();
    if (this_present_deviceServerUrls || that_present_deviceServerUrls) {
      if (!(this_present_deviceServerUrls && that_present_deviceServerUrls))
        return false;
      if (!this.deviceServerUrls.equals(that.deviceServerUrls))
        return false;
    }

    boolean this_present_liveview = true && this.isSetLiveview();
    boolean that_present_liveview = true && that.isSetLiveview();
    if (this_present_liveview || that_present_liveview) {
      if (!(this_present_liveview && that_present_liveview))
        return false;
      if (!this.liveview.equals(that.liveview))
        return false;
    }

    boolean this_present_snapshotRecordingEnabled = true && this.isSetSnapshotRecordingEnabled();
    boolean that_present_snapshotRecordingEnabled = true && that.isSetSnapshotRecordingEnabled();
    if (this_present_snapshotRecordingEnabled || that_present_snapshotRecordingEnabled) {
      if (!(this_present_snapshotRecordingEnabled && that_present_snapshotRecordingEnabled))
        return false;
      if (!this.snapshotRecordingEnabled.equals(that.snapshotRecordingEnabled))
        return false;
    }

    boolean this_present_snapshotRecordingInterval = true && this.isSetSnapshotRecordingInterval();
    boolean that_present_snapshotRecordingInterval = true && that.isSetSnapshotRecordingInterval();
    if (this_present_snapshotRecordingInterval || that_present_snapshotRecordingInterval) {
      if (!(this_present_snapshotRecordingInterval && that_present_snapshotRecordingInterval))
        return false;
      if (!this.snapshotRecordingInterval.equals(that.snapshotRecordingInterval))
        return false;
    }

    boolean this_present_cloudRecordingEnabled = true && this.isSetCloudRecordingEnabled();
    boolean that_present_cloudRecordingEnabled = true && that.isSetCloudRecordingEnabled();
    if (this_present_cloudRecordingEnabled || that_present_cloudRecordingEnabled) {
      if (!(this_present_cloudRecordingEnabled && that_present_cloudRecordingEnabled))
        return false;
      if (!this.cloudRecordingEnabled.equals(that.cloudRecordingEnabled))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DeviceDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DeviceDetails typedOther = (DeviceDetails)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHost()).compareTo(typedOther.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, typedOther.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(typedOther.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, typedOther.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogin()).compareTo(typedOther.isSetLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.login, typedOther.login);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(typedOther.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, typedOther.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(typedOther.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, typedOther.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLat()).compareTo(typedOther.isSetLat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lat, typedOther.lat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLng()).compareTo(typedOther.isSetLng());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLng()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lng, typedOther.lng);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountId()).compareTo(typedOther.isSetAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountId, typedOther.accountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelId()).compareTo(typedOther.isSetModelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, typedOther.modelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusId()).compareTo(typedOther.isSetStatusId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusId, typedOther.statusId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFunctionalityId()).compareTo(typedOther.isSetFunctionalityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFunctionalityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.functionalityId, typedOther.functionalityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlertFlag()).compareTo(typedOther.isSetAlertFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlertFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alertFlag, typedOther.alertFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlive()).compareTo(typedOther.isSetAlive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alive, typedOther.alive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentPositionId()).compareTo(typedOther.isSetCurrentPositionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentPositionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentPositionId, typedOther.currentPositionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, typedOther.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventSettings()).compareTo(typedOther.isSetEventSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventSettings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventSettings, typedOther.eventSettings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceServerUrls()).compareTo(typedOther.isSetDeviceServerUrls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceServerUrls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceServerUrls, typedOther.deviceServerUrls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveview()).compareTo(typedOther.isSetLiveview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveview, typedOther.liveview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapshotRecordingEnabled()).compareTo(typedOther.isSetSnapshotRecordingEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshotRecordingEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshotRecordingEnabled, typedOther.snapshotRecordingEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSnapshotRecordingInterval()).compareTo(typedOther.isSetSnapshotRecordingInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnapshotRecordingInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshotRecordingInterval, typedOther.snapshotRecordingInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloudRecordingEnabled()).compareTo(typedOther.isSetCloudRecordingEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloudRecordingEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudRecordingEnabled, typedOther.cloudRecordingEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeviceDetails(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    if (this.port == null) {
      sb.append("null");
    } else {
      sb.append(this.port);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("login:");
    if (this.login == null) {
      sb.append("null");
    } else {
      sb.append(this.login);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("address:");
    if (this.address == null) {
      sb.append("null");
    } else {
      sb.append(this.address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lat:");
    if (this.lat == null) {
      sb.append("null");
    } else {
      sb.append(this.lat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lng:");
    if (this.lng == null) {
      sb.append("null");
    } else {
      sb.append(this.lng);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accountId:");
    if (this.accountId == null) {
      sb.append("null");
    } else {
      sb.append(this.accountId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelId:");
    if (this.modelId == null) {
      sb.append("null");
    } else {
      sb.append(this.modelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusId:");
    if (this.statusId == null) {
      sb.append("null");
    } else {
      sb.append(this.statusId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("functionalityId:");
    if (this.functionalityId == null) {
      sb.append("null");
    } else {
      sb.append(this.functionalityId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alertFlag:");
    if (this.alertFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.alertFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alive:");
    if (this.alive == null) {
      sb.append("null");
    } else {
      sb.append(this.alive);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentPositionId:");
    if (this.currentPositionId == null) {
      sb.append("null");
    } else {
      sb.append(this.currentPositionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventSettings:");
    if (this.eventSettings == null) {
      sb.append("null");
    } else {
      sb.append(this.eventSettings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceServerUrls:");
    if (this.deviceServerUrls == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceServerUrls);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveview:");
    if (this.liveview == null) {
      sb.append("null");
    } else {
      sb.append(this.liveview);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("snapshotRecordingEnabled:");
    if (this.snapshotRecordingEnabled == null) {
      sb.append("null");
    } else {
      sb.append(this.snapshotRecordingEnabled);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("snapshotRecordingInterval:");
    if (this.snapshotRecordingInterval == null) {
      sb.append("null");
    } else {
      sb.append(this.snapshotRecordingInterval);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cloudRecordingEnabled:");
    if (this.cloudRecordingEnabled == null) {
      sb.append("null");
    } else {
      sb.append(this.cloudRecordingEnabled);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeviceDetailsStandardSchemeFactory implements SchemeFactory {
    public DeviceDetailsStandardScheme getScheme() {
      return new DeviceDetailsStandardScheme();
    }
  }

  private static class DeviceDetailsStandardScheme extends StandardScheme<DeviceDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeviceDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.port = iprot.readString();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.login = iprot.readString();
              struct.setLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lat = iprot.readString();
              struct.setLatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LNG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lng = iprot.readString();
              struct.setLngIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accountId = iprot.readString();
              struct.setAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MODEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelId = iprot.readString();
              struct.setModelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STATUS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusId = iprot.readString();
              struct.setStatusIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FUNCTIONALITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.functionalityId = iprot.readString();
              struct.setFunctionalityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ALERT_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alertFlag = iprot.readString();
              struct.setAlertFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ALIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alive = iprot.readString();
              struct.setAliveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CURRENT_POSITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currentPositionId = iprot.readString();
              struct.setCurrentPositionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.action = iprot.readString();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // EVENT_SETTINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eventSettings = iprot.readString();
              struct.setEventSettingsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // DEVICE_SERVER_URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceServerUrls = iprot.readString();
              struct.setDeviceServerUrlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LIVEVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveview = iprot.readString();
              struct.setLiveviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // SNAPSHOT_RECORDING_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snapshotRecordingEnabled = iprot.readString();
              struct.setSnapshotRecordingEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SNAPSHOT_RECORDING_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.snapshotRecordingInterval = iprot.readString();
              struct.setSnapshotRecordingIntervalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CLOUD_RECORDING_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cloudRecordingEnabled = iprot.readString();
              struct.setCloudRecordingEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeviceDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(struct.host);
        oprot.writeFieldEnd();
      }
      if (struct.port != null) {
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeString(struct.port);
        oprot.writeFieldEnd();
      }
      if (struct.login != null) {
        oprot.writeFieldBegin(LOGIN_FIELD_DESC);
        oprot.writeString(struct.login);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.address != null) {
        oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
        oprot.writeString(struct.address);
        oprot.writeFieldEnd();
      }
      if (struct.lat != null) {
        oprot.writeFieldBegin(LAT_FIELD_DESC);
        oprot.writeString(struct.lat);
        oprot.writeFieldEnd();
      }
      if (struct.lng != null) {
        oprot.writeFieldBegin(LNG_FIELD_DESC);
        oprot.writeString(struct.lng);
        oprot.writeFieldEnd();
      }
      if (struct.accountId != null) {
        oprot.writeFieldBegin(ACCOUNT_ID_FIELD_DESC);
        oprot.writeString(struct.accountId);
        oprot.writeFieldEnd();
      }
      if (struct.modelId != null) {
        oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
        oprot.writeString(struct.modelId);
        oprot.writeFieldEnd();
      }
      if (struct.statusId != null) {
        oprot.writeFieldBegin(STATUS_ID_FIELD_DESC);
        oprot.writeString(struct.statusId);
        oprot.writeFieldEnd();
      }
      if (struct.functionalityId != null) {
        oprot.writeFieldBegin(FUNCTIONALITY_ID_FIELD_DESC);
        oprot.writeString(struct.functionalityId);
        oprot.writeFieldEnd();
      }
      if (struct.alertFlag != null) {
        oprot.writeFieldBegin(ALERT_FLAG_FIELD_DESC);
        oprot.writeString(struct.alertFlag);
        oprot.writeFieldEnd();
      }
      if (struct.alive != null) {
        oprot.writeFieldBegin(ALIVE_FIELD_DESC);
        oprot.writeString(struct.alive);
        oprot.writeFieldEnd();
      }
      if (struct.currentPositionId != null) {
        oprot.writeFieldBegin(CURRENT_POSITION_ID_FIELD_DESC);
        oprot.writeString(struct.currentPositionId);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeString(struct.action);
        oprot.writeFieldEnd();
      }
      if (struct.eventSettings != null) {
        oprot.writeFieldBegin(EVENT_SETTINGS_FIELD_DESC);
        oprot.writeString(struct.eventSettings);
        oprot.writeFieldEnd();
      }
      if (struct.deviceServerUrls != null) {
        oprot.writeFieldBegin(DEVICE_SERVER_URLS_FIELD_DESC);
        oprot.writeString(struct.deviceServerUrls);
        oprot.writeFieldEnd();
      }
      if (struct.liveview != null) {
        oprot.writeFieldBegin(LIVEVIEW_FIELD_DESC);
        oprot.writeString(struct.liveview);
        oprot.writeFieldEnd();
      }
      if (struct.snapshotRecordingEnabled != null) {
        oprot.writeFieldBegin(SNAPSHOT_RECORDING_ENABLED_FIELD_DESC);
        oprot.writeString(struct.snapshotRecordingEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.snapshotRecordingInterval != null) {
        oprot.writeFieldBegin(SNAPSHOT_RECORDING_INTERVAL_FIELD_DESC);
        oprot.writeString(struct.snapshotRecordingInterval);
        oprot.writeFieldEnd();
      }
      if (struct.cloudRecordingEnabled != null) {
        oprot.writeFieldBegin(CLOUD_RECORDING_ENABLED_FIELD_DESC);
        oprot.writeString(struct.cloudRecordingEnabled);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeviceDetailsTupleSchemeFactory implements SchemeFactory {
    public DeviceDetailsTupleScheme getScheme() {
      return new DeviceDetailsTupleScheme();
    }
  }

  private static class DeviceDetailsTupleScheme extends TupleScheme<DeviceDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeviceDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetKey()) {
        optionals.set(2);
      }
      if (struct.isSetHost()) {
        optionals.set(3);
      }
      if (struct.isSetPort()) {
        optionals.set(4);
      }
      if (struct.isSetLogin()) {
        optionals.set(5);
      }
      if (struct.isSetPassword()) {
        optionals.set(6);
      }
      if (struct.isSetAddress()) {
        optionals.set(7);
      }
      if (struct.isSetLat()) {
        optionals.set(8);
      }
      if (struct.isSetLng()) {
        optionals.set(9);
      }
      if (struct.isSetAccountId()) {
        optionals.set(10);
      }
      if (struct.isSetModelId()) {
        optionals.set(11);
      }
      if (struct.isSetStatusId()) {
        optionals.set(12);
      }
      if (struct.isSetFunctionalityId()) {
        optionals.set(13);
      }
      if (struct.isSetAlertFlag()) {
        optionals.set(14);
      }
      if (struct.isSetAlive()) {
        optionals.set(15);
      }
      if (struct.isSetCurrentPositionId()) {
        optionals.set(16);
      }
      if (struct.isSetAction()) {
        optionals.set(17);
      }
      if (struct.isSetEventSettings()) {
        optionals.set(18);
      }
      if (struct.isSetDeviceServerUrls()) {
        optionals.set(19);
      }
      if (struct.isSetLiveview()) {
        optionals.set(20);
      }
      if (struct.isSetSnapshotRecordingEnabled()) {
        optionals.set(21);
      }
      if (struct.isSetSnapshotRecordingInterval()) {
        optionals.set(22);
      }
      if (struct.isSetCloudRecordingEnabled()) {
        optionals.set(23);
      }
      oprot.writeBitSet(optionals, 24);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetKey()) {
        oprot.writeString(struct.key);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetPort()) {
        oprot.writeString(struct.port);
      }
      if (struct.isSetLogin()) {
        oprot.writeString(struct.login);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetLat()) {
        oprot.writeString(struct.lat);
      }
      if (struct.isSetLng()) {
        oprot.writeString(struct.lng);
      }
      if (struct.isSetAccountId()) {
        oprot.writeString(struct.accountId);
      }
      if (struct.isSetModelId()) {
        oprot.writeString(struct.modelId);
      }
      if (struct.isSetStatusId()) {
        oprot.writeString(struct.statusId);
      }
      if (struct.isSetFunctionalityId()) {
        oprot.writeString(struct.functionalityId);
      }
      if (struct.isSetAlertFlag()) {
        oprot.writeString(struct.alertFlag);
      }
      if (struct.isSetAlive()) {
        oprot.writeString(struct.alive);
      }
      if (struct.isSetCurrentPositionId()) {
        oprot.writeString(struct.currentPositionId);
      }
      if (struct.isSetAction()) {
        oprot.writeString(struct.action);
      }
      if (struct.isSetEventSettings()) {
        oprot.writeString(struct.eventSettings);
      }
      if (struct.isSetDeviceServerUrls()) {
        oprot.writeString(struct.deviceServerUrls);
      }
      if (struct.isSetLiveview()) {
        oprot.writeString(struct.liveview);
      }
      if (struct.isSetSnapshotRecordingEnabled()) {
        oprot.writeString(struct.snapshotRecordingEnabled);
      }
      if (struct.isSetSnapshotRecordingInterval()) {
        oprot.writeString(struct.snapshotRecordingInterval);
      }
      if (struct.isSetCloudRecordingEnabled()) {
        oprot.writeString(struct.cloudRecordingEnabled);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeviceDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(24);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.key = iprot.readString();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(4)) {
        struct.port = iprot.readString();
        struct.setPortIsSet(true);
      }
      if (incoming.get(5)) {
        struct.login = iprot.readString();
        struct.setLoginIsSet(true);
      }
      if (incoming.get(6)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(7)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lat = iprot.readString();
        struct.setLatIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lng = iprot.readString();
        struct.setLngIsSet(true);
      }
      if (incoming.get(10)) {
        struct.accountId = iprot.readString();
        struct.setAccountIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.modelId = iprot.readString();
        struct.setModelIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.statusId = iprot.readString();
        struct.setStatusIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.functionalityId = iprot.readString();
        struct.setFunctionalityIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.alertFlag = iprot.readString();
        struct.setAlertFlagIsSet(true);
      }
      if (incoming.get(15)) {
        struct.alive = iprot.readString();
        struct.setAliveIsSet(true);
      }
      if (incoming.get(16)) {
        struct.currentPositionId = iprot.readString();
        struct.setCurrentPositionIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.action = iprot.readString();
        struct.setActionIsSet(true);
      }
      if (incoming.get(18)) {
        struct.eventSettings = iprot.readString();
        struct.setEventSettingsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.deviceServerUrls = iprot.readString();
        struct.setDeviceServerUrlsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.liveview = iprot.readString();
        struct.setLiveviewIsSet(true);
      }
      if (incoming.get(21)) {
        struct.snapshotRecordingEnabled = iprot.readString();
        struct.setSnapshotRecordingEnabledIsSet(true);
      }
      if (incoming.get(22)) {
        struct.snapshotRecordingInterval = iprot.readString();
        struct.setSnapshotRecordingIntervalIsSet(true);
      }
      if (incoming.get(23)) {
        struct.cloudRecordingEnabled = iprot.readString();
        struct.setCloudRecordingEnabledIsSet(true);
      }
    }
  }

}

