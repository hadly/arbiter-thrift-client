/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StreamControlService {

  /**
   * StreamControlService - this service provides interface for
   * management (control) of a streaming sessions. Platform uses
   * this interface to begin/end streaming.
   * NOTE 1: This is only for control, not for actual video data transfer.
   */
  public interface Iface {

    /**
     * Begin a new media session. This is a request from Platform to Core
     * Engine. On success, Core Engine should return the dynamically generated
     * URL of stream.
     * 
     * (1) sessionId - A handle for this session for future reference.
     * (2) ttl - UTC time stamp when this session becomes invalid, unless
     *           renewed by keepStreamSessionAlive() defined below.
     * (3) type - the type of stream requested by client. Valid values are:
     *             "http/mjpeg" for M-JPEG video over HTTP protocol
     *             "http/h264" for H.264 video over HTTP protocol
     *             "rtsp/h264" for H.264 video over RTSP protocol
     *             "rtmp/h264" for H.264 video over RTMP protocol
     *             "http/jpeg" for JPEG snapshots over HTTP protocol
     * (4) allowedClientIpAddresses - list of IP address from which the Core
     *      may accept connections for streaming of this URL.
     * (5) deviceId - Unique ID of the device whose stream is requested.
     * (6) channelId - The requested Channel number.
     * (7) startTimestamp - start date/time from where the stream should begin,
     *      or empty string "" if LIVE stream is requested (ddMMyyyyHHmmss format).
     * (8) endTimestamp - end date/time of the stream, or empty string ""
     *      if LIVE stream is requested (ddMMyyyyHHmmss format).
     * 
     * RETURN value is a list of the dynamically generated URLs. It is the playlist that contains
     * all required streams, to be played in that order. For example, if backend recording system
     * records 15 minutes of stream to a file, and the requested duration is of 1 hour, the playlist
     * should ideally contain 4 stream URLs, to be played in order. Each with 15 minutes of video.
     * This allows for efficient stream management, and also makes seeking easier.
     * 
     * @param sessionId
     * @param ttl
     * @param type
     * @param allowedClientIpAddresses
     * @param deviceId
     * @param channelId
     * @param startTimestamp
     * @param endTimestamp
     */
    public List<String> beginStreamSession(String sessionId, long ttl, String type, List<String> allowedClientIpAddresses, String deviceId, String channelId, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException;

    /**
     * Renew an existing session. UP will use this API to update session keys
     * which are about to expire and to inform RS about change of client IP
     * address.
     * (1) sessionId - A handle for this session for future reference.
     * (2) ttl - UTC time stamp when this session becomes invalid, unless
     *              renewed again
     * (3) allowedClientIpAddresses - Updated list of allowed client IP
     *              addresses. If any connections exist from IP addresses not
     *              in this list, they should be terminated.
     * 
     * @param sessionId
     * @param ttl
     * @param allowedClientIpAddresses
     */
    public boolean keepStreamSessionAlive(String sessionId, long ttl, List<String> allowedClientIpAddresses) throws CoreException, org.apache.thrift.TException;

    /**
     * Mark the end of a stream session.
     * 
     * Terminate all existing connections from clients for this session's URL,
     * and destroy session information.
     * (1) sessionId - Server ID.
     * 
     * @param sessionId
     */
    public boolean endStreamSession(String sessionId) throws CoreException, org.apache.thrift.TException;

    /**
     * Returns list of active outbound streams.
     */
    public List<com.kaisquare.core.thrift.StreamInfo> getActiveOutboundStreamList() throws CoreException, org.apache.thrift.TException;

    /**
     * Returns list of available recorded media.
     * 
     * (1) deviceId - Device ID.
     * (2) channelId - Channel ID.
     * (3) mediaType - Media type. Valid values are: "video" "image".
     * (4) startTimestamp - Start date/time from where the media should begin (ddMMyyyyHHmmss format).
     * (5) endTimestamp - End date/time from where the media should end (ddMMyyyyHHmmss format).
     * 
     * @param deviceId
     * @param channelId
     * @param mediaType
     * @param startTimestamp
     * @param endTimestamp
     */
    public List<RecordedMediaInfo> getRecordedMediaList(String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException;

    /**
     * Returns list of recording server storage status.
     */
    public List<com.kaisquare.core.thrift.StorageInfo> getStorageStatus() throws CoreException, org.apache.thrift.TException;

    /**
     * Request video/image from Core for play back.
     * On success, Core will let Recording Server upload video/image from Node to KUP if needed.
     * 
     * (1) sessionId - A handle for this session for future reference.
     *                 For each request, sessionId should be different.
     * (2) deviceId - Device ID.
     * (3) channelId - Normal Device's channel ID or Node Device's deviceId on this Node.
     * (4) mediaType - Media type. Valid values are: "video" "image".
     * (5) startTimestamp - Start date/time from where the stream should begin (ddMMyyyyHHmmss format).
     * (6) endTimestamp - End date/time from where the stream should end (ddMMyyyyHHmmss format).
     * 
     * Core should returns TRUE if no error or exception occurs.
     * 
     * @param sessionId
     * @param deviceId
     * @param channelId
     * @param mediaType
     * @param startTimestamp
     * @param endTimestamp
     */
    public boolean requestStreamForPlayback(String sessionId, String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException;

    /**
     * Cancel video/image uploading.
     * On success, Core will let Recording Server stop uploading the unfinished video/image.
     * 
     * (1) sessionId - A handle for this session for future reference.
     * (2) deviceId - Device ID.
     * (3) channelId - Device Channel.
     * (4) mediaType - The same as that in the method requestStreamForPlayback.
     * (5) fileTime - List of file time (StreamFileDetails.from) that will be canceled for uploading.
     * 
     * Core should returns TRUE if no error or exception occurs.
     * 
     * @param sessionId
     * @param deviceId
     * @param channelId
     * @param mediaType
     * @param fileTime
     */
    public boolean cancelStreamForPlayback(String sessionId, String deviceId, String channelId, String mediaType, List<String> fileTime) throws CoreException, org.apache.thrift.TException;

    /**
     * Get stream file's details. Such as file size, create time and uploading progress.
     * 
     * (1) sessionId - A handle for this session for future reference (not used currently).
     * (2) deviceId - Device ID.
     * (3) channelId - Normal Device's channel ID or Node Device's deviceId on this Node.
     * (4) mediaType - Media type. Valid values are: "video" "image".
     * (5) action - The action that platform want to operate. Valid values are : "play" "download".
     * (6) startTimestamp - Start date/time from where the stream should begin (ddMMyyyyHHmmss format).
     * (7) endTimestamp - End date/time from where the stream should end (ddMMyyyyHHmmss format).
     * 
     * Returns list of stream file details.
     * 
     * @param sessionId
     * @param deviceId
     * @param channelId
     * @param mediaType
     * @param action
     * @param startTimestamp
     * @param endTimestamp
     */
    public List<com.kaisquare.core.thrift.StreamFileDetails> getStreamFileDetails(String sessionId, String deviceId, String channelId, String mediaType, String action, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void beginStreamSession(String sessionId, long ttl, String type, List<String> allowedClientIpAddresses, String deviceId, String channelId, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.beginStreamSession_call> resultHandler) throws org.apache.thrift.TException;

    public void keepStreamSessionAlive(String sessionId, long ttl, List<String> allowedClientIpAddresses, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.keepStreamSessionAlive_call> resultHandler) throws org.apache.thrift.TException;

    public void endStreamSession(String sessionId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.endStreamSession_call> resultHandler) throws org.apache.thrift.TException;

    public void getActiveOutboundStreamList(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getActiveOutboundStreamList_call> resultHandler) throws org.apache.thrift.TException;

    public void getRecordedMediaList(String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRecordedMediaList_call> resultHandler) throws org.apache.thrift.TException;

    public void getStorageStatus(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStorageStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void requestStreamForPlayback(String sessionId, String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.requestStreamForPlayback_call> resultHandler) throws org.apache.thrift.TException;

    public void cancelStreamForPlayback(String sessionId, String deviceId, String channelId, String mediaType, List<String> fileTime, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.cancelStreamForPlayback_call> resultHandler) throws org.apache.thrift.TException;

    public void getStreamFileDetails(String sessionId, String deviceId, String channelId, String mediaType, String action, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStreamFileDetails_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<String> beginStreamSession(String sessionId, long ttl, String type, List<String> allowedClientIpAddresses, String deviceId, String channelId, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException
    {
      send_beginStreamSession(sessionId, ttl, type, allowedClientIpAddresses, deviceId, channelId, startTimestamp, endTimestamp);
      return recv_beginStreamSession();
    }

    public void send_beginStreamSession(String sessionId, long ttl, String type, List<String> allowedClientIpAddresses, String deviceId, String channelId, String startTimestamp, String endTimestamp) throws org.apache.thrift.TException
    {
      beginStreamSession_args args = new beginStreamSession_args();
      args.setSessionId(sessionId);
      args.setTtl(ttl);
      args.setType(type);
      args.setAllowedClientIpAddresses(allowedClientIpAddresses);
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setStartTimestamp(startTimestamp);
      args.setEndTimestamp(endTimestamp);
      sendBase("beginStreamSession", args);
    }

    public List<String> recv_beginStreamSession() throws CoreException, org.apache.thrift.TException
    {
      beginStreamSession_result result = new beginStreamSession_result();
      receiveBase(result, "beginStreamSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "beginStreamSession failed: unknown result");
    }

    public boolean keepStreamSessionAlive(String sessionId, long ttl, List<String> allowedClientIpAddresses) throws CoreException, org.apache.thrift.TException
    {
      send_keepStreamSessionAlive(sessionId, ttl, allowedClientIpAddresses);
      return recv_keepStreamSessionAlive();
    }

    public void send_keepStreamSessionAlive(String sessionId, long ttl, List<String> allowedClientIpAddresses) throws org.apache.thrift.TException
    {
      keepStreamSessionAlive_args args = new keepStreamSessionAlive_args();
      args.setSessionId(sessionId);
      args.setTtl(ttl);
      args.setAllowedClientIpAddresses(allowedClientIpAddresses);
      sendBase("keepStreamSessionAlive", args);
    }

    public boolean recv_keepStreamSessionAlive() throws CoreException, org.apache.thrift.TException
    {
      keepStreamSessionAlive_result result = new keepStreamSessionAlive_result();
      receiveBase(result, "keepStreamSessionAlive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "keepStreamSessionAlive failed: unknown result");
    }

    public boolean endStreamSession(String sessionId) throws CoreException, org.apache.thrift.TException
    {
      send_endStreamSession(sessionId);
      return recv_endStreamSession();
    }

    public void send_endStreamSession(String sessionId) throws org.apache.thrift.TException
    {
      endStreamSession_args args = new endStreamSession_args();
      args.setSessionId(sessionId);
      sendBase("endStreamSession", args);
    }

    public boolean recv_endStreamSession() throws CoreException, org.apache.thrift.TException
    {
      endStreamSession_result result = new endStreamSession_result();
      receiveBase(result, "endStreamSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "endStreamSession failed: unknown result");
    }

    public List<com.kaisquare.core.thrift.StreamInfo> getActiveOutboundStreamList() throws CoreException, org.apache.thrift.TException
    {
      send_getActiveOutboundStreamList();
      return recv_getActiveOutboundStreamList();
    }

    public void send_getActiveOutboundStreamList() throws org.apache.thrift.TException
    {
      getActiveOutboundStreamList_args args = new getActiveOutboundStreamList_args();
      sendBase("getActiveOutboundStreamList", args);
    }

    public List<com.kaisquare.core.thrift.StreamInfo> recv_getActiveOutboundStreamList() throws CoreException, org.apache.thrift.TException
    {
      getActiveOutboundStreamList_result result = new getActiveOutboundStreamList_result();
      receiveBase(result, "getActiveOutboundStreamList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getActiveOutboundStreamList failed: unknown result");
    }

    public List<RecordedMediaInfo> getRecordedMediaList(String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException
    {
      send_getRecordedMediaList(deviceId, channelId, mediaType, startTimestamp, endTimestamp);
      return recv_getRecordedMediaList();
    }

    public void send_getRecordedMediaList(String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp) throws org.apache.thrift.TException
    {
      getRecordedMediaList_args args = new getRecordedMediaList_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setMediaType(mediaType);
      args.setStartTimestamp(startTimestamp);
      args.setEndTimestamp(endTimestamp);
      sendBase("getRecordedMediaList", args);
    }

    public List<RecordedMediaInfo> recv_getRecordedMediaList() throws CoreException, org.apache.thrift.TException
    {
      getRecordedMediaList_result result = new getRecordedMediaList_result();
      receiveBase(result, "getRecordedMediaList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecordedMediaList failed: unknown result");
    }

    public List<com.kaisquare.core.thrift.StorageInfo> getStorageStatus() throws CoreException, org.apache.thrift.TException
    {
      send_getStorageStatus();
      return recv_getStorageStatus();
    }

    public void send_getStorageStatus() throws org.apache.thrift.TException
    {
      getStorageStatus_args args = new getStorageStatus_args();
      sendBase("getStorageStatus", args);
    }

    public List<com.kaisquare.core.thrift.StorageInfo> recv_getStorageStatus() throws CoreException, org.apache.thrift.TException
    {
      getStorageStatus_result result = new getStorageStatus_result();
      receiveBase(result, "getStorageStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStorageStatus failed: unknown result");
    }

    public boolean requestStreamForPlayback(String sessionId, String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException
    {
      send_requestStreamForPlayback(sessionId, deviceId, channelId, mediaType, startTimestamp, endTimestamp);
      return recv_requestStreamForPlayback();
    }

    public void send_requestStreamForPlayback(String sessionId, String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp) throws org.apache.thrift.TException
    {
      requestStreamForPlayback_args args = new requestStreamForPlayback_args();
      args.setSessionId(sessionId);
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setMediaType(mediaType);
      args.setStartTimestamp(startTimestamp);
      args.setEndTimestamp(endTimestamp);
      sendBase("requestStreamForPlayback", args);
    }

    public boolean recv_requestStreamForPlayback() throws CoreException, org.apache.thrift.TException
    {
      requestStreamForPlayback_result result = new requestStreamForPlayback_result();
      receiveBase(result, "requestStreamForPlayback");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestStreamForPlayback failed: unknown result");
    }

    public boolean cancelStreamForPlayback(String sessionId, String deviceId, String channelId, String mediaType, List<String> fileTime) throws CoreException, org.apache.thrift.TException
    {
      send_cancelStreamForPlayback(sessionId, deviceId, channelId, mediaType, fileTime);
      return recv_cancelStreamForPlayback();
    }

    public void send_cancelStreamForPlayback(String sessionId, String deviceId, String channelId, String mediaType, List<String> fileTime) throws org.apache.thrift.TException
    {
      cancelStreamForPlayback_args args = new cancelStreamForPlayback_args();
      args.setSessionId(sessionId);
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setMediaType(mediaType);
      args.setFileTime(fileTime);
      sendBase("cancelStreamForPlayback", args);
    }

    public boolean recv_cancelStreamForPlayback() throws CoreException, org.apache.thrift.TException
    {
      cancelStreamForPlayback_result result = new cancelStreamForPlayback_result();
      receiveBase(result, "cancelStreamForPlayback");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelStreamForPlayback failed: unknown result");
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> getStreamFileDetails(String sessionId, String deviceId, String channelId, String mediaType, String action, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException
    {
      send_getStreamFileDetails(sessionId, deviceId, channelId, mediaType, action, startTimestamp, endTimestamp);
      return recv_getStreamFileDetails();
    }

    public void send_getStreamFileDetails(String sessionId, String deviceId, String channelId, String mediaType, String action, String startTimestamp, String endTimestamp) throws org.apache.thrift.TException
    {
      getStreamFileDetails_args args = new getStreamFileDetails_args();
      args.setSessionId(sessionId);
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setMediaType(mediaType);
      args.setAction(action);
      args.setStartTimestamp(startTimestamp);
      args.setEndTimestamp(endTimestamp);
      sendBase("getStreamFileDetails", args);
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> recv_getStreamFileDetails() throws CoreException, org.apache.thrift.TException
    {
      getStreamFileDetails_result result = new getStreamFileDetails_result();
      receiveBase(result, "getStreamFileDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStreamFileDetails failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void beginStreamSession(String sessionId, long ttl, String type, List<String> allowedClientIpAddresses, String deviceId, String channelId, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<beginStreamSession_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      beginStreamSession_call method_call = new beginStreamSession_call(sessionId, ttl, type, allowedClientIpAddresses, deviceId, channelId, startTimestamp, endTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class beginStreamSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private long ttl;
      private String type;
      private List<String> allowedClientIpAddresses;
      private String deviceId;
      private String channelId;
      private String startTimestamp;
      private String endTimestamp;
      public beginStreamSession_call(String sessionId, long ttl, String type, List<String> allowedClientIpAddresses, String deviceId, String channelId, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<beginStreamSession_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.ttl = ttl;
        this.type = type;
        this.allowedClientIpAddresses = allowedClientIpAddresses;
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("beginStreamSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        beginStreamSession_args args = new beginStreamSession_args();
        args.setSessionId(sessionId);
        args.setTtl(ttl);
        args.setType(type);
        args.setAllowedClientIpAddresses(allowedClientIpAddresses);
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setStartTimestamp(startTimestamp);
        args.setEndTimestamp(endTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_beginStreamSession();
      }
    }

    public void keepStreamSessionAlive(String sessionId, long ttl, List<String> allowedClientIpAddresses, org.apache.thrift.async.AsyncMethodCallback<keepStreamSessionAlive_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      keepStreamSessionAlive_call method_call = new keepStreamSessionAlive_call(sessionId, ttl, allowedClientIpAddresses, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class keepStreamSessionAlive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private long ttl;
      private List<String> allowedClientIpAddresses;
      public keepStreamSessionAlive_call(String sessionId, long ttl, List<String> allowedClientIpAddresses, org.apache.thrift.async.AsyncMethodCallback<keepStreamSessionAlive_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.ttl = ttl;
        this.allowedClientIpAddresses = allowedClientIpAddresses;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("keepStreamSessionAlive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        keepStreamSessionAlive_args args = new keepStreamSessionAlive_args();
        args.setSessionId(sessionId);
        args.setTtl(ttl);
        args.setAllowedClientIpAddresses(allowedClientIpAddresses);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_keepStreamSessionAlive();
      }
    }

    public void endStreamSession(String sessionId, org.apache.thrift.async.AsyncMethodCallback<endStreamSession_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      endStreamSession_call method_call = new endStreamSession_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class endStreamSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      public endStreamSession_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback<endStreamSession_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("endStreamSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        endStreamSession_args args = new endStreamSession_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_endStreamSession();
      }
    }

    public void getActiveOutboundStreamList(org.apache.thrift.async.AsyncMethodCallback<getActiveOutboundStreamList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getActiveOutboundStreamList_call method_call = new getActiveOutboundStreamList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getActiveOutboundStreamList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getActiveOutboundStreamList_call(org.apache.thrift.async.AsyncMethodCallback<getActiveOutboundStreamList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getActiveOutboundStreamList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getActiveOutboundStreamList_args args = new getActiveOutboundStreamList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.kaisquare.core.thrift.StreamInfo> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getActiveOutboundStreamList();
      }
    }

    public void getRecordedMediaList(String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<getRecordedMediaList_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecordedMediaList_call method_call = new getRecordedMediaList_call(deviceId, channelId, mediaType, startTimestamp, endTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecordedMediaList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String channelId;
      private String mediaType;
      private String startTimestamp;
      private String endTimestamp;
      public getRecordedMediaList_call(String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<getRecordedMediaList_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.mediaType = mediaType;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecordedMediaList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecordedMediaList_args args = new getRecordedMediaList_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setMediaType(mediaType);
        args.setStartTimestamp(startTimestamp);
        args.setEndTimestamp(endTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RecordedMediaInfo> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecordedMediaList();
      }
    }

    public void getStorageStatus(org.apache.thrift.async.AsyncMethodCallback<getStorageStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStorageStatus_call method_call = new getStorageStatus_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStorageStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getStorageStatus_call(org.apache.thrift.async.AsyncMethodCallback<getStorageStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStorageStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStorageStatus_args args = new getStorageStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.kaisquare.core.thrift.StorageInfo> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStorageStatus();
      }
    }

    public void requestStreamForPlayback(String sessionId, String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<requestStreamForPlayback_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestStreamForPlayback_call method_call = new requestStreamForPlayback_call(sessionId, deviceId, channelId, mediaType, startTimestamp, endTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestStreamForPlayback_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String deviceId;
      private String channelId;
      private String mediaType;
      private String startTimestamp;
      private String endTimestamp;
      public requestStreamForPlayback_call(String sessionId, String deviceId, String channelId, String mediaType, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<requestStreamForPlayback_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.mediaType = mediaType;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestStreamForPlayback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestStreamForPlayback_args args = new requestStreamForPlayback_args();
        args.setSessionId(sessionId);
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setMediaType(mediaType);
        args.setStartTimestamp(startTimestamp);
        args.setEndTimestamp(endTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestStreamForPlayback();
      }
    }

    public void cancelStreamForPlayback(String sessionId, String deviceId, String channelId, String mediaType, List<String> fileTime, org.apache.thrift.async.AsyncMethodCallback<cancelStreamForPlayback_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelStreamForPlayback_call method_call = new cancelStreamForPlayback_call(sessionId, deviceId, channelId, mediaType, fileTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelStreamForPlayback_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String deviceId;
      private String channelId;
      private String mediaType;
      private List<String> fileTime;
      public cancelStreamForPlayback_call(String sessionId, String deviceId, String channelId, String mediaType, List<String> fileTime, org.apache.thrift.async.AsyncMethodCallback<cancelStreamForPlayback_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.mediaType = mediaType;
        this.fileTime = fileTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelStreamForPlayback", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelStreamForPlayback_args args = new cancelStreamForPlayback_args();
        args.setSessionId(sessionId);
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setMediaType(mediaType);
        args.setFileTime(fileTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelStreamForPlayback();
      }
    }

    public void getStreamFileDetails(String sessionId, String deviceId, String channelId, String mediaType, String action, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<getStreamFileDetails_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStreamFileDetails_call method_call = new getStreamFileDetails_call(sessionId, deviceId, channelId, mediaType, action, startTimestamp, endTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStreamFileDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String deviceId;
      private String channelId;
      private String mediaType;
      private String action;
      private String startTimestamp;
      private String endTimestamp;
      public getStreamFileDetails_call(String sessionId, String deviceId, String channelId, String mediaType, String action, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<getStreamFileDetails_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.mediaType = mediaType;
        this.action = action;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStreamFileDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStreamFileDetails_args args = new getStreamFileDetails_args();
        args.setSessionId(sessionId);
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setMediaType(mediaType);
        args.setAction(action);
        args.setStartTimestamp(startTimestamp);
        args.setEndTimestamp(endTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.kaisquare.core.thrift.StreamFileDetails> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStreamFileDetails();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("beginStreamSession", new beginStreamSession());
      processMap.put("keepStreamSessionAlive", new keepStreamSessionAlive());
      processMap.put("endStreamSession", new endStreamSession());
      processMap.put("getActiveOutboundStreamList", new getActiveOutboundStreamList());
      processMap.put("getRecordedMediaList", new getRecordedMediaList());
      processMap.put("getStorageStatus", new getStorageStatus());
      processMap.put("requestStreamForPlayback", new requestStreamForPlayback());
      processMap.put("cancelStreamForPlayback", new cancelStreamForPlayback());
      processMap.put("getStreamFileDetails", new getStreamFileDetails());
      return processMap;
    }

    private static class beginStreamSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginStreamSession_args> {
      public beginStreamSession() {
        super("beginStreamSession");
      }

      protected beginStreamSession_args getEmptyArgsInstance() {
        return new beginStreamSession_args();
      }

      protected beginStreamSession_result getResult(I iface, beginStreamSession_args args) throws org.apache.thrift.TException {
        beginStreamSession_result result = new beginStreamSession_result();
        try {
          result.success = iface.beginStreamSession(args.sessionId, args.ttl, args.type, args.allowedClientIpAddresses, args.deviceId, args.channelId, args.startTimestamp, args.endTimestamp);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class keepStreamSessionAlive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, keepStreamSessionAlive_args> {
      public keepStreamSessionAlive() {
        super("keepStreamSessionAlive");
      }

      protected keepStreamSessionAlive_args getEmptyArgsInstance() {
        return new keepStreamSessionAlive_args();
      }

      protected keepStreamSessionAlive_result getResult(I iface, keepStreamSessionAlive_args args) throws org.apache.thrift.TException {
        keepStreamSessionAlive_result result = new keepStreamSessionAlive_result();
        try {
          result.success = iface.keepStreamSessionAlive(args.sessionId, args.ttl, args.allowedClientIpAddresses);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class endStreamSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, endStreamSession_args> {
      public endStreamSession() {
        super("endStreamSession");
      }

      protected endStreamSession_args getEmptyArgsInstance() {
        return new endStreamSession_args();
      }

      protected endStreamSession_result getResult(I iface, endStreamSession_args args) throws org.apache.thrift.TException {
        endStreamSession_result result = new endStreamSession_result();
        try {
          result.success = iface.endStreamSession(args.sessionId);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class getActiveOutboundStreamList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getActiveOutboundStreamList_args> {
      public getActiveOutboundStreamList() {
        super("getActiveOutboundStreamList");
      }

      protected getActiveOutboundStreamList_args getEmptyArgsInstance() {
        return new getActiveOutboundStreamList_args();
      }

      protected getActiveOutboundStreamList_result getResult(I iface, getActiveOutboundStreamList_args args) throws org.apache.thrift.TException {
        getActiveOutboundStreamList_result result = new getActiveOutboundStreamList_result();
        try {
          result.success = iface.getActiveOutboundStreamList();
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class getRecordedMediaList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecordedMediaList_args> {
      public getRecordedMediaList() {
        super("getRecordedMediaList");
      }

      protected getRecordedMediaList_args getEmptyArgsInstance() {
        return new getRecordedMediaList_args();
      }

      protected getRecordedMediaList_result getResult(I iface, getRecordedMediaList_args args) throws org.apache.thrift.TException {
        getRecordedMediaList_result result = new getRecordedMediaList_result();
        try {
          result.success = iface.getRecordedMediaList(args.deviceId, args.channelId, args.mediaType, args.startTimestamp, args.endTimestamp);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class getStorageStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStorageStatus_args> {
      public getStorageStatus() {
        super("getStorageStatus");
      }

      protected getStorageStatus_args getEmptyArgsInstance() {
        return new getStorageStatus_args();
      }

      protected getStorageStatus_result getResult(I iface, getStorageStatus_args args) throws org.apache.thrift.TException {
        getStorageStatus_result result = new getStorageStatus_result();
        try {
          result.success = iface.getStorageStatus();
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class requestStreamForPlayback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestStreamForPlayback_args> {
      public requestStreamForPlayback() {
        super("requestStreamForPlayback");
      }

      protected requestStreamForPlayback_args getEmptyArgsInstance() {
        return new requestStreamForPlayback_args();
      }

      protected requestStreamForPlayback_result getResult(I iface, requestStreamForPlayback_args args) throws org.apache.thrift.TException {
        requestStreamForPlayback_result result = new requestStreamForPlayback_result();
        try {
          result.success = iface.requestStreamForPlayback(args.sessionId, args.deviceId, args.channelId, args.mediaType, args.startTimestamp, args.endTimestamp);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class cancelStreamForPlayback<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelStreamForPlayback_args> {
      public cancelStreamForPlayback() {
        super("cancelStreamForPlayback");
      }

      protected cancelStreamForPlayback_args getEmptyArgsInstance() {
        return new cancelStreamForPlayback_args();
      }

      protected cancelStreamForPlayback_result getResult(I iface, cancelStreamForPlayback_args args) throws org.apache.thrift.TException {
        cancelStreamForPlayback_result result = new cancelStreamForPlayback_result();
        try {
          result.success = iface.cancelStreamForPlayback(args.sessionId, args.deviceId, args.channelId, args.mediaType, args.fileTime);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class getStreamFileDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStreamFileDetails_args> {
      public getStreamFileDetails() {
        super("getStreamFileDetails");
      }

      protected getStreamFileDetails_args getEmptyArgsInstance() {
        return new getStreamFileDetails_args();
      }

      protected getStreamFileDetails_result getResult(I iface, getStreamFileDetails_args args) throws org.apache.thrift.TException {
        getStreamFileDetails_result result = new getStreamFileDetails_result();
        try {
          result.success = iface.getStreamFileDetails(args.sessionId, args.deviceId, args.channelId, args.mediaType, args.action, args.startTimestamp, args.endTimestamp);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

  }

  public static class beginStreamSession_args implements org.apache.thrift.TBase<beginStreamSession_args, beginStreamSession_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginStreamSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ALLOWED_CLIENT_IP_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("allowedClientIpAddresses", org.apache.thrift.protocol.TType.LIST, (short)4);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestamp", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginStreamSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginStreamSession_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public long ttl; // required
    public String type; // required
    public List<String> allowedClientIpAddresses; // required
    public String deviceId; // required
    public String channelId; // required
    public String startTimestamp; // required
    public String endTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      TTL((short)2, "ttl"),
      TYPE((short)3, "type"),
      ALLOWED_CLIENT_IP_ADDRESSES((short)4, "allowedClientIpAddresses"),
      DEVICE_ID((short)5, "deviceId"),
      CHANNEL_ID((short)6, "channelId"),
      START_TIMESTAMP((short)7, "startTimestamp"),
      END_TIMESTAMP((short)8, "endTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // TTL
            return TTL;
          case 3: // TYPE
            return TYPE;
          case 4: // ALLOWED_CLIENT_IP_ADDRESSES
            return ALLOWED_CLIENT_IP_ADDRESSES;
          case 5: // DEVICE_ID
            return DEVICE_ID;
          case 6: // CHANNEL_ID
            return CHANNEL_ID;
          case 7: // START_TIMESTAMP
            return START_TIMESTAMP;
          case 8: // END_TIMESTAMP
            return END_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TTL_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ALLOWED_CLIENT_IP_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("allowedClientIpAddresses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("endTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginStreamSession_args.class, metaDataMap);
    }

    public beginStreamSession_args() {
    }

    public beginStreamSession_args(
      String sessionId,
      long ttl,
      String type,
      List<String> allowedClientIpAddresses,
      String deviceId,
      String channelId,
      String startTimestamp,
      String endTimestamp)
    {
      this();
      this.sessionId = sessionId;
      this.ttl = ttl;
      setTtlIsSet(true);
      this.type = type;
      this.allowedClientIpAddresses = allowedClientIpAddresses;
      this.deviceId = deviceId;
      this.channelId = channelId;
      this.startTimestamp = startTimestamp;
      this.endTimestamp = endTimestamp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginStreamSession_args(beginStreamSession_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      this.ttl = other.ttl;
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetAllowedClientIpAddresses()) {
        List<String> __this__allowedClientIpAddresses = new ArrayList<String>();
        for (String other_element : other.allowedClientIpAddresses) {
          __this__allowedClientIpAddresses.add(other_element);
        }
        this.allowedClientIpAddresses = __this__allowedClientIpAddresses;
      }
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetStartTimestamp()) {
        this.startTimestamp = other.startTimestamp;
      }
      if (other.isSetEndTimestamp()) {
        this.endTimestamp = other.endTimestamp;
      }
    }

    public beginStreamSession_args deepCopy() {
      return new beginStreamSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      setTtlIsSet(false);
      this.ttl = 0;
      this.type = null;
      this.allowedClientIpAddresses = null;
      this.deviceId = null;
      this.channelId = null;
      this.startTimestamp = null;
      this.endTimestamp = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public beginStreamSession_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public long getTtl() {
      return this.ttl;
    }

    public beginStreamSession_args setTtl(long ttl) {
      this.ttl = ttl;
      setTtlIsSet(true);
      return this;
    }

    public void unsetTtl() {
      __isset_bit_vector.clear(__TTL_ISSET_ID);
    }

    /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
    public boolean isSetTtl() {
      return __isset_bit_vector.get(__TTL_ISSET_ID);
    }

    public void setTtlIsSet(boolean value) {
      __isset_bit_vector.set(__TTL_ISSET_ID, value);
    }

    public String getType() {
      return this.type;
    }

    public beginStreamSession_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public int getAllowedClientIpAddressesSize() {
      return (this.allowedClientIpAddresses == null) ? 0 : this.allowedClientIpAddresses.size();
    }

    public java.util.Iterator<String> getAllowedClientIpAddressesIterator() {
      return (this.allowedClientIpAddresses == null) ? null : this.allowedClientIpAddresses.iterator();
    }

    public void addToAllowedClientIpAddresses(String elem) {
      if (this.allowedClientIpAddresses == null) {
        this.allowedClientIpAddresses = new ArrayList<String>();
      }
      this.allowedClientIpAddresses.add(elem);
    }

    public List<String> getAllowedClientIpAddresses() {
      return this.allowedClientIpAddresses;
    }

    public beginStreamSession_args setAllowedClientIpAddresses(List<String> allowedClientIpAddresses) {
      this.allowedClientIpAddresses = allowedClientIpAddresses;
      return this;
    }

    public void unsetAllowedClientIpAddresses() {
      this.allowedClientIpAddresses = null;
    }

    /** Returns true if field allowedClientIpAddresses is set (has been assigned a value) and false otherwise */
    public boolean isSetAllowedClientIpAddresses() {
      return this.allowedClientIpAddresses != null;
    }

    public void setAllowedClientIpAddressesIsSet(boolean value) {
      if (!value) {
        this.allowedClientIpAddresses = null;
      }
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public beginStreamSession_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public beginStreamSession_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getStartTimestamp() {
      return this.startTimestamp;
    }

    public beginStreamSession_args setStartTimestamp(String startTimestamp) {
      this.startTimestamp = startTimestamp;
      return this;
    }

    public void unsetStartTimestamp() {
      this.startTimestamp = null;
    }

    /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTimestamp() {
      return this.startTimestamp != null;
    }

    public void setStartTimestampIsSet(boolean value) {
      if (!value) {
        this.startTimestamp = null;
      }
    }

    public String getEndTimestamp() {
      return this.endTimestamp;
    }

    public beginStreamSession_args setEndTimestamp(String endTimestamp) {
      this.endTimestamp = endTimestamp;
      return this;
    }

    public void unsetEndTimestamp() {
      this.endTimestamp = null;
    }

    /** Returns true if field endTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTimestamp() {
      return this.endTimestamp != null;
    }

    public void setEndTimestampIsSet(boolean value) {
      if (!value) {
        this.endTimestamp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case TTL:
        if (value == null) {
          unsetTtl();
        } else {
          setTtl((Long)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      case ALLOWED_CLIENT_IP_ADDRESSES:
        if (value == null) {
          unsetAllowedClientIpAddresses();
        } else {
          setAllowedClientIpAddresses((List<String>)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case START_TIMESTAMP:
        if (value == null) {
          unsetStartTimestamp();
        } else {
          setStartTimestamp((String)value);
        }
        break;

      case END_TIMESTAMP:
        if (value == null) {
          unsetEndTimestamp();
        } else {
          setEndTimestamp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case TTL:
        return Long.valueOf(getTtl());

      case TYPE:
        return getType();

      case ALLOWED_CLIENT_IP_ADDRESSES:
        return getAllowedClientIpAddresses();

      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      case START_TIMESTAMP:
        return getStartTimestamp();

      case END_TIMESTAMP:
        return getEndTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case TTL:
        return isSetTtl();
      case TYPE:
        return isSetType();
      case ALLOWED_CLIENT_IP_ADDRESSES:
        return isSetAllowedClientIpAddresses();
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case START_TIMESTAMP:
        return isSetStartTimestamp();
      case END_TIMESTAMP:
        return isSetEndTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginStreamSession_args)
        return this.equals((beginStreamSession_args)that);
      return false;
    }

    public boolean equals(beginStreamSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_ttl = true;
      boolean that_present_ttl = true;
      if (this_present_ttl || that_present_ttl) {
        if (!(this_present_ttl && that_present_ttl))
          return false;
        if (this.ttl != that.ttl)
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_allowedClientIpAddresses = true && this.isSetAllowedClientIpAddresses();
      boolean that_present_allowedClientIpAddresses = true && that.isSetAllowedClientIpAddresses();
      if (this_present_allowedClientIpAddresses || that_present_allowedClientIpAddresses) {
        if (!(this_present_allowedClientIpAddresses && that_present_allowedClientIpAddresses))
          return false;
        if (!this.allowedClientIpAddresses.equals(that.allowedClientIpAddresses))
          return false;
      }

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
      boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
      if (this_present_startTimestamp || that_present_startTimestamp) {
        if (!(this_present_startTimestamp && that_present_startTimestamp))
          return false;
        if (!this.startTimestamp.equals(that.startTimestamp))
          return false;
      }

      boolean this_present_endTimestamp = true && this.isSetEndTimestamp();
      boolean that_present_endTimestamp = true && that.isSetEndTimestamp();
      if (this_present_endTimestamp || that_present_endTimestamp) {
        if (!(this_present_endTimestamp && that_present_endTimestamp))
          return false;
        if (!this.endTimestamp.equals(that.endTimestamp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(beginStreamSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      beginStreamSession_args typedOther = (beginStreamSession_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTtl()).compareTo(typedOther.isSetTtl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTtl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, typedOther.ttl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAllowedClientIpAddresses()).compareTo(typedOther.isSetAllowedClientIpAddresses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllowedClientIpAddresses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowedClientIpAddresses, typedOther.allowedClientIpAddresses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTimestamp()).compareTo(typedOther.isSetEndTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestamp, typedOther.endTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginStreamSession_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("allowedClientIpAddresses:");
      if (this.allowedClientIpAddresses == null) {
        sb.append("null");
      } else {
        sb.append(this.allowedClientIpAddresses);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      if (this.startTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.startTimestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTimestamp:");
      if (this.endTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.endTimestamp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginStreamSession_argsStandardSchemeFactory implements SchemeFactory {
      public beginStreamSession_argsStandardScheme getScheme() {
        return new beginStreamSession_argsStandardScheme();
      }
    }

    private static class beginStreamSession_argsStandardScheme extends StandardScheme<beginStreamSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginStreamSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TTL
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ttl = iprot.readI64();
                struct.setTtlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ALLOWED_CLIENT_IP_ADDRESSES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.allowedClientIpAddresses = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.allowedClientIpAddresses.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setAllowedClientIpAddressesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // START_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTimestamp = iprot.readString();
                struct.setStartTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // END_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTimestamp = iprot.readString();
                struct.setEndTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginStreamSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeI64(struct.ttl);
        oprot.writeFieldEnd();
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        if (struct.allowedClientIpAddresses != null) {
          oprot.writeFieldBegin(ALLOWED_CLIENT_IP_ADDRESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.allowedClientIpAddresses.size()));
            for (String _iter3 : struct.allowedClientIpAddresses)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.startTimestamp != null) {
          oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.startTimestamp);
          oprot.writeFieldEnd();
        }
        if (struct.endTimestamp != null) {
          oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.endTimestamp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginStreamSession_argsTupleSchemeFactory implements SchemeFactory {
      public beginStreamSession_argsTupleScheme getScheme() {
        return new beginStreamSession_argsTupleScheme();
      }
    }

    private static class beginStreamSession_argsTupleScheme extends TupleScheme<beginStreamSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetTtl()) {
          optionals.set(1);
        }
        if (struct.isSetType()) {
          optionals.set(2);
        }
        if (struct.isSetAllowedClientIpAddresses()) {
          optionals.set(3);
        }
        if (struct.isSetDeviceId()) {
          optionals.set(4);
        }
        if (struct.isSetChannelId()) {
          optionals.set(5);
        }
        if (struct.isSetStartTimestamp()) {
          optionals.set(6);
        }
        if (struct.isSetEndTimestamp()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetTtl()) {
          oprot.writeI64(struct.ttl);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
        if (struct.isSetAllowedClientIpAddresses()) {
          {
            oprot.writeI32(struct.allowedClientIpAddresses.size());
            for (String _iter4 : struct.allowedClientIpAddresses)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetStartTimestamp()) {
          oprot.writeString(struct.startTimestamp);
        }
        if (struct.isSetEndTimestamp()) {
          oprot.writeString(struct.endTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ttl = iprot.readI64();
          struct.setTtlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.allowedClientIpAddresses = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.allowedClientIpAddresses.add(_elem7);
            }
          }
          struct.setAllowedClientIpAddressesIsSet(true);
        }
        if (incoming.get(4)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(6)) {
          struct.startTimestamp = iprot.readString();
          struct.setStartTimestampIsSet(true);
        }
        if (incoming.get(7)) {
          struct.endTimestamp = iprot.readString();
          struct.setEndTimestampIsSet(true);
        }
      }
    }

  }

  public static class beginStreamSession_result implements org.apache.thrift.TBase<beginStreamSession_result, beginStreamSession_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginStreamSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginStreamSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginStreamSession_resultTupleSchemeFactory());
    }

    public List<String> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginStreamSession_result.class, metaDataMap);
    }

    public beginStreamSession_result() {
    }

    public beginStreamSession_result(
      List<String> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginStreamSession_result(beginStreamSession_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public beginStreamSession_result deepCopy() {
      return new beginStreamSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public beginStreamSession_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public beginStreamSession_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginStreamSession_result)
        return this.equals((beginStreamSession_result)that);
      return false;
    }

    public boolean equals(beginStreamSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(beginStreamSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      beginStreamSession_result typedOther = (beginStreamSession_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginStreamSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginStreamSession_resultStandardSchemeFactory implements SchemeFactory {
      public beginStreamSession_resultStandardScheme getScheme() {
        return new beginStreamSession_resultStandardScheme();
      }
    }

    private static class beginStreamSession_resultStandardScheme extends StandardScheme<beginStreamSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginStreamSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    String _elem10; // required
                    _elem10 = iprot.readString();
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginStreamSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginStreamSession_resultTupleSchemeFactory implements SchemeFactory {
      public beginStreamSession_resultTupleScheme getScheme() {
        return new beginStreamSession_resultTupleScheme();
      }
    }

    private static class beginStreamSession_resultTupleScheme extends TupleScheme<beginStreamSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              String _elem15; // required
              _elem15 = iprot.readString();
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class keepStreamSessionAlive_args implements org.apache.thrift.TBase<keepStreamSessionAlive_args, keepStreamSessionAlive_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("keepStreamSessionAlive_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TTL_FIELD_DESC = new org.apache.thrift.protocol.TField("ttl", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ALLOWED_CLIENT_IP_ADDRESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("allowedClientIpAddresses", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new keepStreamSessionAlive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new keepStreamSessionAlive_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public long ttl; // required
    public List<String> allowedClientIpAddresses; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      TTL((short)2, "ttl"),
      ALLOWED_CLIENT_IP_ADDRESSES((short)3, "allowedClientIpAddresses");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // TTL
            return TTL;
          case 3: // ALLOWED_CLIENT_IP_ADDRESSES
            return ALLOWED_CLIENT_IP_ADDRESSES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TTL_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TTL, new org.apache.thrift.meta_data.FieldMetaData("ttl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ALLOWED_CLIENT_IP_ADDRESSES, new org.apache.thrift.meta_data.FieldMetaData("allowedClientIpAddresses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(keepStreamSessionAlive_args.class, metaDataMap);
    }

    public keepStreamSessionAlive_args() {
    }

    public keepStreamSessionAlive_args(
      String sessionId,
      long ttl,
      List<String> allowedClientIpAddresses)
    {
      this();
      this.sessionId = sessionId;
      this.ttl = ttl;
      setTtlIsSet(true);
      this.allowedClientIpAddresses = allowedClientIpAddresses;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public keepStreamSessionAlive_args(keepStreamSessionAlive_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      this.ttl = other.ttl;
      if (other.isSetAllowedClientIpAddresses()) {
        List<String> __this__allowedClientIpAddresses = new ArrayList<String>();
        for (String other_element : other.allowedClientIpAddresses) {
          __this__allowedClientIpAddresses.add(other_element);
        }
        this.allowedClientIpAddresses = __this__allowedClientIpAddresses;
      }
    }

    public keepStreamSessionAlive_args deepCopy() {
      return new keepStreamSessionAlive_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      setTtlIsSet(false);
      this.ttl = 0;
      this.allowedClientIpAddresses = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public keepStreamSessionAlive_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public long getTtl() {
      return this.ttl;
    }

    public keepStreamSessionAlive_args setTtl(long ttl) {
      this.ttl = ttl;
      setTtlIsSet(true);
      return this;
    }

    public void unsetTtl() {
      __isset_bit_vector.clear(__TTL_ISSET_ID);
    }

    /** Returns true if field ttl is set (has been assigned a value) and false otherwise */
    public boolean isSetTtl() {
      return __isset_bit_vector.get(__TTL_ISSET_ID);
    }

    public void setTtlIsSet(boolean value) {
      __isset_bit_vector.set(__TTL_ISSET_ID, value);
    }

    public int getAllowedClientIpAddressesSize() {
      return (this.allowedClientIpAddresses == null) ? 0 : this.allowedClientIpAddresses.size();
    }

    public java.util.Iterator<String> getAllowedClientIpAddressesIterator() {
      return (this.allowedClientIpAddresses == null) ? null : this.allowedClientIpAddresses.iterator();
    }

    public void addToAllowedClientIpAddresses(String elem) {
      if (this.allowedClientIpAddresses == null) {
        this.allowedClientIpAddresses = new ArrayList<String>();
      }
      this.allowedClientIpAddresses.add(elem);
    }

    public List<String> getAllowedClientIpAddresses() {
      return this.allowedClientIpAddresses;
    }

    public keepStreamSessionAlive_args setAllowedClientIpAddresses(List<String> allowedClientIpAddresses) {
      this.allowedClientIpAddresses = allowedClientIpAddresses;
      return this;
    }

    public void unsetAllowedClientIpAddresses() {
      this.allowedClientIpAddresses = null;
    }

    /** Returns true if field allowedClientIpAddresses is set (has been assigned a value) and false otherwise */
    public boolean isSetAllowedClientIpAddresses() {
      return this.allowedClientIpAddresses != null;
    }

    public void setAllowedClientIpAddressesIsSet(boolean value) {
      if (!value) {
        this.allowedClientIpAddresses = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case TTL:
        if (value == null) {
          unsetTtl();
        } else {
          setTtl((Long)value);
        }
        break;

      case ALLOWED_CLIENT_IP_ADDRESSES:
        if (value == null) {
          unsetAllowedClientIpAddresses();
        } else {
          setAllowedClientIpAddresses((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case TTL:
        return Long.valueOf(getTtl());

      case ALLOWED_CLIENT_IP_ADDRESSES:
        return getAllowedClientIpAddresses();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case TTL:
        return isSetTtl();
      case ALLOWED_CLIENT_IP_ADDRESSES:
        return isSetAllowedClientIpAddresses();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof keepStreamSessionAlive_args)
        return this.equals((keepStreamSessionAlive_args)that);
      return false;
    }

    public boolean equals(keepStreamSessionAlive_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_ttl = true;
      boolean that_present_ttl = true;
      if (this_present_ttl || that_present_ttl) {
        if (!(this_present_ttl && that_present_ttl))
          return false;
        if (this.ttl != that.ttl)
          return false;
      }

      boolean this_present_allowedClientIpAddresses = true && this.isSetAllowedClientIpAddresses();
      boolean that_present_allowedClientIpAddresses = true && that.isSetAllowedClientIpAddresses();
      if (this_present_allowedClientIpAddresses || that_present_allowedClientIpAddresses) {
        if (!(this_present_allowedClientIpAddresses && that_present_allowedClientIpAddresses))
          return false;
        if (!this.allowedClientIpAddresses.equals(that.allowedClientIpAddresses))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(keepStreamSessionAlive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      keepStreamSessionAlive_args typedOther = (keepStreamSessionAlive_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTtl()).compareTo(typedOther.isSetTtl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTtl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttl, typedOther.ttl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAllowedClientIpAddresses()).compareTo(typedOther.isSetAllowedClientIpAddresses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAllowedClientIpAddresses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowedClientIpAddresses, typedOther.allowedClientIpAddresses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("keepStreamSessionAlive_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ttl:");
      sb.append(this.ttl);
      first = false;
      if (!first) sb.append(", ");
      sb.append("allowedClientIpAddresses:");
      if (this.allowedClientIpAddresses == null) {
        sb.append("null");
      } else {
        sb.append(this.allowedClientIpAddresses);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class keepStreamSessionAlive_argsStandardSchemeFactory implements SchemeFactory {
      public keepStreamSessionAlive_argsStandardScheme getScheme() {
        return new keepStreamSessionAlive_argsStandardScheme();
      }
    }

    private static class keepStreamSessionAlive_argsStandardScheme extends StandardScheme<keepStreamSessionAlive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, keepStreamSessionAlive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TTL
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ttl = iprot.readI64();
                struct.setTtlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ALLOWED_CLIENT_IP_ADDRESSES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.allowedClientIpAddresses = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.allowedClientIpAddresses.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setAllowedClientIpAddressesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, keepStreamSessionAlive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TTL_FIELD_DESC);
        oprot.writeI64(struct.ttl);
        oprot.writeFieldEnd();
        if (struct.allowedClientIpAddresses != null) {
          oprot.writeFieldBegin(ALLOWED_CLIENT_IP_ADDRESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.allowedClientIpAddresses.size()));
            for (String _iter19 : struct.allowedClientIpAddresses)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class keepStreamSessionAlive_argsTupleSchemeFactory implements SchemeFactory {
      public keepStreamSessionAlive_argsTupleScheme getScheme() {
        return new keepStreamSessionAlive_argsTupleScheme();
      }
    }

    private static class keepStreamSessionAlive_argsTupleScheme extends TupleScheme<keepStreamSessionAlive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, keepStreamSessionAlive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetTtl()) {
          optionals.set(1);
        }
        if (struct.isSetAllowedClientIpAddresses()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetTtl()) {
          oprot.writeI64(struct.ttl);
        }
        if (struct.isSetAllowedClientIpAddresses()) {
          {
            oprot.writeI32(struct.allowedClientIpAddresses.size());
            for (String _iter20 : struct.allowedClientIpAddresses)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, keepStreamSessionAlive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ttl = iprot.readI64();
          struct.setTtlIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.allowedClientIpAddresses = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.allowedClientIpAddresses.add(_elem23);
            }
          }
          struct.setAllowedClientIpAddressesIsSet(true);
        }
      }
    }

  }

  public static class keepStreamSessionAlive_result implements org.apache.thrift.TBase<keepStreamSessionAlive_result, keepStreamSessionAlive_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("keepStreamSessionAlive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new keepStreamSessionAlive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new keepStreamSessionAlive_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(keepStreamSessionAlive_result.class, metaDataMap);
    }

    public keepStreamSessionAlive_result() {
    }

    public keepStreamSessionAlive_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public keepStreamSessionAlive_result(keepStreamSessionAlive_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public keepStreamSessionAlive_result deepCopy() {
      return new keepStreamSessionAlive_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public keepStreamSessionAlive_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public keepStreamSessionAlive_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof keepStreamSessionAlive_result)
        return this.equals((keepStreamSessionAlive_result)that);
      return false;
    }

    public boolean equals(keepStreamSessionAlive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(keepStreamSessionAlive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      keepStreamSessionAlive_result typedOther = (keepStreamSessionAlive_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("keepStreamSessionAlive_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class keepStreamSessionAlive_resultStandardSchemeFactory implements SchemeFactory {
      public keepStreamSessionAlive_resultStandardScheme getScheme() {
        return new keepStreamSessionAlive_resultStandardScheme();
      }
    }

    private static class keepStreamSessionAlive_resultStandardScheme extends StandardScheme<keepStreamSessionAlive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, keepStreamSessionAlive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, keepStreamSessionAlive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class keepStreamSessionAlive_resultTupleSchemeFactory implements SchemeFactory {
      public keepStreamSessionAlive_resultTupleScheme getScheme() {
        return new keepStreamSessionAlive_resultTupleScheme();
      }
    }

    private static class keepStreamSessionAlive_resultTupleScheme extends TupleScheme<keepStreamSessionAlive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, keepStreamSessionAlive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, keepStreamSessionAlive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class endStreamSession_args implements org.apache.thrift.TBase<endStreamSession_args, endStreamSession_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endStreamSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new endStreamSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new endStreamSession_argsTupleSchemeFactory());
    }

    public String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endStreamSession_args.class, metaDataMap);
    }

    public endStreamSession_args() {
    }

    public endStreamSession_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public endStreamSession_args(endStreamSession_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public endStreamSession_args deepCopy() {
      return new endStreamSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public endStreamSession_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof endStreamSession_args)
        return this.equals((endStreamSession_args)that);
      return false;
    }

    public boolean equals(endStreamSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(endStreamSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      endStreamSession_args typedOther = (endStreamSession_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("endStreamSession_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class endStreamSession_argsStandardSchemeFactory implements SchemeFactory {
      public endStreamSession_argsStandardScheme getScheme() {
        return new endStreamSession_argsStandardScheme();
      }
    }

    private static class endStreamSession_argsStandardScheme extends StandardScheme<endStreamSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, endStreamSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, endStreamSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class endStreamSession_argsTupleSchemeFactory implements SchemeFactory {
      public endStreamSession_argsTupleScheme getScheme() {
        return new endStreamSession_argsTupleScheme();
      }
    }

    private static class endStreamSession_argsTupleScheme extends TupleScheme<endStreamSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, endStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, endStreamSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class endStreamSession_result implements org.apache.thrift.TBase<endStreamSession_result, endStreamSession_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endStreamSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new endStreamSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new endStreamSession_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endStreamSession_result.class, metaDataMap);
    }

    public endStreamSession_result() {
    }

    public endStreamSession_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public endStreamSession_result(endStreamSession_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public endStreamSession_result deepCopy() {
      return new endStreamSession_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public endStreamSession_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public endStreamSession_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof endStreamSession_result)
        return this.equals((endStreamSession_result)that);
      return false;
    }

    public boolean equals(endStreamSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(endStreamSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      endStreamSession_result typedOther = (endStreamSession_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("endStreamSession_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class endStreamSession_resultStandardSchemeFactory implements SchemeFactory {
      public endStreamSession_resultStandardScheme getScheme() {
        return new endStreamSession_resultStandardScheme();
      }
    }

    private static class endStreamSession_resultStandardScheme extends StandardScheme<endStreamSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, endStreamSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, endStreamSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class endStreamSession_resultTupleSchemeFactory implements SchemeFactory {
      public endStreamSession_resultTupleScheme getScheme() {
        return new endStreamSession_resultTupleScheme();
      }
    }

    private static class endStreamSession_resultTupleScheme extends TupleScheme<endStreamSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, endStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, endStreamSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class getActiveOutboundStreamList_args implements org.apache.thrift.TBase<getActiveOutboundStreamList_args, getActiveOutboundStreamList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveOutboundStreamList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveOutboundStreamList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveOutboundStreamList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveOutboundStreamList_args.class, metaDataMap);
    }

    public getActiveOutboundStreamList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveOutboundStreamList_args(getActiveOutboundStreamList_args other) {
    }

    public getActiveOutboundStreamList_args deepCopy() {
      return new getActiveOutboundStreamList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveOutboundStreamList_args)
        return this.equals((getActiveOutboundStreamList_args)that);
      return false;
    }

    public boolean equals(getActiveOutboundStreamList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getActiveOutboundStreamList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getActiveOutboundStreamList_args typedOther = (getActiveOutboundStreamList_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveOutboundStreamList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveOutboundStreamList_argsStandardSchemeFactory implements SchemeFactory {
      public getActiveOutboundStreamList_argsStandardScheme getScheme() {
        return new getActiveOutboundStreamList_argsStandardScheme();
      }
    }

    private static class getActiveOutboundStreamList_argsStandardScheme extends StandardScheme<getActiveOutboundStreamList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveOutboundStreamList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveOutboundStreamList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveOutboundStreamList_argsTupleSchemeFactory implements SchemeFactory {
      public getActiveOutboundStreamList_argsTupleScheme getScheme() {
        return new getActiveOutboundStreamList_argsTupleScheme();
      }
    }

    private static class getActiveOutboundStreamList_argsTupleScheme extends TupleScheme<getActiveOutboundStreamList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveOutboundStreamList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveOutboundStreamList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getActiveOutboundStreamList_result implements org.apache.thrift.TBase<getActiveOutboundStreamList_result, getActiveOutboundStreamList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getActiveOutboundStreamList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getActiveOutboundStreamList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getActiveOutboundStreamList_resultTupleSchemeFactory());
    }

    public List<com.kaisquare.core.thrift.StreamInfo> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.core.thrift.StreamInfo.class))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getActiveOutboundStreamList_result.class, metaDataMap);
    }

    public getActiveOutboundStreamList_result() {
    }

    public getActiveOutboundStreamList_result(
      List<com.kaisquare.core.thrift.StreamInfo> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveOutboundStreamList_result(getActiveOutboundStreamList_result other) {
      if (other.isSetSuccess()) {
        List<com.kaisquare.core.thrift.StreamInfo> __this__success = new ArrayList<com.kaisquare.core.thrift.StreamInfo>();
        for (com.kaisquare.core.thrift.StreamInfo other_element : other.success) {
          __this__success.add(new com.kaisquare.core.thrift.StreamInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public getActiveOutboundStreamList_result deepCopy() {
      return new getActiveOutboundStreamList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.kaisquare.core.thrift.StreamInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.kaisquare.core.thrift.StreamInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.kaisquare.core.thrift.StreamInfo>();
      }
      this.success.add(elem);
    }

    public List<com.kaisquare.core.thrift.StreamInfo> getSuccess() {
      return this.success;
    }

    public getActiveOutboundStreamList_result setSuccess(List<com.kaisquare.core.thrift.StreamInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public getActiveOutboundStreamList_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.kaisquare.core.thrift.StreamInfo>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveOutboundStreamList_result)
        return this.equals((getActiveOutboundStreamList_result)that);
      return false;
    }

    public boolean equals(getActiveOutboundStreamList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getActiveOutboundStreamList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getActiveOutboundStreamList_result typedOther = (getActiveOutboundStreamList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getActiveOutboundStreamList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getActiveOutboundStreamList_resultStandardSchemeFactory implements SchemeFactory {
      public getActiveOutboundStreamList_resultStandardScheme getScheme() {
        return new getActiveOutboundStreamList_resultStandardScheme();
      }
    }

    private static class getActiveOutboundStreamList_resultStandardScheme extends StandardScheme<getActiveOutboundStreamList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getActiveOutboundStreamList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.kaisquare.core.thrift.StreamInfo>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    com.kaisquare.core.thrift.StreamInfo _elem26; // required
                    _elem26 = new com.kaisquare.core.thrift.StreamInfo();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getActiveOutboundStreamList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.kaisquare.core.thrift.StreamInfo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getActiveOutboundStreamList_resultTupleSchemeFactory implements SchemeFactory {
      public getActiveOutboundStreamList_resultTupleScheme getScheme() {
        return new getActiveOutboundStreamList_resultTupleScheme();
      }
    }

    private static class getActiveOutboundStreamList_resultTupleScheme extends TupleScheme<getActiveOutboundStreamList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getActiveOutboundStreamList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.kaisquare.core.thrift.StreamInfo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getActiveOutboundStreamList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.kaisquare.core.thrift.StreamInfo>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              com.kaisquare.core.thrift.StreamInfo _elem31; // required
              _elem31 = new com.kaisquare.core.thrift.StreamInfo();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class getRecordedMediaList_args implements org.apache.thrift.TBase<getRecordedMediaList_args, getRecordedMediaList_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordedMediaList_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestamp", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordedMediaList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordedMediaList_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String channelId; // required
    public String mediaType; // required
    public String startTimestamp; // required
    public String endTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId"),
      MEDIA_TYPE((short)3, "mediaType"),
      START_TIMESTAMP((short)4, "startTimestamp"),
      END_TIMESTAMP((short)5, "endTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          case 3: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 4: // START_TIMESTAMP
            return START_TIMESTAMP;
          case 5: // END_TIMESTAMP
            return END_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("endTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordedMediaList_args.class, metaDataMap);
    }

    public getRecordedMediaList_args() {
    }

    public getRecordedMediaList_args(
      String deviceId,
      String channelId,
      String mediaType,
      String startTimestamp,
      String endTimestamp)
    {
      this();
      this.deviceId = deviceId;
      this.channelId = channelId;
      this.mediaType = mediaType;
      this.startTimestamp = startTimestamp;
      this.endTimestamp = endTimestamp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordedMediaList_args(getRecordedMediaList_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetStartTimestamp()) {
        this.startTimestamp = other.startTimestamp;
      }
      if (other.isSetEndTimestamp()) {
        this.endTimestamp = other.endTimestamp;
      }
    }

    public getRecordedMediaList_args deepCopy() {
      return new getRecordedMediaList_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.channelId = null;
      this.mediaType = null;
      this.startTimestamp = null;
      this.endTimestamp = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public getRecordedMediaList_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public getRecordedMediaList_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public getRecordedMediaList_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getStartTimestamp() {
      return this.startTimestamp;
    }

    public getRecordedMediaList_args setStartTimestamp(String startTimestamp) {
      this.startTimestamp = startTimestamp;
      return this;
    }

    public void unsetStartTimestamp() {
      this.startTimestamp = null;
    }

    /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTimestamp() {
      return this.startTimestamp != null;
    }

    public void setStartTimestampIsSet(boolean value) {
      if (!value) {
        this.startTimestamp = null;
      }
    }

    public String getEndTimestamp() {
      return this.endTimestamp;
    }

    public getRecordedMediaList_args setEndTimestamp(String endTimestamp) {
      this.endTimestamp = endTimestamp;
      return this;
    }

    public void unsetEndTimestamp() {
      this.endTimestamp = null;
    }

    /** Returns true if field endTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTimestamp() {
      return this.endTimestamp != null;
    }

    public void setEndTimestampIsSet(boolean value) {
      if (!value) {
        this.endTimestamp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case START_TIMESTAMP:
        if (value == null) {
          unsetStartTimestamp();
        } else {
          setStartTimestamp((String)value);
        }
        break;

      case END_TIMESTAMP:
        if (value == null) {
          unsetEndTimestamp();
        } else {
          setEndTimestamp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      case MEDIA_TYPE:
        return getMediaType();

      case START_TIMESTAMP:
        return getStartTimestamp();

      case END_TIMESTAMP:
        return getEndTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case MEDIA_TYPE:
        return isSetMediaType();
      case START_TIMESTAMP:
        return isSetStartTimestamp();
      case END_TIMESTAMP:
        return isSetEndTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordedMediaList_args)
        return this.equals((getRecordedMediaList_args)that);
      return false;
    }

    public boolean equals(getRecordedMediaList_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
      boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
      if (this_present_startTimestamp || that_present_startTimestamp) {
        if (!(this_present_startTimestamp && that_present_startTimestamp))
          return false;
        if (!this.startTimestamp.equals(that.startTimestamp))
          return false;
      }

      boolean this_present_endTimestamp = true && this.isSetEndTimestamp();
      boolean that_present_endTimestamp = true && that.isSetEndTimestamp();
      if (this_present_endTimestamp || that_present_endTimestamp) {
        if (!(this_present_endTimestamp && that_present_endTimestamp))
          return false;
        if (!this.endTimestamp.equals(that.endTimestamp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecordedMediaList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecordedMediaList_args typedOther = (getRecordedMediaList_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTimestamp()).compareTo(typedOther.isSetEndTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestamp, typedOther.endTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordedMediaList_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      if (this.startTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.startTimestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTimestamp:");
      if (this.endTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.endTimestamp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordedMediaList_argsStandardSchemeFactory implements SchemeFactory {
      public getRecordedMediaList_argsStandardScheme getScheme() {
        return new getRecordedMediaList_argsStandardScheme();
      }
    }

    private static class getRecordedMediaList_argsStandardScheme extends StandardScheme<getRecordedMediaList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordedMediaList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // START_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTimestamp = iprot.readString();
                struct.setStartTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // END_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTimestamp = iprot.readString();
                struct.setEndTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordedMediaList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.startTimestamp != null) {
          oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.startTimestamp);
          oprot.writeFieldEnd();
        }
        if (struct.endTimestamp != null) {
          oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.endTimestamp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordedMediaList_argsTupleSchemeFactory implements SchemeFactory {
      public getRecordedMediaList_argsTupleScheme getScheme() {
        return new getRecordedMediaList_argsTupleScheme();
      }
    }

    private static class getRecordedMediaList_argsTupleScheme extends TupleScheme<getRecordedMediaList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordedMediaList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        if (struct.isSetMediaType()) {
          optionals.set(2);
        }
        if (struct.isSetStartTimestamp()) {
          optionals.set(3);
        }
        if (struct.isSetEndTimestamp()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetStartTimestamp()) {
          oprot.writeString(struct.startTimestamp);
        }
        if (struct.isSetEndTimestamp()) {
          oprot.writeString(struct.endTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordedMediaList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.startTimestamp = iprot.readString();
          struct.setStartTimestampIsSet(true);
        }
        if (incoming.get(4)) {
          struct.endTimestamp = iprot.readString();
          struct.setEndTimestampIsSet(true);
        }
      }
    }

  }

  public static class getRecordedMediaList_result implements org.apache.thrift.TBase<getRecordedMediaList_result, getRecordedMediaList_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecordedMediaList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecordedMediaList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecordedMediaList_resultTupleSchemeFactory());
    }

    public List<RecordedMediaInfo> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecordedMediaInfo.class))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecordedMediaList_result.class, metaDataMap);
    }

    public getRecordedMediaList_result() {
    }

    public getRecordedMediaList_result(
      List<RecordedMediaInfo> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecordedMediaList_result(getRecordedMediaList_result other) {
      if (other.isSetSuccess()) {
        List<RecordedMediaInfo> __this__success = new ArrayList<RecordedMediaInfo>();
        for (RecordedMediaInfo other_element : other.success) {
          __this__success.add(new RecordedMediaInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public getRecordedMediaList_result deepCopy() {
      return new getRecordedMediaList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RecordedMediaInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RecordedMediaInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<RecordedMediaInfo>();
      }
      this.success.add(elem);
    }

    public List<RecordedMediaInfo> getSuccess() {
      return this.success;
    }

    public getRecordedMediaList_result setSuccess(List<RecordedMediaInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public getRecordedMediaList_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RecordedMediaInfo>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecordedMediaList_result)
        return this.equals((getRecordedMediaList_result)that);
      return false;
    }

    public boolean equals(getRecordedMediaList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecordedMediaList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecordedMediaList_result typedOther = (getRecordedMediaList_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecordedMediaList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecordedMediaList_resultStandardSchemeFactory implements SchemeFactory {
      public getRecordedMediaList_resultStandardScheme getScheme() {
        return new getRecordedMediaList_resultStandardScheme();
      }
    }

    private static class getRecordedMediaList_resultStandardScheme extends StandardScheme<getRecordedMediaList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecordedMediaList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<RecordedMediaInfo>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    RecordedMediaInfo _elem34; // required
                    _elem34 = new RecordedMediaInfo();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecordedMediaList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RecordedMediaInfo _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecordedMediaList_resultTupleSchemeFactory implements SchemeFactory {
      public getRecordedMediaList_resultTupleScheme getScheme() {
        return new getRecordedMediaList_resultTupleScheme();
      }
    }

    private static class getRecordedMediaList_resultTupleScheme extends TupleScheme<getRecordedMediaList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecordedMediaList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RecordedMediaInfo _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecordedMediaList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RecordedMediaInfo>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              RecordedMediaInfo _elem39; // required
              _elem39 = new RecordedMediaInfo();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class getStorageStatus_args implements org.apache.thrift.TBase<getStorageStatus_args, getStorageStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStorageStatus_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStorageStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStorageStatus_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStorageStatus_args.class, metaDataMap);
    }

    public getStorageStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStorageStatus_args(getStorageStatus_args other) {
    }

    public getStorageStatus_args deepCopy() {
      return new getStorageStatus_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStorageStatus_args)
        return this.equals((getStorageStatus_args)that);
      return false;
    }

    public boolean equals(getStorageStatus_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStorageStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStorageStatus_args typedOther = (getStorageStatus_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStorageStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStorageStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getStorageStatus_argsStandardScheme getScheme() {
        return new getStorageStatus_argsStandardScheme();
      }
    }

    private static class getStorageStatus_argsStandardScheme extends StandardScheme<getStorageStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStorageStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStorageStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStorageStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getStorageStatus_argsTupleScheme getScheme() {
        return new getStorageStatus_argsTupleScheme();
      }
    }

    private static class getStorageStatus_argsTupleScheme extends TupleScheme<getStorageStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStorageStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStorageStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getStorageStatus_result implements org.apache.thrift.TBase<getStorageStatus_result, getStorageStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStorageStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStorageStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStorageStatus_resultTupleSchemeFactory());
    }

    public List<com.kaisquare.core.thrift.StorageInfo> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.core.thrift.StorageInfo.class))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStorageStatus_result.class, metaDataMap);
    }

    public getStorageStatus_result() {
    }

    public getStorageStatus_result(
      List<com.kaisquare.core.thrift.StorageInfo> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStorageStatus_result(getStorageStatus_result other) {
      if (other.isSetSuccess()) {
        List<com.kaisquare.core.thrift.StorageInfo> __this__success = new ArrayList<com.kaisquare.core.thrift.StorageInfo>();
        for (com.kaisquare.core.thrift.StorageInfo other_element : other.success) {
          __this__success.add(new com.kaisquare.core.thrift.StorageInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public getStorageStatus_result deepCopy() {
      return new getStorageStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.kaisquare.core.thrift.StorageInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.kaisquare.core.thrift.StorageInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.kaisquare.core.thrift.StorageInfo>();
      }
      this.success.add(elem);
    }

    public List<com.kaisquare.core.thrift.StorageInfo> getSuccess() {
      return this.success;
    }

    public getStorageStatus_result setSuccess(List<com.kaisquare.core.thrift.StorageInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public getStorageStatus_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.kaisquare.core.thrift.StorageInfo>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStorageStatus_result)
        return this.equals((getStorageStatus_result)that);
      return false;
    }

    public boolean equals(getStorageStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStorageStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStorageStatus_result typedOther = (getStorageStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStorageStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStorageStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getStorageStatus_resultStandardScheme getScheme() {
        return new getStorageStatus_resultStandardScheme();
      }
    }

    private static class getStorageStatus_resultStandardScheme extends StandardScheme<getStorageStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStorageStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<com.kaisquare.core.thrift.StorageInfo>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    com.kaisquare.core.thrift.StorageInfo _elem42; // required
                    _elem42 = new com.kaisquare.core.thrift.StorageInfo();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStorageStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.kaisquare.core.thrift.StorageInfo _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStorageStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getStorageStatus_resultTupleScheme getScheme() {
        return new getStorageStatus_resultTupleScheme();
      }
    }

    private static class getStorageStatus_resultTupleScheme extends TupleScheme<getStorageStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStorageStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.kaisquare.core.thrift.StorageInfo _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStorageStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.kaisquare.core.thrift.StorageInfo>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              com.kaisquare.core.thrift.StorageInfo _elem47; // required
              _elem47 = new com.kaisquare.core.thrift.StorageInfo();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class requestStreamForPlayback_args implements org.apache.thrift.TBase<requestStreamForPlayback_args, requestStreamForPlayback_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestStreamForPlayback_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestamp", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestStreamForPlayback_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestStreamForPlayback_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public String deviceId; // required
    public String channelId; // required
    public String mediaType; // required
    public String startTimestamp; // required
    public String endTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      DEVICE_ID((short)2, "deviceId"),
      CHANNEL_ID((short)3, "channelId"),
      MEDIA_TYPE((short)4, "mediaType"),
      START_TIMESTAMP((short)5, "startTimestamp"),
      END_TIMESTAMP((short)6, "endTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // DEVICE_ID
            return DEVICE_ID;
          case 3: // CHANNEL_ID
            return CHANNEL_ID;
          case 4: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 5: // START_TIMESTAMP
            return START_TIMESTAMP;
          case 6: // END_TIMESTAMP
            return END_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("endTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestStreamForPlayback_args.class, metaDataMap);
    }

    public requestStreamForPlayback_args() {
    }

    public requestStreamForPlayback_args(
      String sessionId,
      String deviceId,
      String channelId,
      String mediaType,
      String startTimestamp,
      String endTimestamp)
    {
      this();
      this.sessionId = sessionId;
      this.deviceId = deviceId;
      this.channelId = channelId;
      this.mediaType = mediaType;
      this.startTimestamp = startTimestamp;
      this.endTimestamp = endTimestamp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestStreamForPlayback_args(requestStreamForPlayback_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetStartTimestamp()) {
        this.startTimestamp = other.startTimestamp;
      }
      if (other.isSetEndTimestamp()) {
        this.endTimestamp = other.endTimestamp;
      }
    }

    public requestStreamForPlayback_args deepCopy() {
      return new requestStreamForPlayback_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.deviceId = null;
      this.channelId = null;
      this.mediaType = null;
      this.startTimestamp = null;
      this.endTimestamp = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public requestStreamForPlayback_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public requestStreamForPlayback_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public requestStreamForPlayback_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public requestStreamForPlayback_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getStartTimestamp() {
      return this.startTimestamp;
    }

    public requestStreamForPlayback_args setStartTimestamp(String startTimestamp) {
      this.startTimestamp = startTimestamp;
      return this;
    }

    public void unsetStartTimestamp() {
      this.startTimestamp = null;
    }

    /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTimestamp() {
      return this.startTimestamp != null;
    }

    public void setStartTimestampIsSet(boolean value) {
      if (!value) {
        this.startTimestamp = null;
      }
    }

    public String getEndTimestamp() {
      return this.endTimestamp;
    }

    public requestStreamForPlayback_args setEndTimestamp(String endTimestamp) {
      this.endTimestamp = endTimestamp;
      return this;
    }

    public void unsetEndTimestamp() {
      this.endTimestamp = null;
    }

    /** Returns true if field endTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTimestamp() {
      return this.endTimestamp != null;
    }

    public void setEndTimestampIsSet(boolean value) {
      if (!value) {
        this.endTimestamp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case START_TIMESTAMP:
        if (value == null) {
          unsetStartTimestamp();
        } else {
          setStartTimestamp((String)value);
        }
        break;

      case END_TIMESTAMP:
        if (value == null) {
          unsetEndTimestamp();
        } else {
          setEndTimestamp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      case MEDIA_TYPE:
        return getMediaType();

      case START_TIMESTAMP:
        return getStartTimestamp();

      case END_TIMESTAMP:
        return getEndTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case MEDIA_TYPE:
        return isSetMediaType();
      case START_TIMESTAMP:
        return isSetStartTimestamp();
      case END_TIMESTAMP:
        return isSetEndTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestStreamForPlayback_args)
        return this.equals((requestStreamForPlayback_args)that);
      return false;
    }

    public boolean equals(requestStreamForPlayback_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
      boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
      if (this_present_startTimestamp || that_present_startTimestamp) {
        if (!(this_present_startTimestamp && that_present_startTimestamp))
          return false;
        if (!this.startTimestamp.equals(that.startTimestamp))
          return false;
      }

      boolean this_present_endTimestamp = true && this.isSetEndTimestamp();
      boolean that_present_endTimestamp = true && that.isSetEndTimestamp();
      if (this_present_endTimestamp || that_present_endTimestamp) {
        if (!(this_present_endTimestamp && that_present_endTimestamp))
          return false;
        if (!this.endTimestamp.equals(that.endTimestamp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requestStreamForPlayback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requestStreamForPlayback_args typedOther = (requestStreamForPlayback_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTimestamp()).compareTo(typedOther.isSetEndTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestamp, typedOther.endTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestStreamForPlayback_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      if (this.startTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.startTimestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTimestamp:");
      if (this.endTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.endTimestamp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestStreamForPlayback_argsStandardSchemeFactory implements SchemeFactory {
      public requestStreamForPlayback_argsStandardScheme getScheme() {
        return new requestStreamForPlayback_argsStandardScheme();
      }
    }

    private static class requestStreamForPlayback_argsStandardScheme extends StandardScheme<requestStreamForPlayback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestStreamForPlayback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // START_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTimestamp = iprot.readString();
                struct.setStartTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // END_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTimestamp = iprot.readString();
                struct.setEndTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestStreamForPlayback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.startTimestamp != null) {
          oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.startTimestamp);
          oprot.writeFieldEnd();
        }
        if (struct.endTimestamp != null) {
          oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.endTimestamp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestStreamForPlayback_argsTupleSchemeFactory implements SchemeFactory {
      public requestStreamForPlayback_argsTupleScheme getScheme() {
        return new requestStreamForPlayback_argsTupleScheme();
      }
    }

    private static class requestStreamForPlayback_argsTupleScheme extends TupleScheme<requestStreamForPlayback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestStreamForPlayback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceId()) {
          optionals.set(1);
        }
        if (struct.isSetChannelId()) {
          optionals.set(2);
        }
        if (struct.isSetMediaType()) {
          optionals.set(3);
        }
        if (struct.isSetStartTimestamp()) {
          optionals.set(4);
        }
        if (struct.isSetEndTimestamp()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetStartTimestamp()) {
          oprot.writeString(struct.startTimestamp);
        }
        if (struct.isSetEndTimestamp()) {
          oprot.writeString(struct.endTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestStreamForPlayback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.startTimestamp = iprot.readString();
          struct.setStartTimestampIsSet(true);
        }
        if (incoming.get(5)) {
          struct.endTimestamp = iprot.readString();
          struct.setEndTimestampIsSet(true);
        }
      }
    }

  }

  public static class requestStreamForPlayback_result implements org.apache.thrift.TBase<requestStreamForPlayback_result, requestStreamForPlayback_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestStreamForPlayback_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new requestStreamForPlayback_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new requestStreamForPlayback_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestStreamForPlayback_result.class, metaDataMap);
    }

    public requestStreamForPlayback_result() {
    }

    public requestStreamForPlayback_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestStreamForPlayback_result(requestStreamForPlayback_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public requestStreamForPlayback_result deepCopy() {
      return new requestStreamForPlayback_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public requestStreamForPlayback_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public requestStreamForPlayback_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestStreamForPlayback_result)
        return this.equals((requestStreamForPlayback_result)that);
      return false;
    }

    public boolean equals(requestStreamForPlayback_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(requestStreamForPlayback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      requestStreamForPlayback_result typedOther = (requestStreamForPlayback_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("requestStreamForPlayback_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestStreamForPlayback_resultStandardSchemeFactory implements SchemeFactory {
      public requestStreamForPlayback_resultStandardScheme getScheme() {
        return new requestStreamForPlayback_resultStandardScheme();
      }
    }

    private static class requestStreamForPlayback_resultStandardScheme extends StandardScheme<requestStreamForPlayback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestStreamForPlayback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestStreamForPlayback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestStreamForPlayback_resultTupleSchemeFactory implements SchemeFactory {
      public requestStreamForPlayback_resultTupleScheme getScheme() {
        return new requestStreamForPlayback_resultTupleScheme();
      }
    }

    private static class requestStreamForPlayback_resultTupleScheme extends TupleScheme<requestStreamForPlayback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestStreamForPlayback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestStreamForPlayback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class cancelStreamForPlayback_args implements org.apache.thrift.TBase<cancelStreamForPlayback_args, cancelStreamForPlayback_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelStreamForPlayback_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField FILE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileTime", org.apache.thrift.protocol.TType.LIST, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelStreamForPlayback_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelStreamForPlayback_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public String deviceId; // required
    public String channelId; // required
    public String mediaType; // required
    public List<String> fileTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      DEVICE_ID((short)2, "deviceId"),
      CHANNEL_ID((short)3, "channelId"),
      MEDIA_TYPE((short)4, "mediaType"),
      FILE_TIME((short)5, "fileTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // DEVICE_ID
            return DEVICE_ID;
          case 3: // CHANNEL_ID
            return CHANNEL_ID;
          case 4: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 5: // FILE_TIME
            return FILE_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_TIME, new org.apache.thrift.meta_data.FieldMetaData("fileTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelStreamForPlayback_args.class, metaDataMap);
    }

    public cancelStreamForPlayback_args() {
    }

    public cancelStreamForPlayback_args(
      String sessionId,
      String deviceId,
      String channelId,
      String mediaType,
      List<String> fileTime)
    {
      this();
      this.sessionId = sessionId;
      this.deviceId = deviceId;
      this.channelId = channelId;
      this.mediaType = mediaType;
      this.fileTime = fileTime;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelStreamForPlayback_args(cancelStreamForPlayback_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetFileTime()) {
        List<String> __this__fileTime = new ArrayList<String>();
        for (String other_element : other.fileTime) {
          __this__fileTime.add(other_element);
        }
        this.fileTime = __this__fileTime;
      }
    }

    public cancelStreamForPlayback_args deepCopy() {
      return new cancelStreamForPlayback_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.deviceId = null;
      this.channelId = null;
      this.mediaType = null;
      this.fileTime = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public cancelStreamForPlayback_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public cancelStreamForPlayback_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public cancelStreamForPlayback_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public cancelStreamForPlayback_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public int getFileTimeSize() {
      return (this.fileTime == null) ? 0 : this.fileTime.size();
    }

    public java.util.Iterator<String> getFileTimeIterator() {
      return (this.fileTime == null) ? null : this.fileTime.iterator();
    }

    public void addToFileTime(String elem) {
      if (this.fileTime == null) {
        this.fileTime = new ArrayList<String>();
      }
      this.fileTime.add(elem);
    }

    public List<String> getFileTime() {
      return this.fileTime;
    }

    public cancelStreamForPlayback_args setFileTime(List<String> fileTime) {
      this.fileTime = fileTime;
      return this;
    }

    public void unsetFileTime() {
      this.fileTime = null;
    }

    /** Returns true if field fileTime is set (has been assigned a value) and false otherwise */
    public boolean isSetFileTime() {
      return this.fileTime != null;
    }

    public void setFileTimeIsSet(boolean value) {
      if (!value) {
        this.fileTime = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case FILE_TIME:
        if (value == null) {
          unsetFileTime();
        } else {
          setFileTime((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      case MEDIA_TYPE:
        return getMediaType();

      case FILE_TIME:
        return getFileTime();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case MEDIA_TYPE:
        return isSetMediaType();
      case FILE_TIME:
        return isSetFileTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelStreamForPlayback_args)
        return this.equals((cancelStreamForPlayback_args)that);
      return false;
    }

    public boolean equals(cancelStreamForPlayback_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_fileTime = true && this.isSetFileTime();
      boolean that_present_fileTime = true && that.isSetFileTime();
      if (this_present_fileTime || that_present_fileTime) {
        if (!(this_present_fileTime && that_present_fileTime))
          return false;
        if (!this.fileTime.equals(that.fileTime))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancelStreamForPlayback_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancelStreamForPlayback_args typedOther = (cancelStreamForPlayback_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileTime()).compareTo(typedOther.isSetFileTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileTime, typedOther.fileTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelStreamForPlayback_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileTime:");
      if (this.fileTime == null) {
        sb.append("null");
      } else {
        sb.append(this.fileTime);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelStreamForPlayback_argsStandardSchemeFactory implements SchemeFactory {
      public cancelStreamForPlayback_argsStandardScheme getScheme() {
        return new cancelStreamForPlayback_argsStandardScheme();
      }
    }

    private static class cancelStreamForPlayback_argsStandardScheme extends StandardScheme<cancelStreamForPlayback_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelStreamForPlayback_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // FILE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.fileTime = new ArrayList<String>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    String _elem50; // required
                    _elem50 = iprot.readString();
                    struct.fileTime.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setFileTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelStreamForPlayback_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.fileTime != null) {
          oprot.writeFieldBegin(FILE_TIME_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fileTime.size()));
            for (String _iter51 : struct.fileTime)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelStreamForPlayback_argsTupleSchemeFactory implements SchemeFactory {
      public cancelStreamForPlayback_argsTupleScheme getScheme() {
        return new cancelStreamForPlayback_argsTupleScheme();
      }
    }

    private static class cancelStreamForPlayback_argsTupleScheme extends TupleScheme<cancelStreamForPlayback_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelStreamForPlayback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceId()) {
          optionals.set(1);
        }
        if (struct.isSetChannelId()) {
          optionals.set(2);
        }
        if (struct.isSetMediaType()) {
          optionals.set(3);
        }
        if (struct.isSetFileTime()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetFileTime()) {
          {
            oprot.writeI32(struct.fileTime.size());
            for (String _iter52 : struct.fileTime)
            {
              oprot.writeString(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelStreamForPlayback_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.fileTime = new ArrayList<String>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              String _elem55; // required
              _elem55 = iprot.readString();
              struct.fileTime.add(_elem55);
            }
          }
          struct.setFileTimeIsSet(true);
        }
      }
    }

  }

  public static class cancelStreamForPlayback_result implements org.apache.thrift.TBase<cancelStreamForPlayback_result, cancelStreamForPlayback_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelStreamForPlayback_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelStreamForPlayback_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelStreamForPlayback_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelStreamForPlayback_result.class, metaDataMap);
    }

    public cancelStreamForPlayback_result() {
    }

    public cancelStreamForPlayback_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelStreamForPlayback_result(cancelStreamForPlayback_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public cancelStreamForPlayback_result deepCopy() {
      return new cancelStreamForPlayback_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public cancelStreamForPlayback_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public cancelStreamForPlayback_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelStreamForPlayback_result)
        return this.equals((cancelStreamForPlayback_result)that);
      return false;
    }

    public boolean equals(cancelStreamForPlayback_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(cancelStreamForPlayback_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      cancelStreamForPlayback_result typedOther = (cancelStreamForPlayback_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelStreamForPlayback_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelStreamForPlayback_resultStandardSchemeFactory implements SchemeFactory {
      public cancelStreamForPlayback_resultStandardScheme getScheme() {
        return new cancelStreamForPlayback_resultStandardScheme();
      }
    }

    private static class cancelStreamForPlayback_resultStandardScheme extends StandardScheme<cancelStreamForPlayback_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelStreamForPlayback_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelStreamForPlayback_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelStreamForPlayback_resultTupleSchemeFactory implements SchemeFactory {
      public cancelStreamForPlayback_resultTupleScheme getScheme() {
        return new cancelStreamForPlayback_resultTupleScheme();
      }
    }

    private static class cancelStreamForPlayback_resultTupleScheme extends TupleScheme<cancelStreamForPlayback_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelStreamForPlayback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelStreamForPlayback_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class getStreamFileDetails_args implements org.apache.thrift.TBase<getStreamFileDetails_args, getStreamFileDetails_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamFileDetails_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestamp", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStreamFileDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStreamFileDetails_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public String deviceId; // required
    public String channelId; // required
    public String mediaType; // required
    public String action; // required
    public String startTimestamp; // required
    public String endTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      DEVICE_ID((short)2, "deviceId"),
      CHANNEL_ID((short)3, "channelId"),
      MEDIA_TYPE((short)4, "mediaType"),
      ACTION((short)5, "action"),
      START_TIMESTAMP((short)6, "startTimestamp"),
      END_TIMESTAMP((short)7, "endTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // DEVICE_ID
            return DEVICE_ID;
          case 3: // CHANNEL_ID
            return CHANNEL_ID;
          case 4: // MEDIA_TYPE
            return MEDIA_TYPE;
          case 5: // ACTION
            return ACTION;
          case 6: // START_TIMESTAMP
            return START_TIMESTAMP;
          case 7: // END_TIMESTAMP
            return END_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("endTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamFileDetails_args.class, metaDataMap);
    }

    public getStreamFileDetails_args() {
    }

    public getStreamFileDetails_args(
      String sessionId,
      String deviceId,
      String channelId,
      String mediaType,
      String action,
      String startTimestamp,
      String endTimestamp)
    {
      this();
      this.sessionId = sessionId;
      this.deviceId = deviceId;
      this.channelId = channelId;
      this.mediaType = mediaType;
      this.action = action;
      this.startTimestamp = startTimestamp;
      this.endTimestamp = endTimestamp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamFileDetails_args(getStreamFileDetails_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
      if (other.isSetAction()) {
        this.action = other.action;
      }
      if (other.isSetStartTimestamp()) {
        this.startTimestamp = other.startTimestamp;
      }
      if (other.isSetEndTimestamp()) {
        this.endTimestamp = other.endTimestamp;
      }
    }

    public getStreamFileDetails_args deepCopy() {
      return new getStreamFileDetails_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.deviceId = null;
      this.channelId = null;
      this.mediaType = null;
      this.action = null;
      this.startTimestamp = null;
      this.endTimestamp = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public getStreamFileDetails_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public getStreamFileDetails_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public getStreamFileDetails_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getMediaType() {
      return this.mediaType;
    }

    public getStreamFileDetails_args setMediaType(String mediaType) {
      this.mediaType = mediaType;
      return this;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public String getAction() {
      return this.action;
    }

    public getStreamFileDetails_args setAction(String action) {
      this.action = action;
      return this;
    }

    public void unsetAction() {
      this.action = null;
    }

    /** Returns true if field action is set (has been assigned a value) and false otherwise */
    public boolean isSetAction() {
      return this.action != null;
    }

    public void setActionIsSet(boolean value) {
      if (!value) {
        this.action = null;
      }
    }

    public String getStartTimestamp() {
      return this.startTimestamp;
    }

    public getStreamFileDetails_args setStartTimestamp(String startTimestamp) {
      this.startTimestamp = startTimestamp;
      return this;
    }

    public void unsetStartTimestamp() {
      this.startTimestamp = null;
    }

    /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTimestamp() {
      return this.startTimestamp != null;
    }

    public void setStartTimestampIsSet(boolean value) {
      if (!value) {
        this.startTimestamp = null;
      }
    }

    public String getEndTimestamp() {
      return this.endTimestamp;
    }

    public getStreamFileDetails_args setEndTimestamp(String endTimestamp) {
      this.endTimestamp = endTimestamp;
      return this;
    }

    public void unsetEndTimestamp() {
      this.endTimestamp = null;
    }

    /** Returns true if field endTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTimestamp() {
      return this.endTimestamp != null;
    }

    public void setEndTimestampIsSet(boolean value) {
      if (!value) {
        this.endTimestamp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case MEDIA_TYPE:
        if (value == null) {
          unsetMediaType();
        } else {
          setMediaType((String)value);
        }
        break;

      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          setAction((String)value);
        }
        break;

      case START_TIMESTAMP:
        if (value == null) {
          unsetStartTimestamp();
        } else {
          setStartTimestamp((String)value);
        }
        break;

      case END_TIMESTAMP:
        if (value == null) {
          unsetEndTimestamp();
        } else {
          setEndTimestamp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      case MEDIA_TYPE:
        return getMediaType();

      case ACTION:
        return getAction();

      case START_TIMESTAMP:
        return getStartTimestamp();

      case END_TIMESTAMP:
        return getEndTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case MEDIA_TYPE:
        return isSetMediaType();
      case ACTION:
        return isSetAction();
      case START_TIMESTAMP:
        return isSetStartTimestamp();
      case END_TIMESTAMP:
        return isSetEndTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamFileDetails_args)
        return this.equals((getStreamFileDetails_args)that);
      return false;
    }

    public boolean equals(getStreamFileDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      boolean this_present_action = true && this.isSetAction();
      boolean that_present_action = true && that.isSetAction();
      if (this_present_action || that_present_action) {
        if (!(this_present_action && that_present_action))
          return false;
        if (!this.action.equals(that.action))
          return false;
      }

      boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
      boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
      if (this_present_startTimestamp || that_present_startTimestamp) {
        if (!(this_present_startTimestamp && that_present_startTimestamp))
          return false;
        if (!this.startTimestamp.equals(that.startTimestamp))
          return false;
      }

      boolean this_present_endTimestamp = true && this.isSetEndTimestamp();
      boolean that_present_endTimestamp = true && that.isSetEndTimestamp();
      if (this_present_endTimestamp || that_present_endTimestamp) {
        if (!(this_present_endTimestamp && that_present_endTimestamp))
          return false;
        if (!this.endTimestamp.equals(that.endTimestamp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStreamFileDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStreamFileDetails_args typedOther = (getStreamFileDetails_args)other;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(typedOther.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, typedOther.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(typedOther.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, typedOther.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, typedOther.action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTimestamp()).compareTo(typedOther.isSetEndTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestamp, typedOther.endTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStreamFileDetails_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      if (this.startTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.startTimestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTimestamp:");
      if (this.endTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.endTimestamp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamFileDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getStreamFileDetails_argsStandardScheme getScheme() {
        return new getStreamFileDetails_argsStandardScheme();
      }
    }

    private static class getStreamFileDetails_argsStandardScheme extends StandardScheme<getStreamFileDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamFileDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MEDIA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mediaType = iprot.readString();
                struct.setMediaTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action = iprot.readString();
                struct.setActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTimestamp = iprot.readString();
                struct.setStartTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // END_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTimestamp = iprot.readString();
                struct.setEndTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamFileDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.mediaType != null) {
          oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
          oprot.writeString(struct.mediaType);
          oprot.writeFieldEnd();
        }
        if (struct.action != null) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeString(struct.action);
          oprot.writeFieldEnd();
        }
        if (struct.startTimestamp != null) {
          oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.startTimestamp);
          oprot.writeFieldEnd();
        }
        if (struct.endTimestamp != null) {
          oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.endTimestamp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamFileDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getStreamFileDetails_argsTupleScheme getScheme() {
        return new getStreamFileDetails_argsTupleScheme();
      }
    }

    private static class getStreamFileDetails_argsTupleScheme extends TupleScheme<getStreamFileDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamFileDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceId()) {
          optionals.set(1);
        }
        if (struct.isSetChannelId()) {
          optionals.set(2);
        }
        if (struct.isSetMediaType()) {
          optionals.set(3);
        }
        if (struct.isSetAction()) {
          optionals.set(4);
        }
        if (struct.isSetStartTimestamp()) {
          optionals.set(5);
        }
        if (struct.isSetEndTimestamp()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetMediaType()) {
          oprot.writeString(struct.mediaType);
        }
        if (struct.isSetAction()) {
          oprot.writeString(struct.action);
        }
        if (struct.isSetStartTimestamp()) {
          oprot.writeString(struct.startTimestamp);
        }
        if (struct.isSetEndTimestamp()) {
          oprot.writeString(struct.endTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamFileDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.mediaType = iprot.readString();
          struct.setMediaTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.action = iprot.readString();
          struct.setActionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.startTimestamp = iprot.readString();
          struct.setStartTimestampIsSet(true);
        }
        if (incoming.get(6)) {
          struct.endTimestamp = iprot.readString();
          struct.setEndTimestampIsSet(true);
        }
      }
    }

  }

  public static class getStreamFileDetails_result implements org.apache.thrift.TBase<getStreamFileDetails_result, getStreamFileDetails_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStreamFileDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStreamFileDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStreamFileDetails_resultTupleSchemeFactory());
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.core.thrift.StreamFileDetails.class))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStreamFileDetails_result.class, metaDataMap);
    }

    public getStreamFileDetails_result() {
    }

    public getStreamFileDetails_result(
      List<com.kaisquare.core.thrift.StreamFileDetails> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStreamFileDetails_result(getStreamFileDetails_result other) {
      if (other.isSetSuccess()) {
        List<com.kaisquare.core.thrift.StreamFileDetails> __this__success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>();
        for (com.kaisquare.core.thrift.StreamFileDetails other_element : other.success) {
          __this__success.add(new com.kaisquare.core.thrift.StreamFileDetails(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public getStreamFileDetails_result deepCopy() {
      return new getStreamFileDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.kaisquare.core.thrift.StreamFileDetails> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.kaisquare.core.thrift.StreamFileDetails elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>();
      }
      this.success.add(elem);
    }

    public List<com.kaisquare.core.thrift.StreamFileDetails> getSuccess() {
      return this.success;
    }

    public getStreamFileDetails_result setSuccess(List<com.kaisquare.core.thrift.StreamFileDetails> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public getStreamFileDetails_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.kaisquare.core.thrift.StreamFileDetails>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStreamFileDetails_result)
        return this.equals((getStreamFileDetails_result)that);
      return false;
    }

    public boolean equals(getStreamFileDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStreamFileDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStreamFileDetails_result typedOther = (getStreamFileDetails_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStreamFileDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStreamFileDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getStreamFileDetails_resultStandardScheme getScheme() {
        return new getStreamFileDetails_resultStandardScheme();
      }
    }

    private static class getStreamFileDetails_resultStandardScheme extends StandardScheme<getStreamFileDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStreamFileDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    com.kaisquare.core.thrift.StreamFileDetails _elem58; // required
                    _elem58 = new com.kaisquare.core.thrift.StreamFileDetails();
                    _elem58.read(iprot);
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStreamFileDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.kaisquare.core.thrift.StreamFileDetails _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStreamFileDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getStreamFileDetails_resultTupleScheme getScheme() {
        return new getStreamFileDetails_resultTupleScheme();
      }
    }

    private static class getStreamFileDetails_resultTupleScheme extends TupleScheme<getStreamFileDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStreamFileDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.kaisquare.core.thrift.StreamFileDetails _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStreamFileDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.kaisquare.core.thrift.StreamFileDetails>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              com.kaisquare.core.thrift.StreamFileDetails _elem63; // required
              _elem63 = new com.kaisquare.core.thrift.StreamFileDetails();
              _elem63.read(iprot);
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

}
