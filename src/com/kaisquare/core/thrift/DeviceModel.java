/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Device Model Structure - a structure of this type represents a model
 * of devices in the system.
 * 
 * Most of the fields in this API are mapped to corresponding fields in
 * Core Engine's existing database. RMS+ can safely ignore the fields that
 * it does not require.
 * 
 * (1) id - Unique identifier of this model
 * (2) createdAt - Not used
 * (3) createdBy - Not used
 * (4) modifiedAt - Not used
 * (5) modifiedBy - Not used
 * (6) name - Model name
 * (7) channels - Number of channels that the devices of this model have
 * (8) data - Not used
 * (9) action - Not used
 * (10) misc - JSON formatted additional miscellaneous information, e.g.
 *   {
 *     "servertype": "http-camera",
 *     "supportedtasktypes": ["live-image"],
 *     "device_url": "http://#{device:host}:#{device:misc:port}/",
 *     "onboard_recording_server": "http://#{device:host}:#{device:misc:port}/setup/recording.html"
 *   }
 * (11) liveview - Boolean flag, TRUE if this device supports live view, FALSE otherwise.
 *   {
 *     "0": {
 *       "activex": {
 *         "objectcode": "<object â€?â€?/object>",
 *         "ptz": {
 *           "left": "â€?,
 *           "right": "â€?,
 *           "up": "â€?,
 *           "down": "â€?,
 *           "in": "â€?,
 *           "out": "â€?,
 *           "home": "â€?
 *         }
 *       },
 *       "mjpeg": {
 *         "objectcode": "<applet â€?â€?/applet>"
 *       }
 *     }
 *   }
 */
public class DeviceModel implements org.apache.thrift.TBase<DeviceModel, DeviceModel._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeviceModel");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CREATED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("createdAt", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CREATED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("createdBy", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MODIFIED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedAt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MODIFIED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("modifiedBy", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CHANNELS_FIELD_DESC = new org.apache.thrift.protocol.TField("channels", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField MISC_FIELD_DESC = new org.apache.thrift.protocol.TField("misc", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LIVEVIEW_FIELD_DESC = new org.apache.thrift.protocol.TField("liveview", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeviceModelStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeviceModelTupleSchemeFactory());
  }

  public String id; // required
  public String createdAt; // required
  public String createdBy; // required
  public String modifiedAt; // required
  public String modifiedBy; // required
  public String name; // required
  public String channels; // required
  public String data; // required
  public String action; // required
  public String misc; // required
  public String liveview; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CREATED_AT((short)2, "createdAt"),
    CREATED_BY((short)3, "createdBy"),
    MODIFIED_AT((short)4, "modifiedAt"),
    MODIFIED_BY((short)5, "modifiedBy"),
    NAME((short)6, "name"),
    CHANNELS((short)7, "channels"),
    DATA((short)8, "data"),
    ACTION((short)9, "action"),
    MISC((short)10, "misc"),
    LIVEVIEW((short)11, "liveview");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CREATED_AT
          return CREATED_AT;
        case 3: // CREATED_BY
          return CREATED_BY;
        case 4: // MODIFIED_AT
          return MODIFIED_AT;
        case 5: // MODIFIED_BY
          return MODIFIED_BY;
        case 6: // NAME
          return NAME;
        case 7: // CHANNELS
          return CHANNELS;
        case 8: // DATA
          return DATA;
        case 9: // ACTION
          return ACTION;
        case 10: // MISC
          return MISC;
        case 11: // LIVEVIEW
          return LIVEVIEW;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_AT, new org.apache.thrift.meta_data.FieldMetaData("createdAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATED_BY, new org.apache.thrift.meta_data.FieldMetaData("createdBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFIED_AT, new org.apache.thrift.meta_data.FieldMetaData("modifiedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFIED_BY, new org.apache.thrift.meta_data.FieldMetaData("modifiedBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNELS, new org.apache.thrift.meta_data.FieldMetaData("channels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MISC, new org.apache.thrift.meta_data.FieldMetaData("misc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIVEVIEW, new org.apache.thrift.meta_data.FieldMetaData("liveview", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeviceModel.class, metaDataMap);
  }

  public DeviceModel() {
  }

  public DeviceModel(
    String id,
    String createdAt,
    String createdBy,
    String modifiedAt,
    String modifiedBy,
    String name,
    String channels,
    String data,
    String action,
    String misc,
    String liveview)
  {
    this();
    this.id = id;
    this.createdAt = createdAt;
    this.createdBy = createdBy;
    this.modifiedAt = modifiedAt;
    this.modifiedBy = modifiedBy;
    this.name = name;
    this.channels = channels;
    this.data = data;
    this.action = action;
    this.misc = misc;
    this.liveview = liveview;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeviceModel(DeviceModel other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCreatedAt()) {
      this.createdAt = other.createdAt;
    }
    if (other.isSetCreatedBy()) {
      this.createdBy = other.createdBy;
    }
    if (other.isSetModifiedAt()) {
      this.modifiedAt = other.modifiedAt;
    }
    if (other.isSetModifiedBy()) {
      this.modifiedBy = other.modifiedBy;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetChannels()) {
      this.channels = other.channels;
    }
    if (other.isSetData()) {
      this.data = other.data;
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
    if (other.isSetMisc()) {
      this.misc = other.misc;
    }
    if (other.isSetLiveview()) {
      this.liveview = other.liveview;
    }
  }

  public DeviceModel deepCopy() {
    return new DeviceModel(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.createdAt = null;
    this.createdBy = null;
    this.modifiedAt = null;
    this.modifiedBy = null;
    this.name = null;
    this.channels = null;
    this.data = null;
    this.action = null;
    this.misc = null;
    this.liveview = null;
  }

  public String getId() {
    return this.id;
  }

  public DeviceModel setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getCreatedAt() {
    return this.createdAt;
  }

  public DeviceModel setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  public void unsetCreatedAt() {
    this.createdAt = null;
  }

  /** Returns true if field createdAt is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedAt() {
    return this.createdAt != null;
  }

  public void setCreatedAtIsSet(boolean value) {
    if (!value) {
      this.createdAt = null;
    }
  }

  public String getCreatedBy() {
    return this.createdBy;
  }

  public DeviceModel setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  public void unsetCreatedBy() {
    this.createdBy = null;
  }

  /** Returns true if field createdBy is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedBy() {
    return this.createdBy != null;
  }

  public void setCreatedByIsSet(boolean value) {
    if (!value) {
      this.createdBy = null;
    }
  }

  public String getModifiedAt() {
    return this.modifiedAt;
  }

  public DeviceModel setModifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  public void unsetModifiedAt() {
    this.modifiedAt = null;
  }

  /** Returns true if field modifiedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedAt() {
    return this.modifiedAt != null;
  }

  public void setModifiedAtIsSet(boolean value) {
    if (!value) {
      this.modifiedAt = null;
    }
  }

  public String getModifiedBy() {
    return this.modifiedBy;
  }

  public DeviceModel setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

  public void unsetModifiedBy() {
    this.modifiedBy = null;
  }

  /** Returns true if field modifiedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetModifiedBy() {
    return this.modifiedBy != null;
  }

  public void setModifiedByIsSet(boolean value) {
    if (!value) {
      this.modifiedBy = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public DeviceModel setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getChannels() {
    return this.channels;
  }

  public DeviceModel setChannels(String channels) {
    this.channels = channels;
    return this;
  }

  public void unsetChannels() {
    this.channels = null;
  }

  /** Returns true if field channels is set (has been assigned a value) and false otherwise */
  public boolean isSetChannels() {
    return this.channels != null;
  }

  public void setChannelsIsSet(boolean value) {
    if (!value) {
      this.channels = null;
    }
  }

  public String getData() {
    return this.data;
  }

  public DeviceModel setData(String data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public String getAction() {
    return this.action;
  }

  public DeviceModel setAction(String action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public String getMisc() {
    return this.misc;
  }

  public DeviceModel setMisc(String misc) {
    this.misc = misc;
    return this;
  }

  public void unsetMisc() {
    this.misc = null;
  }

  /** Returns true if field misc is set (has been assigned a value) and false otherwise */
  public boolean isSetMisc() {
    return this.misc != null;
  }

  public void setMiscIsSet(boolean value) {
    if (!value) {
      this.misc = null;
    }
  }

  public String getLiveview() {
    return this.liveview;
  }

  public DeviceModel setLiveview(String liveview) {
    this.liveview = liveview;
    return this;
  }

  public void unsetLiveview() {
    this.liveview = null;
  }

  /** Returns true if field liveview is set (has been assigned a value) and false otherwise */
  public boolean isSetLiveview() {
    return this.liveview != null;
  }

  public void setLiveviewIsSet(boolean value) {
    if (!value) {
      this.liveview = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CREATED_AT:
      if (value == null) {
        unsetCreatedAt();
      } else {
        setCreatedAt((String)value);
      }
      break;

    case CREATED_BY:
      if (value == null) {
        unsetCreatedBy();
      } else {
        setCreatedBy((String)value);
      }
      break;

    case MODIFIED_AT:
      if (value == null) {
        unsetModifiedAt();
      } else {
        setModifiedAt((String)value);
      }
      break;

    case MODIFIED_BY:
      if (value == null) {
        unsetModifiedBy();
      } else {
        setModifiedBy((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CHANNELS:
      if (value == null) {
        unsetChannels();
      } else {
        setChannels((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((String)value);
      }
      break;

    case MISC:
      if (value == null) {
        unsetMisc();
      } else {
        setMisc((String)value);
      }
      break;

    case LIVEVIEW:
      if (value == null) {
        unsetLiveview();
      } else {
        setLiveview((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CREATED_AT:
      return getCreatedAt();

    case CREATED_BY:
      return getCreatedBy();

    case MODIFIED_AT:
      return getModifiedAt();

    case MODIFIED_BY:
      return getModifiedBy();

    case NAME:
      return getName();

    case CHANNELS:
      return getChannels();

    case DATA:
      return getData();

    case ACTION:
      return getAction();

    case MISC:
      return getMisc();

    case LIVEVIEW:
      return getLiveview();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CREATED_AT:
      return isSetCreatedAt();
    case CREATED_BY:
      return isSetCreatedBy();
    case MODIFIED_AT:
      return isSetModifiedAt();
    case MODIFIED_BY:
      return isSetModifiedBy();
    case NAME:
      return isSetName();
    case CHANNELS:
      return isSetChannels();
    case DATA:
      return isSetData();
    case ACTION:
      return isSetAction();
    case MISC:
      return isSetMisc();
    case LIVEVIEW:
      return isSetLiveview();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeviceModel)
      return this.equals((DeviceModel)that);
    return false;
  }

  public boolean equals(DeviceModel that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_createdAt = true && this.isSetCreatedAt();
    boolean that_present_createdAt = true && that.isSetCreatedAt();
    if (this_present_createdAt || that_present_createdAt) {
      if (!(this_present_createdAt && that_present_createdAt))
        return false;
      if (!this.createdAt.equals(that.createdAt))
        return false;
    }

    boolean this_present_createdBy = true && this.isSetCreatedBy();
    boolean that_present_createdBy = true && that.isSetCreatedBy();
    if (this_present_createdBy || that_present_createdBy) {
      if (!(this_present_createdBy && that_present_createdBy))
        return false;
      if (!this.createdBy.equals(that.createdBy))
        return false;
    }

    boolean this_present_modifiedAt = true && this.isSetModifiedAt();
    boolean that_present_modifiedAt = true && that.isSetModifiedAt();
    if (this_present_modifiedAt || that_present_modifiedAt) {
      if (!(this_present_modifiedAt && that_present_modifiedAt))
        return false;
      if (!this.modifiedAt.equals(that.modifiedAt))
        return false;
    }

    boolean this_present_modifiedBy = true && this.isSetModifiedBy();
    boolean that_present_modifiedBy = true && that.isSetModifiedBy();
    if (this_present_modifiedBy || that_present_modifiedBy) {
      if (!(this_present_modifiedBy && that_present_modifiedBy))
        return false;
      if (!this.modifiedBy.equals(that.modifiedBy))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_channels = true && this.isSetChannels();
    boolean that_present_channels = true && that.isSetChannels();
    if (this_present_channels || that_present_channels) {
      if (!(this_present_channels && that_present_channels))
        return false;
      if (!this.channels.equals(that.channels))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    boolean this_present_misc = true && this.isSetMisc();
    boolean that_present_misc = true && that.isSetMisc();
    if (this_present_misc || that_present_misc) {
      if (!(this_present_misc && that_present_misc))
        return false;
      if (!this.misc.equals(that.misc))
        return false;
    }

    boolean this_present_liveview = true && this.isSetLiveview();
    boolean that_present_liveview = true && that.isSetLiveview();
    if (this_present_liveview || that_present_liveview) {
      if (!(this_present_liveview && that_present_liveview))
        return false;
      if (!this.liveview.equals(that.liveview))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(DeviceModel other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DeviceModel typedOther = (DeviceModel)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedAt()).compareTo(typedOther.isSetCreatedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdAt, typedOther.createdAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedBy()).compareTo(typedOther.isSetCreatedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdBy, typedOther.createdBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifiedAt()).compareTo(typedOther.isSetModifiedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedAt, typedOther.modifiedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifiedBy()).compareTo(typedOther.isSetModifiedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifiedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifiedBy, typedOther.modifiedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannels()).compareTo(typedOther.isSetChannels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channels, typedOther.channels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, typedOther.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMisc()).compareTo(typedOther.isSetMisc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMisc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.misc, typedOther.misc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLiveview()).compareTo(typedOther.isSetLiveview());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLiveview()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.liveview, typedOther.liveview);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeviceModel(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdAt:");
    if (this.createdAt == null) {
      sb.append("null");
    } else {
      sb.append(this.createdAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdBy:");
    if (this.createdBy == null) {
      sb.append("null");
    } else {
      sb.append(this.createdBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifiedAt:");
    if (this.modifiedAt == null) {
      sb.append("null");
    } else {
      sb.append(this.modifiedAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifiedBy:");
    if (this.modifiedBy == null) {
      sb.append("null");
    } else {
      sb.append(this.modifiedBy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channels:");
    if (this.channels == null) {
      sb.append("null");
    } else {
      sb.append(this.channels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("misc:");
    if (this.misc == null) {
      sb.append("null");
    } else {
      sb.append(this.misc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("liveview:");
    if (this.liveview == null) {
      sb.append("null");
    } else {
      sb.append(this.liveview);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeviceModelStandardSchemeFactory implements SchemeFactory {
    public DeviceModelStandardScheme getScheme() {
      return new DeviceModelStandardScheme();
    }
  }

  private static class DeviceModelStandardScheme extends StandardScheme<DeviceModel> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeviceModel struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CREATED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdAt = iprot.readString();
              struct.setCreatedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CREATED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createdBy = iprot.readString();
              struct.setCreatedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MODIFIED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifiedAt = iprot.readString();
              struct.setModifiedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MODIFIED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modifiedBy = iprot.readString();
              struct.setModifiedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHANNELS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channels = iprot.readString();
              struct.setChannelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readString();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.action = iprot.readString();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MISC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.misc = iprot.readString();
              struct.setMiscIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LIVEVIEW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.liveview = iprot.readString();
              struct.setLiveviewIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeviceModel struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.createdAt != null) {
        oprot.writeFieldBegin(CREATED_AT_FIELD_DESC);
        oprot.writeString(struct.createdAt);
        oprot.writeFieldEnd();
      }
      if (struct.createdBy != null) {
        oprot.writeFieldBegin(CREATED_BY_FIELD_DESC);
        oprot.writeString(struct.createdBy);
        oprot.writeFieldEnd();
      }
      if (struct.modifiedAt != null) {
        oprot.writeFieldBegin(MODIFIED_AT_FIELD_DESC);
        oprot.writeString(struct.modifiedAt);
        oprot.writeFieldEnd();
      }
      if (struct.modifiedBy != null) {
        oprot.writeFieldBegin(MODIFIED_BY_FIELD_DESC);
        oprot.writeString(struct.modifiedBy);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.channels != null) {
        oprot.writeFieldBegin(CHANNELS_FIELD_DESC);
        oprot.writeString(struct.channels);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeString(struct.data);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeString(struct.action);
        oprot.writeFieldEnd();
      }
      if (struct.misc != null) {
        oprot.writeFieldBegin(MISC_FIELD_DESC);
        oprot.writeString(struct.misc);
        oprot.writeFieldEnd();
      }
      if (struct.liveview != null) {
        oprot.writeFieldBegin(LIVEVIEW_FIELD_DESC);
        oprot.writeString(struct.liveview);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeviceModelTupleSchemeFactory implements SchemeFactory {
    public DeviceModelTupleScheme getScheme() {
      return new DeviceModelTupleScheme();
    }
  }

  private static class DeviceModelTupleScheme extends TupleScheme<DeviceModel> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeviceModel struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCreatedAt()) {
        optionals.set(1);
      }
      if (struct.isSetCreatedBy()) {
        optionals.set(2);
      }
      if (struct.isSetModifiedAt()) {
        optionals.set(3);
      }
      if (struct.isSetModifiedBy()) {
        optionals.set(4);
      }
      if (struct.isSetName()) {
        optionals.set(5);
      }
      if (struct.isSetChannels()) {
        optionals.set(6);
      }
      if (struct.isSetData()) {
        optionals.set(7);
      }
      if (struct.isSetAction()) {
        optionals.set(8);
      }
      if (struct.isSetMisc()) {
        optionals.set(9);
      }
      if (struct.isSetLiveview()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCreatedAt()) {
        oprot.writeString(struct.createdAt);
      }
      if (struct.isSetCreatedBy()) {
        oprot.writeString(struct.createdBy);
      }
      if (struct.isSetModifiedAt()) {
        oprot.writeString(struct.modifiedAt);
      }
      if (struct.isSetModifiedBy()) {
        oprot.writeString(struct.modifiedBy);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetChannels()) {
        oprot.writeString(struct.channels);
      }
      if (struct.isSetData()) {
        oprot.writeString(struct.data);
      }
      if (struct.isSetAction()) {
        oprot.writeString(struct.action);
      }
      if (struct.isSetMisc()) {
        oprot.writeString(struct.misc);
      }
      if (struct.isSetLiveview()) {
        oprot.writeString(struct.liveview);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeviceModel struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.createdAt = iprot.readString();
        struct.setCreatedAtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.createdBy = iprot.readString();
        struct.setCreatedByIsSet(true);
      }
      if (incoming.get(3)) {
        struct.modifiedAt = iprot.readString();
        struct.setModifiedAtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.modifiedBy = iprot.readString();
        struct.setModifiedByIsSet(true);
      }
      if (incoming.get(5)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.channels = iprot.readString();
        struct.setChannelsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.data = iprot.readString();
        struct.setDataIsSet(true);
      }
      if (incoming.get(8)) {
        struct.action = iprot.readString();
        struct.setActionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.misc = iprot.readString();
        struct.setMiscIsSet(true);
      }
      if (incoming.get(10)) {
        struct.liveview = iprot.readString();
        struct.setLiveviewIsSet(true);
      }
    }
  }

}

