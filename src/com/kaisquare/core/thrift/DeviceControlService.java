/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DeviceControlService {

  /**
   * DeviceControlService - this service provides API for interactive control of devices
   */
  public interface Iface {

    /**
     * Gets a device's current status.
     * 
     * (1) deviceId - ID of the device.
     * 
     * Returns the device's status:
     * "online" if the device is currently connected and able to communicate with the backend (Core Engine/RMS+).
     * "offline" if the device is not connected to the backend.
     * "error" if the device is connected but in an error state.
     * "incorrect-password" if the backend is able to connect to the device, but not log in due to invalid login credentials.
     * 
     * @param deviceId
     */
    public String getDeviceStatus(String deviceId) throws CoreException, org.apache.thrift.TException;

    /**
     * Gets the current status of an I/O pin. This is applicable only to devices which
     * have ON/OFF type I/O pins.
     * 
     * (1) deviceId - ID of the device.
     * (2) ioNumber - The digital I/O number of the device, starting with 0.
     * 
     * Returns the result of the operation.
     * "on" if the pin status is ON or HIGH
     * "off" if the pin status is OFF or LOW
     * "error" on failure to read pin status. There could be several reasons of failure e.g. device is offline or device doesn't
     * have the specified I/O control.
     * 
     * @param deviceId
     * @param ioNumber
     */
    public String getGPIO(String deviceId, String ioNumber) throws CoreException, org.apache.thrift.TException;

    /**
     * Sets an I/O control pin ON or OFF. This is applicable only to devices which
     * have ON/OFF type digital I/O control pins.
     * 
     * (1) deviceId - ID of the device.
     * (2) ioNumber - The digital I/O port identifier.
     * (3) value - The new value to set - "on" means ON/HIGH; "off" means OFF/LOW.
     * 
     * Returns the result of the operation.
     * "ok" on successful completion of the operation.
     * "error" on failure. There could be several reasons of failure e.g. device is offline or device doesn't
     * have the specified I/O control.
     * 
     * @param deviceId
     * @param ioNumber
     * @param value
     */
    public String setGPIO(String deviceId, String ioNumber, String value) throws CoreException, org.apache.thrift.TException;

    /**
     * Starts to pan a PTZ device in the specified direction.
     * 
     * (1) deviceId - ID of the device.
     * (2) channelId - channel of the device.
     * (3) direction - The direction of panning: "left" or "right".
     * 
     * Returns the result of the operation.
     * "ok" on successful completion of the operation.
     * "error" on failure. There could be several reasons of failure e.g. device is offline or device doesn't
     * have Pan feature.
     * 
     * @param deviceId
     * @param channelId
     * @param direction
     */
    public String startPanDevice(String deviceId, String channelId, String direction) throws CoreException, org.apache.thrift.TException;

    /**
     * Stops panning of a PTZ device.
     * 
     * (1) deviceId - ID of the device.
     * (2) channelId - channel of the device.
     * 
     * Returns the result of the operation.
     * "ok" on successful completion of the operation.
     * "error" on failure. There could be several reasons of failure e.g. device is offline or device doesn't
     * have Pan feature.
     * 
     * @param deviceId
     * @param channelId
     */
    public String stopPanDevice(String deviceId, String channelId) throws CoreException, org.apache.thrift.TException;

    /**
     * Starts to tilt a PTZ device in the specified direction.
     * 
     * (1) deviceId - ID of the device.
     * (2) channelId - channel of the device.
     * (3) direction - The direction of panning: "left" or "right".
     * 
     * Returns the result of the operation.
     * "ok" on successful completion of the operation.
     * "error" on failure. There could be several reasons of failure e.g. device is offline or device doesn't
     * have Tilt feature.
     * 
     * @param deviceId
     * @param channelId
     * @param direction
     */
    public String startTiltDevice(String deviceId, String channelId, String direction) throws CoreException, org.apache.thrift.TException;

    /**
     * Stops tilting of a PTZ device.
     * 
     * (1) deviceId - ID of the device.
     * (2) channelId - channel of the device.
     * 
     * Returns the result of the operation.
     * "ok" on successful completion of the operation.
     * "error" on failure. There could be several reasons of failure e.g. device is offline or device doesn't
     * have Tilt feature.
     * 
     * @param deviceId
     * @param channelId
     */
    public String stopTiltDevice(String deviceId, String channelId) throws CoreException, org.apache.thrift.TException;

    /**
     * Starts to zoom a PTZ device in the specified direction.
     * 
     * (1) deviceId - ID of the device.
     * (2) channelId - channel of the device.
     * (3) direction - The direction of panning: "in" or "out".
     * 
     * Returns the result of the operation.
     * "ok" on successful completion of the operation.
     * "error" on failure. There could be several reasons of failure e.g. device is offline or device doesn't
     * have Zoom feature.
     * 
     * @param deviceId
     * @param channelId
     * @param direction
     */
    public String startZoomDevice(String deviceId, String channelId, String direction) throws CoreException, org.apache.thrift.TException;

    /**
     * Stops zooming of a PTZ device.
     * 
     * (1) deviceId - ID of the device.
     * (2) channelId - channel of the device.
     * 
     * Returns the result of the operation.
     * "ok" on successful completion of the operation.
     * "error" on failure. There could be several reasons of failure e.g. device is offline or device doesn't
     * have Zoom feature.
     * 
     * @param deviceId
     * @param channelId
     */
    public String stopZoomDevice(String deviceId, String channelId) throws CoreException, org.apache.thrift.TException;

    /**
     * Writes data to a data port of the specified device.
     * 
     * (1) deviceId - ID of the device.
     * (2) portNumber - The data port number.
     * (3) data - The data to be written out.
     * 
     * Returns the result of the operation.
     * "ok" on successful completion of the operation.
     * "error" on failure. There could be several reasons of failure e.g. device is offline or device doesn't
     * have the specified I/O control.
     * 
     * @param deviceId
     * @param portNumber
     * @param data
     */
    public String writeData(String deviceId, String portNumber, List<Byte> data) throws CoreException, org.apache.thrift.TException;

    /**
     * Reads data from a data port of the specified device.
     * 
     * (1) deviceId - ID of the device.
     * (2) portNumber - The data port number.
     * 
     * Returns the data read from the device's data port.
     * 
     * @param deviceId
     * @param portNumber
     */
    public List<Byte> readData(String deviceId, String portNumber) throws CoreException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getDeviceStatus(String deviceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDeviceStatus_call> resultHandler) throws org.apache.thrift.TException;

    public void getGPIO(String deviceId, String ioNumber, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getGPIO_call> resultHandler) throws org.apache.thrift.TException;

    public void setGPIO(String deviceId, String ioNumber, String value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setGPIO_call> resultHandler) throws org.apache.thrift.TException;

    public void startPanDevice(String deviceId, String channelId, String direction, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startPanDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void stopPanDevice(String deviceId, String channelId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopPanDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void startTiltDevice(String deviceId, String channelId, String direction, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startTiltDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void stopTiltDevice(String deviceId, String channelId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopTiltDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void startZoomDevice(String deviceId, String channelId, String direction, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.startZoomDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void stopZoomDevice(String deviceId, String channelId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.stopZoomDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void writeData(String deviceId, String portNumber, List<Byte> data, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.writeData_call> resultHandler) throws org.apache.thrift.TException;

    public void readData(String deviceId, String portNumber, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.readData_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String getDeviceStatus(String deviceId) throws CoreException, org.apache.thrift.TException
    {
      send_getDeviceStatus(deviceId);
      return recv_getDeviceStatus();
    }

    public void send_getDeviceStatus(String deviceId) throws org.apache.thrift.TException
    {
      getDeviceStatus_args args = new getDeviceStatus_args();
      args.setDeviceId(deviceId);
      sendBase("getDeviceStatus", args);
    }

    public String recv_getDeviceStatus() throws CoreException, org.apache.thrift.TException
    {
      getDeviceStatus_result result = new getDeviceStatus_result();
      receiveBase(result, "getDeviceStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDeviceStatus failed: unknown result");
    }

    public String getGPIO(String deviceId, String ioNumber) throws CoreException, org.apache.thrift.TException
    {
      send_getGPIO(deviceId, ioNumber);
      return recv_getGPIO();
    }

    public void send_getGPIO(String deviceId, String ioNumber) throws org.apache.thrift.TException
    {
      getGPIO_args args = new getGPIO_args();
      args.setDeviceId(deviceId);
      args.setIoNumber(ioNumber);
      sendBase("getGPIO", args);
    }

    public String recv_getGPIO() throws CoreException, org.apache.thrift.TException
    {
      getGPIO_result result = new getGPIO_result();
      receiveBase(result, "getGPIO");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGPIO failed: unknown result");
    }

    public String setGPIO(String deviceId, String ioNumber, String value) throws CoreException, org.apache.thrift.TException
    {
      send_setGPIO(deviceId, ioNumber, value);
      return recv_setGPIO();
    }

    public void send_setGPIO(String deviceId, String ioNumber, String value) throws org.apache.thrift.TException
    {
      setGPIO_args args = new setGPIO_args();
      args.setDeviceId(deviceId);
      args.setIoNumber(ioNumber);
      args.setValue(value);
      sendBase("setGPIO", args);
    }

    public String recv_setGPIO() throws CoreException, org.apache.thrift.TException
    {
      setGPIO_result result = new setGPIO_result();
      receiveBase(result, "setGPIO");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setGPIO failed: unknown result");
    }

    public String startPanDevice(String deviceId, String channelId, String direction) throws CoreException, org.apache.thrift.TException
    {
      send_startPanDevice(deviceId, channelId, direction);
      return recv_startPanDevice();
    }

    public void send_startPanDevice(String deviceId, String channelId, String direction) throws org.apache.thrift.TException
    {
      startPanDevice_args args = new startPanDevice_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setDirection(direction);
      sendBase("startPanDevice", args);
    }

    public String recv_startPanDevice() throws CoreException, org.apache.thrift.TException
    {
      startPanDevice_result result = new startPanDevice_result();
      receiveBase(result, "startPanDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startPanDevice failed: unknown result");
    }

    public String stopPanDevice(String deviceId, String channelId) throws CoreException, org.apache.thrift.TException
    {
      send_stopPanDevice(deviceId, channelId);
      return recv_stopPanDevice();
    }

    public void send_stopPanDevice(String deviceId, String channelId) throws org.apache.thrift.TException
    {
      stopPanDevice_args args = new stopPanDevice_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      sendBase("stopPanDevice", args);
    }

    public String recv_stopPanDevice() throws CoreException, org.apache.thrift.TException
    {
      stopPanDevice_result result = new stopPanDevice_result();
      receiveBase(result, "stopPanDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopPanDevice failed: unknown result");
    }

    public String startTiltDevice(String deviceId, String channelId, String direction) throws CoreException, org.apache.thrift.TException
    {
      send_startTiltDevice(deviceId, channelId, direction);
      return recv_startTiltDevice();
    }

    public void send_startTiltDevice(String deviceId, String channelId, String direction) throws org.apache.thrift.TException
    {
      startTiltDevice_args args = new startTiltDevice_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setDirection(direction);
      sendBase("startTiltDevice", args);
    }

    public String recv_startTiltDevice() throws CoreException, org.apache.thrift.TException
    {
      startTiltDevice_result result = new startTiltDevice_result();
      receiveBase(result, "startTiltDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startTiltDevice failed: unknown result");
    }

    public String stopTiltDevice(String deviceId, String channelId) throws CoreException, org.apache.thrift.TException
    {
      send_stopTiltDevice(deviceId, channelId);
      return recv_stopTiltDevice();
    }

    public void send_stopTiltDevice(String deviceId, String channelId) throws org.apache.thrift.TException
    {
      stopTiltDevice_args args = new stopTiltDevice_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      sendBase("stopTiltDevice", args);
    }

    public String recv_stopTiltDevice() throws CoreException, org.apache.thrift.TException
    {
      stopTiltDevice_result result = new stopTiltDevice_result();
      receiveBase(result, "stopTiltDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopTiltDevice failed: unknown result");
    }

    public String startZoomDevice(String deviceId, String channelId, String direction) throws CoreException, org.apache.thrift.TException
    {
      send_startZoomDevice(deviceId, channelId, direction);
      return recv_startZoomDevice();
    }

    public void send_startZoomDevice(String deviceId, String channelId, String direction) throws org.apache.thrift.TException
    {
      startZoomDevice_args args = new startZoomDevice_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setDirection(direction);
      sendBase("startZoomDevice", args);
    }

    public String recv_startZoomDevice() throws CoreException, org.apache.thrift.TException
    {
      startZoomDevice_result result = new startZoomDevice_result();
      receiveBase(result, "startZoomDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startZoomDevice failed: unknown result");
    }

    public String stopZoomDevice(String deviceId, String channelId) throws CoreException, org.apache.thrift.TException
    {
      send_stopZoomDevice(deviceId, channelId);
      return recv_stopZoomDevice();
    }

    public void send_stopZoomDevice(String deviceId, String channelId) throws org.apache.thrift.TException
    {
      stopZoomDevice_args args = new stopZoomDevice_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      sendBase("stopZoomDevice", args);
    }

    public String recv_stopZoomDevice() throws CoreException, org.apache.thrift.TException
    {
      stopZoomDevice_result result = new stopZoomDevice_result();
      receiveBase(result, "stopZoomDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopZoomDevice failed: unknown result");
    }

    public String writeData(String deviceId, String portNumber, List<Byte> data) throws CoreException, org.apache.thrift.TException
    {
      send_writeData(deviceId, portNumber, data);
      return recv_writeData();
    }

    public void send_writeData(String deviceId, String portNumber, List<Byte> data) throws org.apache.thrift.TException
    {
      writeData_args args = new writeData_args();
      args.setDeviceId(deviceId);
      args.setPortNumber(portNumber);
      args.setData(data);
      sendBase("writeData", args);
    }

    public String recv_writeData() throws CoreException, org.apache.thrift.TException
    {
      writeData_result result = new writeData_result();
      receiveBase(result, "writeData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeData failed: unknown result");
    }

    public List<Byte> readData(String deviceId, String portNumber) throws CoreException, org.apache.thrift.TException
    {
      send_readData(deviceId, portNumber);
      return recv_readData();
    }

    public void send_readData(String deviceId, String portNumber) throws org.apache.thrift.TException
    {
      readData_args args = new readData_args();
      args.setDeviceId(deviceId);
      args.setPortNumber(portNumber);
      sendBase("readData", args);
    }

    public List<Byte> recv_readData() throws CoreException, org.apache.thrift.TException
    {
      readData_result result = new readData_result();
      receiveBase(result, "readData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readData failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getDeviceStatus(String deviceId, org.apache.thrift.async.AsyncMethodCallback<getDeviceStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDeviceStatus_call method_call = new getDeviceStatus_call(deviceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDeviceStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      public getDeviceStatus_call(String deviceId, org.apache.thrift.async.AsyncMethodCallback<getDeviceStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDeviceStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDeviceStatus_args args = new getDeviceStatus_args();
        args.setDeviceId(deviceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDeviceStatus();
      }
    }

    public void getGPIO(String deviceId, String ioNumber, org.apache.thrift.async.AsyncMethodCallback<getGPIO_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGPIO_call method_call = new getGPIO_call(deviceId, ioNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGPIO_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String ioNumber;
      public getGPIO_call(String deviceId, String ioNumber, org.apache.thrift.async.AsyncMethodCallback<getGPIO_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.ioNumber = ioNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGPIO", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGPIO_args args = new getGPIO_args();
        args.setDeviceId(deviceId);
        args.setIoNumber(ioNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGPIO();
      }
    }

    public void setGPIO(String deviceId, String ioNumber, String value, org.apache.thrift.async.AsyncMethodCallback<setGPIO_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setGPIO_call method_call = new setGPIO_call(deviceId, ioNumber, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setGPIO_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String ioNumber;
      private String value;
      public setGPIO_call(String deviceId, String ioNumber, String value, org.apache.thrift.async.AsyncMethodCallback<setGPIO_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.ioNumber = ioNumber;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setGPIO", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setGPIO_args args = new setGPIO_args();
        args.setDeviceId(deviceId);
        args.setIoNumber(ioNumber);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setGPIO();
      }
    }

    public void startPanDevice(String deviceId, String channelId, String direction, org.apache.thrift.async.AsyncMethodCallback<startPanDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startPanDevice_call method_call = new startPanDevice_call(deviceId, channelId, direction, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startPanDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String channelId;
      private String direction;
      public startPanDevice_call(String deviceId, String channelId, String direction, org.apache.thrift.async.AsyncMethodCallback<startPanDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.direction = direction;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startPanDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startPanDevice_args args = new startPanDevice_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setDirection(direction);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startPanDevice();
      }
    }

    public void stopPanDevice(String deviceId, String channelId, org.apache.thrift.async.AsyncMethodCallback<stopPanDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopPanDevice_call method_call = new stopPanDevice_call(deviceId, channelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopPanDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String channelId;
      public stopPanDevice_call(String deviceId, String channelId, org.apache.thrift.async.AsyncMethodCallback<stopPanDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopPanDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopPanDevice_args args = new stopPanDevice_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopPanDevice();
      }
    }

    public void startTiltDevice(String deviceId, String channelId, String direction, org.apache.thrift.async.AsyncMethodCallback<startTiltDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startTiltDevice_call method_call = new startTiltDevice_call(deviceId, channelId, direction, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startTiltDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String channelId;
      private String direction;
      public startTiltDevice_call(String deviceId, String channelId, String direction, org.apache.thrift.async.AsyncMethodCallback<startTiltDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.direction = direction;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startTiltDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startTiltDevice_args args = new startTiltDevice_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setDirection(direction);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startTiltDevice();
      }
    }

    public void stopTiltDevice(String deviceId, String channelId, org.apache.thrift.async.AsyncMethodCallback<stopTiltDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopTiltDevice_call method_call = new stopTiltDevice_call(deviceId, channelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopTiltDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String channelId;
      public stopTiltDevice_call(String deviceId, String channelId, org.apache.thrift.async.AsyncMethodCallback<stopTiltDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopTiltDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopTiltDevice_args args = new stopTiltDevice_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopTiltDevice();
      }
    }

    public void startZoomDevice(String deviceId, String channelId, String direction, org.apache.thrift.async.AsyncMethodCallback<startZoomDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startZoomDevice_call method_call = new startZoomDevice_call(deviceId, channelId, direction, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startZoomDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String channelId;
      private String direction;
      public startZoomDevice_call(String deviceId, String channelId, String direction, org.apache.thrift.async.AsyncMethodCallback<startZoomDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.direction = direction;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startZoomDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startZoomDevice_args args = new startZoomDevice_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setDirection(direction);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startZoomDevice();
      }
    }

    public void stopZoomDevice(String deviceId, String channelId, org.apache.thrift.async.AsyncMethodCallback<stopZoomDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopZoomDevice_call method_call = new stopZoomDevice_call(deviceId, channelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopZoomDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String channelId;
      public stopZoomDevice_call(String deviceId, String channelId, org.apache.thrift.async.AsyncMethodCallback<stopZoomDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopZoomDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopZoomDevice_args args = new stopZoomDevice_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopZoomDevice();
      }
    }

    public void writeData(String deviceId, String portNumber, List<Byte> data, org.apache.thrift.async.AsyncMethodCallback<writeData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeData_call method_call = new writeData_call(deviceId, portNumber, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String portNumber;
      private List<Byte> data;
      public writeData_call(String deviceId, String portNumber, List<Byte> data, org.apache.thrift.async.AsyncMethodCallback<writeData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.portNumber = portNumber;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeData_args args = new writeData_args();
        args.setDeviceId(deviceId);
        args.setPortNumber(portNumber);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeData();
      }
    }

    public void readData(String deviceId, String portNumber, org.apache.thrift.async.AsyncMethodCallback<readData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readData_call method_call = new readData_call(deviceId, portNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String portNumber;
      public readData_call(String deviceId, String portNumber, org.apache.thrift.async.AsyncMethodCallback<readData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.portNumber = portNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readData_args args = new readData_args();
        args.setDeviceId(deviceId);
        args.setPortNumber(portNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Byte> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getDeviceStatus", new getDeviceStatus());
      processMap.put("getGPIO", new getGPIO());
      processMap.put("setGPIO", new setGPIO());
      processMap.put("startPanDevice", new startPanDevice());
      processMap.put("stopPanDevice", new stopPanDevice());
      processMap.put("startTiltDevice", new startTiltDevice());
      processMap.put("stopTiltDevice", new stopTiltDevice());
      processMap.put("startZoomDevice", new startZoomDevice());
      processMap.put("stopZoomDevice", new stopZoomDevice());
      processMap.put("writeData", new writeData());
      processMap.put("readData", new readData());
      return processMap;
    }

    private static class getDeviceStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDeviceStatus_args> {
      public getDeviceStatus() {
        super("getDeviceStatus");
      }

      protected getDeviceStatus_args getEmptyArgsInstance() {
        return new getDeviceStatus_args();
      }

      protected getDeviceStatus_result getResult(I iface, getDeviceStatus_args args) throws org.apache.thrift.TException {
        getDeviceStatus_result result = new getDeviceStatus_result();
        try {
          result.success = iface.getDeviceStatus(args.deviceId);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class getGPIO<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGPIO_args> {
      public getGPIO() {
        super("getGPIO");
      }

      protected getGPIO_args getEmptyArgsInstance() {
        return new getGPIO_args();
      }

      protected getGPIO_result getResult(I iface, getGPIO_args args) throws org.apache.thrift.TException {
        getGPIO_result result = new getGPIO_result();
        try {
          result.success = iface.getGPIO(args.deviceId, args.ioNumber);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class setGPIO<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setGPIO_args> {
      public setGPIO() {
        super("setGPIO");
      }

      protected setGPIO_args getEmptyArgsInstance() {
        return new setGPIO_args();
      }

      protected setGPIO_result getResult(I iface, setGPIO_args args) throws org.apache.thrift.TException {
        setGPIO_result result = new setGPIO_result();
        try {
          result.success = iface.setGPIO(args.deviceId, args.ioNumber, args.value);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class startPanDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startPanDevice_args> {
      public startPanDevice() {
        super("startPanDevice");
      }

      protected startPanDevice_args getEmptyArgsInstance() {
        return new startPanDevice_args();
      }

      protected startPanDevice_result getResult(I iface, startPanDevice_args args) throws org.apache.thrift.TException {
        startPanDevice_result result = new startPanDevice_result();
        try {
          result.success = iface.startPanDevice(args.deviceId, args.channelId, args.direction);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class stopPanDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopPanDevice_args> {
      public stopPanDevice() {
        super("stopPanDevice");
      }

      protected stopPanDevice_args getEmptyArgsInstance() {
        return new stopPanDevice_args();
      }

      protected stopPanDevice_result getResult(I iface, stopPanDevice_args args) throws org.apache.thrift.TException {
        stopPanDevice_result result = new stopPanDevice_result();
        try {
          result.success = iface.stopPanDevice(args.deviceId, args.channelId);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class startTiltDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startTiltDevice_args> {
      public startTiltDevice() {
        super("startTiltDevice");
      }

      protected startTiltDevice_args getEmptyArgsInstance() {
        return new startTiltDevice_args();
      }

      protected startTiltDevice_result getResult(I iface, startTiltDevice_args args) throws org.apache.thrift.TException {
        startTiltDevice_result result = new startTiltDevice_result();
        try {
          result.success = iface.startTiltDevice(args.deviceId, args.channelId, args.direction);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class stopTiltDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopTiltDevice_args> {
      public stopTiltDevice() {
        super("stopTiltDevice");
      }

      protected stopTiltDevice_args getEmptyArgsInstance() {
        return new stopTiltDevice_args();
      }

      protected stopTiltDevice_result getResult(I iface, stopTiltDevice_args args) throws org.apache.thrift.TException {
        stopTiltDevice_result result = new stopTiltDevice_result();
        try {
          result.success = iface.stopTiltDevice(args.deviceId, args.channelId);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class startZoomDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startZoomDevice_args> {
      public startZoomDevice() {
        super("startZoomDevice");
      }

      protected startZoomDevice_args getEmptyArgsInstance() {
        return new startZoomDevice_args();
      }

      protected startZoomDevice_result getResult(I iface, startZoomDevice_args args) throws org.apache.thrift.TException {
        startZoomDevice_result result = new startZoomDevice_result();
        try {
          result.success = iface.startZoomDevice(args.deviceId, args.channelId, args.direction);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class stopZoomDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopZoomDevice_args> {
      public stopZoomDevice() {
        super("stopZoomDevice");
      }

      protected stopZoomDevice_args getEmptyArgsInstance() {
        return new stopZoomDevice_args();
      }

      protected stopZoomDevice_result getResult(I iface, stopZoomDevice_args args) throws org.apache.thrift.TException {
        stopZoomDevice_result result = new stopZoomDevice_result();
        try {
          result.success = iface.stopZoomDevice(args.deviceId, args.channelId);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class writeData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeData_args> {
      public writeData() {
        super("writeData");
      }

      protected writeData_args getEmptyArgsInstance() {
        return new writeData_args();
      }

      protected writeData_result getResult(I iface, writeData_args args) throws org.apache.thrift.TException {
        writeData_result result = new writeData_result();
        try {
          result.success = iface.writeData(args.deviceId, args.portNumber, args.data);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class readData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readData_args> {
      public readData() {
        super("readData");
      }

      protected readData_args getEmptyArgsInstance() {
        return new readData_args();
      }

      protected readData_result getResult(I iface, readData_args args) throws org.apache.thrift.TException {
        readData_result result = new readData_result();
        try {
          result.success = iface.readData(args.deviceId, args.portNumber);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

  }

  public static class getDeviceStatus_args implements org.apache.thrift.TBase<getDeviceStatus_args, getDeviceStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDeviceStatus_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDeviceStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDeviceStatus_argsTupleSchemeFactory());
    }

    public String deviceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDeviceStatus_args.class, metaDataMap);
    }

    public getDeviceStatus_args() {
    }

    public getDeviceStatus_args(
      String deviceId)
    {
      this();
      this.deviceId = deviceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDeviceStatus_args(getDeviceStatus_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
    }

    public getDeviceStatus_args deepCopy() {
      return new getDeviceStatus_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public getDeviceStatus_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDeviceStatus_args)
        return this.equals((getDeviceStatus_args)that);
      return false;
    }

    public boolean equals(getDeviceStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDeviceStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDeviceStatus_args typedOther = (getDeviceStatus_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDeviceStatus_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDeviceStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getDeviceStatus_argsStandardScheme getScheme() {
        return new getDeviceStatus_argsStandardScheme();
      }
    }

    private static class getDeviceStatus_argsStandardScheme extends StandardScheme<getDeviceStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDeviceStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDeviceStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDeviceStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getDeviceStatus_argsTupleScheme getScheme() {
        return new getDeviceStatus_argsTupleScheme();
      }
    }

    private static class getDeviceStatus_argsTupleScheme extends TupleScheme<getDeviceStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDeviceStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDeviceStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
      }
    }

  }

  public static class getDeviceStatus_result implements org.apache.thrift.TBase<getDeviceStatus_result, getDeviceStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDeviceStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDeviceStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDeviceStatus_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDeviceStatus_result.class, metaDataMap);
    }

    public getDeviceStatus_result() {
    }

    public getDeviceStatus_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDeviceStatus_result(getDeviceStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public getDeviceStatus_result deepCopy() {
      return new getDeviceStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getDeviceStatus_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public getDeviceStatus_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDeviceStatus_result)
        return this.equals((getDeviceStatus_result)that);
      return false;
    }

    public boolean equals(getDeviceStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDeviceStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDeviceStatus_result typedOther = (getDeviceStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDeviceStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDeviceStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getDeviceStatus_resultStandardScheme getScheme() {
        return new getDeviceStatus_resultStandardScheme();
      }
    }

    private static class getDeviceStatus_resultStandardScheme extends StandardScheme<getDeviceStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDeviceStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDeviceStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDeviceStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getDeviceStatus_resultTupleScheme getScheme() {
        return new getDeviceStatus_resultTupleScheme();
      }
    }

    private static class getDeviceStatus_resultTupleScheme extends TupleScheme<getDeviceStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDeviceStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDeviceStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class getGPIO_args implements org.apache.thrift.TBase<getGPIO_args, getGPIO_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGPIO_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IO_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ioNumber", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGPIO_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGPIO_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String ioNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      IO_NUMBER((short)2, "ioNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // IO_NUMBER
            return IO_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IO_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ioNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGPIO_args.class, metaDataMap);
    }

    public getGPIO_args() {
    }

    public getGPIO_args(
      String deviceId,
      String ioNumber)
    {
      this();
      this.deviceId = deviceId;
      this.ioNumber = ioNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGPIO_args(getGPIO_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetIoNumber()) {
        this.ioNumber = other.ioNumber;
      }
    }

    public getGPIO_args deepCopy() {
      return new getGPIO_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.ioNumber = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public getGPIO_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getIoNumber() {
      return this.ioNumber;
    }

    public getGPIO_args setIoNumber(String ioNumber) {
      this.ioNumber = ioNumber;
      return this;
    }

    public void unsetIoNumber() {
      this.ioNumber = null;
    }

    /** Returns true if field ioNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetIoNumber() {
      return this.ioNumber != null;
    }

    public void setIoNumberIsSet(boolean value) {
      if (!value) {
        this.ioNumber = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case IO_NUMBER:
        if (value == null) {
          unsetIoNumber();
        } else {
          setIoNumber((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case IO_NUMBER:
        return getIoNumber();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case IO_NUMBER:
        return isSetIoNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGPIO_args)
        return this.equals((getGPIO_args)that);
      return false;
    }

    public boolean equals(getGPIO_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_ioNumber = true && this.isSetIoNumber();
      boolean that_present_ioNumber = true && that.isSetIoNumber();
      if (this_present_ioNumber || that_present_ioNumber) {
        if (!(this_present_ioNumber && that_present_ioNumber))
          return false;
        if (!this.ioNumber.equals(that.ioNumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGPIO_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGPIO_args typedOther = (getGPIO_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIoNumber()).compareTo(typedOther.isSetIoNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioNumber, typedOther.ioNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGPIO_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioNumber:");
      if (this.ioNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.ioNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGPIO_argsStandardSchemeFactory implements SchemeFactory {
      public getGPIO_argsStandardScheme getScheme() {
        return new getGPIO_argsStandardScheme();
      }
    }

    private static class getGPIO_argsStandardScheme extends StandardScheme<getGPIO_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGPIO_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IO_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ioNumber = iprot.readString();
                struct.setIoNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGPIO_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.ioNumber != null) {
          oprot.writeFieldBegin(IO_NUMBER_FIELD_DESC);
          oprot.writeString(struct.ioNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGPIO_argsTupleSchemeFactory implements SchemeFactory {
      public getGPIO_argsTupleScheme getScheme() {
        return new getGPIO_argsTupleScheme();
      }
    }

    private static class getGPIO_argsTupleScheme extends TupleScheme<getGPIO_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGPIO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetIoNumber()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetIoNumber()) {
          oprot.writeString(struct.ioNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGPIO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ioNumber = iprot.readString();
          struct.setIoNumberIsSet(true);
        }
      }
    }

  }

  public static class getGPIO_result implements org.apache.thrift.TBase<getGPIO_result, getGPIO_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGPIO_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGPIO_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGPIO_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGPIO_result.class, metaDataMap);
    }

    public getGPIO_result() {
    }

    public getGPIO_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGPIO_result(getGPIO_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public getGPIO_result deepCopy() {
      return new getGPIO_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getGPIO_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public getGPIO_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGPIO_result)
        return this.equals((getGPIO_result)that);
      return false;
    }

    public boolean equals(getGPIO_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGPIO_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGPIO_result typedOther = (getGPIO_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGPIO_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGPIO_resultStandardSchemeFactory implements SchemeFactory {
      public getGPIO_resultStandardScheme getScheme() {
        return new getGPIO_resultStandardScheme();
      }
    }

    private static class getGPIO_resultStandardScheme extends StandardScheme<getGPIO_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGPIO_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGPIO_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGPIO_resultTupleSchemeFactory implements SchemeFactory {
      public getGPIO_resultTupleScheme getScheme() {
        return new getGPIO_resultTupleScheme();
      }
    }

    private static class getGPIO_resultTupleScheme extends TupleScheme<getGPIO_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGPIO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGPIO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class setGPIO_args implements org.apache.thrift.TBase<setGPIO_args, setGPIO_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setGPIO_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IO_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ioNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setGPIO_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setGPIO_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String ioNumber; // required
    public String value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      IO_NUMBER((short)2, "ioNumber"),
      VALUE((short)3, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // IO_NUMBER
            return IO_NUMBER;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IO_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ioNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setGPIO_args.class, metaDataMap);
    }

    public setGPIO_args() {
    }

    public setGPIO_args(
      String deviceId,
      String ioNumber,
      String value)
    {
      this();
      this.deviceId = deviceId;
      this.ioNumber = ioNumber;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setGPIO_args(setGPIO_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetIoNumber()) {
        this.ioNumber = other.ioNumber;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public setGPIO_args deepCopy() {
      return new setGPIO_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.ioNumber = null;
      this.value = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public setGPIO_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getIoNumber() {
      return this.ioNumber;
    }

    public setGPIO_args setIoNumber(String ioNumber) {
      this.ioNumber = ioNumber;
      return this;
    }

    public void unsetIoNumber() {
      this.ioNumber = null;
    }

    /** Returns true if field ioNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetIoNumber() {
      return this.ioNumber != null;
    }

    public void setIoNumberIsSet(boolean value) {
      if (!value) {
        this.ioNumber = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public setGPIO_args setValue(String value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case IO_NUMBER:
        if (value == null) {
          unsetIoNumber();
        } else {
          setIoNumber((String)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case IO_NUMBER:
        return getIoNumber();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case IO_NUMBER:
        return isSetIoNumber();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setGPIO_args)
        return this.equals((setGPIO_args)that);
      return false;
    }

    public boolean equals(setGPIO_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_ioNumber = true && this.isSetIoNumber();
      boolean that_present_ioNumber = true && that.isSetIoNumber();
      if (this_present_ioNumber || that_present_ioNumber) {
        if (!(this_present_ioNumber && that_present_ioNumber))
          return false;
        if (!this.ioNumber.equals(that.ioNumber))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setGPIO_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setGPIO_args typedOther = (setGPIO_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIoNumber()).compareTo(typedOther.isSetIoNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIoNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ioNumber, typedOther.ioNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setGPIO_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ioNumber:");
      if (this.ioNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.ioNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setGPIO_argsStandardSchemeFactory implements SchemeFactory {
      public setGPIO_argsStandardScheme getScheme() {
        return new setGPIO_argsStandardScheme();
      }
    }

    private static class setGPIO_argsStandardScheme extends StandardScheme<setGPIO_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setGPIO_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IO_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ioNumber = iprot.readString();
                struct.setIoNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.value = iprot.readString();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setGPIO_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.ioNumber != null) {
          oprot.writeFieldBegin(IO_NUMBER_FIELD_DESC);
          oprot.writeString(struct.ioNumber);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          oprot.writeString(struct.value);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setGPIO_argsTupleSchemeFactory implements SchemeFactory {
      public setGPIO_argsTupleScheme getScheme() {
        return new setGPIO_argsTupleScheme();
      }
    }

    private static class setGPIO_argsTupleScheme extends TupleScheme<setGPIO_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setGPIO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetIoNumber()) {
          optionals.set(1);
        }
        if (struct.isSetValue()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetIoNumber()) {
          oprot.writeString(struct.ioNumber);
        }
        if (struct.isSetValue()) {
          oprot.writeString(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setGPIO_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ioNumber = iprot.readString();
          struct.setIoNumberIsSet(true);
        }
        if (incoming.get(2)) {
          struct.value = iprot.readString();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class setGPIO_result implements org.apache.thrift.TBase<setGPIO_result, setGPIO_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setGPIO_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setGPIO_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setGPIO_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setGPIO_result.class, metaDataMap);
    }

    public setGPIO_result() {
    }

    public setGPIO_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setGPIO_result(setGPIO_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public setGPIO_result deepCopy() {
      return new setGPIO_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public setGPIO_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public setGPIO_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setGPIO_result)
        return this.equals((setGPIO_result)that);
      return false;
    }

    public boolean equals(setGPIO_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setGPIO_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setGPIO_result typedOther = (setGPIO_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setGPIO_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setGPIO_resultStandardSchemeFactory implements SchemeFactory {
      public setGPIO_resultStandardScheme getScheme() {
        return new setGPIO_resultStandardScheme();
      }
    }

    private static class setGPIO_resultStandardScheme extends StandardScheme<setGPIO_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setGPIO_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setGPIO_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setGPIO_resultTupleSchemeFactory implements SchemeFactory {
      public setGPIO_resultTupleScheme getScheme() {
        return new setGPIO_resultTupleScheme();
      }
    }

    private static class setGPIO_resultTupleScheme extends TupleScheme<setGPIO_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setGPIO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setGPIO_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class startPanDevice_args implements org.apache.thrift.TBase<startPanDevice_args, startPanDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startPanDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startPanDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startPanDevice_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String channelId; // required
    public String direction; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId"),
      DIRECTION((short)3, "direction");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          case 3: // DIRECTION
            return DIRECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startPanDevice_args.class, metaDataMap);
    }

    public startPanDevice_args() {
    }

    public startPanDevice_args(
      String deviceId,
      String channelId,
      String direction)
    {
      this();
      this.deviceId = deviceId;
      this.channelId = channelId;
      this.direction = direction;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startPanDevice_args(startPanDevice_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetDirection()) {
        this.direction = other.direction;
      }
    }

    public startPanDevice_args deepCopy() {
      return new startPanDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.channelId = null;
      this.direction = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public startPanDevice_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public startPanDevice_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getDirection() {
      return this.direction;
    }

    public startPanDevice_args setDirection(String direction) {
      this.direction = direction;
      return this;
    }

    public void unsetDirection() {
      this.direction = null;
    }

    /** Returns true if field direction is set (has been assigned a value) and false otherwise */
    public boolean isSetDirection() {
      return this.direction != null;
    }

    public void setDirectionIsSet(boolean value) {
      if (!value) {
        this.direction = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case DIRECTION:
        if (value == null) {
          unsetDirection();
        } else {
          setDirection((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      case DIRECTION:
        return getDirection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case DIRECTION:
        return isSetDirection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startPanDevice_args)
        return this.equals((startPanDevice_args)that);
      return false;
    }

    public boolean equals(startPanDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_direction = true && this.isSetDirection();
      boolean that_present_direction = true && that.isSetDirection();
      if (this_present_direction || that_present_direction) {
        if (!(this_present_direction && that_present_direction))
          return false;
        if (!this.direction.equals(that.direction))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startPanDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startPanDevice_args typedOther = (startPanDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirection()).compareTo(typedOther.isSetDirection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, typedOther.direction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startPanDevice_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startPanDevice_argsStandardSchemeFactory implements SchemeFactory {
      public startPanDevice_argsStandardScheme getScheme() {
        return new startPanDevice_argsStandardScheme();
      }
    }

    private static class startPanDevice_argsStandardScheme extends StandardScheme<startPanDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startPanDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DIRECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.direction = iprot.readString();
                struct.setDirectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startPanDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.direction != null) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeString(struct.direction);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startPanDevice_argsTupleSchemeFactory implements SchemeFactory {
      public startPanDevice_argsTupleScheme getScheme() {
        return new startPanDevice_argsTupleScheme();
      }
    }

    private static class startPanDevice_argsTupleScheme extends TupleScheme<startPanDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startPanDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        if (struct.isSetDirection()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetDirection()) {
          oprot.writeString(struct.direction);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startPanDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.direction = iprot.readString();
          struct.setDirectionIsSet(true);
        }
      }
    }

  }

  public static class startPanDevice_result implements org.apache.thrift.TBase<startPanDevice_result, startPanDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startPanDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startPanDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startPanDevice_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startPanDevice_result.class, metaDataMap);
    }

    public startPanDevice_result() {
    }

    public startPanDevice_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startPanDevice_result(startPanDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public startPanDevice_result deepCopy() {
      return new startPanDevice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public startPanDevice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public startPanDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startPanDevice_result)
        return this.equals((startPanDevice_result)that);
      return false;
    }

    public boolean equals(startPanDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startPanDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startPanDevice_result typedOther = (startPanDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startPanDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startPanDevice_resultStandardSchemeFactory implements SchemeFactory {
      public startPanDevice_resultStandardScheme getScheme() {
        return new startPanDevice_resultStandardScheme();
      }
    }

    private static class startPanDevice_resultStandardScheme extends StandardScheme<startPanDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startPanDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startPanDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startPanDevice_resultTupleSchemeFactory implements SchemeFactory {
      public startPanDevice_resultTupleScheme getScheme() {
        return new startPanDevice_resultTupleScheme();
      }
    }

    private static class startPanDevice_resultTupleScheme extends TupleScheme<startPanDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startPanDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startPanDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class stopPanDevice_args implements org.apache.thrift.TBase<stopPanDevice_args, stopPanDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopPanDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopPanDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopPanDevice_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String channelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopPanDevice_args.class, metaDataMap);
    }

    public stopPanDevice_args() {
    }

    public stopPanDevice_args(
      String deviceId,
      String channelId)
    {
      this();
      this.deviceId = deviceId;
      this.channelId = channelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopPanDevice_args(stopPanDevice_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
    }

    public stopPanDevice_args deepCopy() {
      return new stopPanDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.channelId = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public stopPanDevice_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public stopPanDevice_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopPanDevice_args)
        return this.equals((stopPanDevice_args)that);
      return false;
    }

    public boolean equals(stopPanDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopPanDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopPanDevice_args typedOther = (stopPanDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopPanDevice_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopPanDevice_argsStandardSchemeFactory implements SchemeFactory {
      public stopPanDevice_argsStandardScheme getScheme() {
        return new stopPanDevice_argsStandardScheme();
      }
    }

    private static class stopPanDevice_argsStandardScheme extends StandardScheme<stopPanDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopPanDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopPanDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopPanDevice_argsTupleSchemeFactory implements SchemeFactory {
      public stopPanDevice_argsTupleScheme getScheme() {
        return new stopPanDevice_argsTupleScheme();
      }
    }

    private static class stopPanDevice_argsTupleScheme extends TupleScheme<stopPanDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopPanDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopPanDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
      }
    }

  }

  public static class stopPanDevice_result implements org.apache.thrift.TBase<stopPanDevice_result, stopPanDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopPanDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopPanDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopPanDevice_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopPanDevice_result.class, metaDataMap);
    }

    public stopPanDevice_result() {
    }

    public stopPanDevice_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopPanDevice_result(stopPanDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public stopPanDevice_result deepCopy() {
      return new stopPanDevice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public stopPanDevice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public stopPanDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopPanDevice_result)
        return this.equals((stopPanDevice_result)that);
      return false;
    }

    public boolean equals(stopPanDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopPanDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopPanDevice_result typedOther = (stopPanDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopPanDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopPanDevice_resultStandardSchemeFactory implements SchemeFactory {
      public stopPanDevice_resultStandardScheme getScheme() {
        return new stopPanDevice_resultStandardScheme();
      }
    }

    private static class stopPanDevice_resultStandardScheme extends StandardScheme<stopPanDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopPanDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopPanDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopPanDevice_resultTupleSchemeFactory implements SchemeFactory {
      public stopPanDevice_resultTupleScheme getScheme() {
        return new stopPanDevice_resultTupleScheme();
      }
    }

    private static class stopPanDevice_resultTupleScheme extends TupleScheme<stopPanDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopPanDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopPanDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class startTiltDevice_args implements org.apache.thrift.TBase<startTiltDevice_args, startTiltDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startTiltDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startTiltDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startTiltDevice_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String channelId; // required
    public String direction; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId"),
      DIRECTION((short)3, "direction");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          case 3: // DIRECTION
            return DIRECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startTiltDevice_args.class, metaDataMap);
    }

    public startTiltDevice_args() {
    }

    public startTiltDevice_args(
      String deviceId,
      String channelId,
      String direction)
    {
      this();
      this.deviceId = deviceId;
      this.channelId = channelId;
      this.direction = direction;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startTiltDevice_args(startTiltDevice_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetDirection()) {
        this.direction = other.direction;
      }
    }

    public startTiltDevice_args deepCopy() {
      return new startTiltDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.channelId = null;
      this.direction = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public startTiltDevice_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public startTiltDevice_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getDirection() {
      return this.direction;
    }

    public startTiltDevice_args setDirection(String direction) {
      this.direction = direction;
      return this;
    }

    public void unsetDirection() {
      this.direction = null;
    }

    /** Returns true if field direction is set (has been assigned a value) and false otherwise */
    public boolean isSetDirection() {
      return this.direction != null;
    }

    public void setDirectionIsSet(boolean value) {
      if (!value) {
        this.direction = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case DIRECTION:
        if (value == null) {
          unsetDirection();
        } else {
          setDirection((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      case DIRECTION:
        return getDirection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case DIRECTION:
        return isSetDirection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startTiltDevice_args)
        return this.equals((startTiltDevice_args)that);
      return false;
    }

    public boolean equals(startTiltDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_direction = true && this.isSetDirection();
      boolean that_present_direction = true && that.isSetDirection();
      if (this_present_direction || that_present_direction) {
        if (!(this_present_direction && that_present_direction))
          return false;
        if (!this.direction.equals(that.direction))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startTiltDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startTiltDevice_args typedOther = (startTiltDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirection()).compareTo(typedOther.isSetDirection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, typedOther.direction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startTiltDevice_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startTiltDevice_argsStandardSchemeFactory implements SchemeFactory {
      public startTiltDevice_argsStandardScheme getScheme() {
        return new startTiltDevice_argsStandardScheme();
      }
    }

    private static class startTiltDevice_argsStandardScheme extends StandardScheme<startTiltDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startTiltDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DIRECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.direction = iprot.readString();
                struct.setDirectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startTiltDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.direction != null) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeString(struct.direction);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startTiltDevice_argsTupleSchemeFactory implements SchemeFactory {
      public startTiltDevice_argsTupleScheme getScheme() {
        return new startTiltDevice_argsTupleScheme();
      }
    }

    private static class startTiltDevice_argsTupleScheme extends TupleScheme<startTiltDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startTiltDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        if (struct.isSetDirection()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetDirection()) {
          oprot.writeString(struct.direction);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startTiltDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.direction = iprot.readString();
          struct.setDirectionIsSet(true);
        }
      }
    }

  }

  public static class startTiltDevice_result implements org.apache.thrift.TBase<startTiltDevice_result, startTiltDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startTiltDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startTiltDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startTiltDevice_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startTiltDevice_result.class, metaDataMap);
    }

    public startTiltDevice_result() {
    }

    public startTiltDevice_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startTiltDevice_result(startTiltDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public startTiltDevice_result deepCopy() {
      return new startTiltDevice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public startTiltDevice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public startTiltDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startTiltDevice_result)
        return this.equals((startTiltDevice_result)that);
      return false;
    }

    public boolean equals(startTiltDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startTiltDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startTiltDevice_result typedOther = (startTiltDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startTiltDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startTiltDevice_resultStandardSchemeFactory implements SchemeFactory {
      public startTiltDevice_resultStandardScheme getScheme() {
        return new startTiltDevice_resultStandardScheme();
      }
    }

    private static class startTiltDevice_resultStandardScheme extends StandardScheme<startTiltDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startTiltDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startTiltDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startTiltDevice_resultTupleSchemeFactory implements SchemeFactory {
      public startTiltDevice_resultTupleScheme getScheme() {
        return new startTiltDevice_resultTupleScheme();
      }
    }

    private static class startTiltDevice_resultTupleScheme extends TupleScheme<startTiltDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startTiltDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startTiltDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class stopTiltDevice_args implements org.apache.thrift.TBase<stopTiltDevice_args, stopTiltDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopTiltDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopTiltDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopTiltDevice_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String channelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopTiltDevice_args.class, metaDataMap);
    }

    public stopTiltDevice_args() {
    }

    public stopTiltDevice_args(
      String deviceId,
      String channelId)
    {
      this();
      this.deviceId = deviceId;
      this.channelId = channelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopTiltDevice_args(stopTiltDevice_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
    }

    public stopTiltDevice_args deepCopy() {
      return new stopTiltDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.channelId = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public stopTiltDevice_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public stopTiltDevice_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopTiltDevice_args)
        return this.equals((stopTiltDevice_args)that);
      return false;
    }

    public boolean equals(stopTiltDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopTiltDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopTiltDevice_args typedOther = (stopTiltDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopTiltDevice_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopTiltDevice_argsStandardSchemeFactory implements SchemeFactory {
      public stopTiltDevice_argsStandardScheme getScheme() {
        return new stopTiltDevice_argsStandardScheme();
      }
    }

    private static class stopTiltDevice_argsStandardScheme extends StandardScheme<stopTiltDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopTiltDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopTiltDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopTiltDevice_argsTupleSchemeFactory implements SchemeFactory {
      public stopTiltDevice_argsTupleScheme getScheme() {
        return new stopTiltDevice_argsTupleScheme();
      }
    }

    private static class stopTiltDevice_argsTupleScheme extends TupleScheme<stopTiltDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopTiltDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopTiltDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
      }
    }

  }

  public static class stopTiltDevice_result implements org.apache.thrift.TBase<stopTiltDevice_result, stopTiltDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopTiltDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopTiltDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopTiltDevice_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopTiltDevice_result.class, metaDataMap);
    }

    public stopTiltDevice_result() {
    }

    public stopTiltDevice_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopTiltDevice_result(stopTiltDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public stopTiltDevice_result deepCopy() {
      return new stopTiltDevice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public stopTiltDevice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public stopTiltDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopTiltDevice_result)
        return this.equals((stopTiltDevice_result)that);
      return false;
    }

    public boolean equals(stopTiltDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopTiltDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopTiltDevice_result typedOther = (stopTiltDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopTiltDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopTiltDevice_resultStandardSchemeFactory implements SchemeFactory {
      public stopTiltDevice_resultStandardScheme getScheme() {
        return new stopTiltDevice_resultStandardScheme();
      }
    }

    private static class stopTiltDevice_resultStandardScheme extends StandardScheme<stopTiltDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopTiltDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopTiltDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopTiltDevice_resultTupleSchemeFactory implements SchemeFactory {
      public stopTiltDevice_resultTupleScheme getScheme() {
        return new stopTiltDevice_resultTupleScheme();
      }
    }

    private static class stopTiltDevice_resultTupleScheme extends TupleScheme<stopTiltDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopTiltDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopTiltDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class startZoomDevice_args implements org.apache.thrift.TBase<startZoomDevice_args, startZoomDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startZoomDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startZoomDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startZoomDevice_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String channelId; // required
    public String direction; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId"),
      DIRECTION((short)3, "direction");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          case 3: // DIRECTION
            return DIRECTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startZoomDevice_args.class, metaDataMap);
    }

    public startZoomDevice_args() {
    }

    public startZoomDevice_args(
      String deviceId,
      String channelId,
      String direction)
    {
      this();
      this.deviceId = deviceId;
      this.channelId = channelId;
      this.direction = direction;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startZoomDevice_args(startZoomDevice_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetDirection()) {
        this.direction = other.direction;
      }
    }

    public startZoomDevice_args deepCopy() {
      return new startZoomDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.channelId = null;
      this.direction = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public startZoomDevice_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public startZoomDevice_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getDirection() {
      return this.direction;
    }

    public startZoomDevice_args setDirection(String direction) {
      this.direction = direction;
      return this;
    }

    public void unsetDirection() {
      this.direction = null;
    }

    /** Returns true if field direction is set (has been assigned a value) and false otherwise */
    public boolean isSetDirection() {
      return this.direction != null;
    }

    public void setDirectionIsSet(boolean value) {
      if (!value) {
        this.direction = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case DIRECTION:
        if (value == null) {
          unsetDirection();
        } else {
          setDirection((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      case DIRECTION:
        return getDirection();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case DIRECTION:
        return isSetDirection();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startZoomDevice_args)
        return this.equals((startZoomDevice_args)that);
      return false;
    }

    public boolean equals(startZoomDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_direction = true && this.isSetDirection();
      boolean that_present_direction = true && that.isSetDirection();
      if (this_present_direction || that_present_direction) {
        if (!(this_present_direction && that_present_direction))
          return false;
        if (!this.direction.equals(that.direction))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startZoomDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startZoomDevice_args typedOther = (startZoomDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDirection()).compareTo(typedOther.isSetDirection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirection()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, typedOther.direction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startZoomDevice_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startZoomDevice_argsStandardSchemeFactory implements SchemeFactory {
      public startZoomDevice_argsStandardScheme getScheme() {
        return new startZoomDevice_argsStandardScheme();
      }
    }

    private static class startZoomDevice_argsStandardScheme extends StandardScheme<startZoomDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startZoomDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DIRECTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.direction = iprot.readString();
                struct.setDirectionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startZoomDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        if (struct.direction != null) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeString(struct.direction);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startZoomDevice_argsTupleSchemeFactory implements SchemeFactory {
      public startZoomDevice_argsTupleScheme getScheme() {
        return new startZoomDevice_argsTupleScheme();
      }
    }

    private static class startZoomDevice_argsTupleScheme extends TupleScheme<startZoomDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startZoomDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        if (struct.isSetDirection()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetDirection()) {
          oprot.writeString(struct.direction);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startZoomDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.direction = iprot.readString();
          struct.setDirectionIsSet(true);
        }
      }
    }

  }

  public static class startZoomDevice_result implements org.apache.thrift.TBase<startZoomDevice_result, startZoomDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startZoomDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startZoomDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startZoomDevice_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startZoomDevice_result.class, metaDataMap);
    }

    public startZoomDevice_result() {
    }

    public startZoomDevice_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startZoomDevice_result(startZoomDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public startZoomDevice_result deepCopy() {
      return new startZoomDevice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public startZoomDevice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public startZoomDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startZoomDevice_result)
        return this.equals((startZoomDevice_result)that);
      return false;
    }

    public boolean equals(startZoomDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(startZoomDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      startZoomDevice_result typedOther = (startZoomDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startZoomDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startZoomDevice_resultStandardSchemeFactory implements SchemeFactory {
      public startZoomDevice_resultStandardScheme getScheme() {
        return new startZoomDevice_resultStandardScheme();
      }
    }

    private static class startZoomDevice_resultStandardScheme extends StandardScheme<startZoomDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startZoomDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startZoomDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startZoomDevice_resultTupleSchemeFactory implements SchemeFactory {
      public startZoomDevice_resultTupleScheme getScheme() {
        return new startZoomDevice_resultTupleScheme();
      }
    }

    private static class startZoomDevice_resultTupleScheme extends TupleScheme<startZoomDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startZoomDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startZoomDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class stopZoomDevice_args implements org.apache.thrift.TBase<stopZoomDevice_args, stopZoomDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopZoomDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopZoomDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopZoomDevice_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String channelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopZoomDevice_args.class, metaDataMap);
    }

    public stopZoomDevice_args() {
    }

    public stopZoomDevice_args(
      String deviceId,
      String channelId)
    {
      this();
      this.deviceId = deviceId;
      this.channelId = channelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopZoomDevice_args(stopZoomDevice_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
    }

    public stopZoomDevice_args deepCopy() {
      return new stopZoomDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.channelId = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public stopZoomDevice_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public stopZoomDevice_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopZoomDevice_args)
        return this.equals((stopZoomDevice_args)that);
      return false;
    }

    public boolean equals(stopZoomDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopZoomDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopZoomDevice_args typedOther = (stopZoomDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopZoomDevice_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopZoomDevice_argsStandardSchemeFactory implements SchemeFactory {
      public stopZoomDevice_argsStandardScheme getScheme() {
        return new stopZoomDevice_argsStandardScheme();
      }
    }

    private static class stopZoomDevice_argsStandardScheme extends StandardScheme<stopZoomDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopZoomDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopZoomDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopZoomDevice_argsTupleSchemeFactory implements SchemeFactory {
      public stopZoomDevice_argsTupleScheme getScheme() {
        return new stopZoomDevice_argsTupleScheme();
      }
    }

    private static class stopZoomDevice_argsTupleScheme extends TupleScheme<stopZoomDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopZoomDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopZoomDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
      }
    }

  }

  public static class stopZoomDevice_result implements org.apache.thrift.TBase<stopZoomDevice_result, stopZoomDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopZoomDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stopZoomDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stopZoomDevice_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopZoomDevice_result.class, metaDataMap);
    }

    public stopZoomDevice_result() {
    }

    public stopZoomDevice_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopZoomDevice_result(stopZoomDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public stopZoomDevice_result deepCopy() {
      return new stopZoomDevice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public stopZoomDevice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public stopZoomDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stopZoomDevice_result)
        return this.equals((stopZoomDevice_result)that);
      return false;
    }

    public boolean equals(stopZoomDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(stopZoomDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      stopZoomDevice_result typedOther = (stopZoomDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stopZoomDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopZoomDevice_resultStandardSchemeFactory implements SchemeFactory {
      public stopZoomDevice_resultStandardScheme getScheme() {
        return new stopZoomDevice_resultStandardScheme();
      }
    }

    private static class stopZoomDevice_resultStandardScheme extends StandardScheme<stopZoomDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopZoomDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopZoomDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopZoomDevice_resultTupleSchemeFactory implements SchemeFactory {
      public stopZoomDevice_resultTupleScheme getScheme() {
        return new stopZoomDevice_resultTupleScheme();
      }
    }

    private static class stopZoomDevice_resultTupleScheme extends TupleScheme<stopZoomDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopZoomDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopZoomDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class writeData_args implements org.apache.thrift.TBase<writeData_args, writeData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeData_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("portNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeData_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String portNumber; // required
    public List<Byte> data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      PORT_NUMBER((short)2, "portNumber"),
      DATA((short)3, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // PORT_NUMBER
            return PORT_NUMBER;
          case 3: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("portNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeData_args.class, metaDataMap);
    }

    public writeData_args() {
    }

    public writeData_args(
      String deviceId,
      String portNumber,
      List<Byte> data)
    {
      this();
      this.deviceId = deviceId;
      this.portNumber = portNumber;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeData_args(writeData_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetPortNumber()) {
        this.portNumber = other.portNumber;
      }
      if (other.isSetData()) {
        List<Byte> __this__data = new ArrayList<Byte>();
        for (Byte other_element : other.data) {
          __this__data.add(other_element);
        }
        this.data = __this__data;
      }
    }

    public writeData_args deepCopy() {
      return new writeData_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.portNumber = null;
      this.data = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public writeData_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getPortNumber() {
      return this.portNumber;
    }

    public writeData_args setPortNumber(String portNumber) {
      this.portNumber = portNumber;
      return this;
    }

    public void unsetPortNumber() {
      this.portNumber = null;
    }

    /** Returns true if field portNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPortNumber() {
      return this.portNumber != null;
    }

    public void setPortNumberIsSet(boolean value) {
      if (!value) {
        this.portNumber = null;
      }
    }

    public int getDataSize() {
      return (this.data == null) ? 0 : this.data.size();
    }

    public java.util.Iterator<Byte> getDataIterator() {
      return (this.data == null) ? null : this.data.iterator();
    }

    public void addToData(byte elem) {
      if (this.data == null) {
        this.data = new ArrayList<Byte>();
      }
      this.data.add(elem);
    }

    public List<Byte> getData() {
      return this.data;
    }

    public writeData_args setData(List<Byte> data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case PORT_NUMBER:
        if (value == null) {
          unsetPortNumber();
        } else {
          setPortNumber((String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((List<Byte>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case PORT_NUMBER:
        return getPortNumber();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case PORT_NUMBER:
        return isSetPortNumber();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeData_args)
        return this.equals((writeData_args)that);
      return false;
    }

    public boolean equals(writeData_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_portNumber = true && this.isSetPortNumber();
      boolean that_present_portNumber = true && that.isSetPortNumber();
      if (this_present_portNumber || that_present_portNumber) {
        if (!(this_present_portNumber && that_present_portNumber))
          return false;
        if (!this.portNumber.equals(that.portNumber))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writeData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writeData_args typedOther = (writeData_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPortNumber()).compareTo(typedOther.isSetPortNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portNumber, typedOther.portNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeData_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("portNumber:");
      if (this.portNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.portNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeData_argsStandardSchemeFactory implements SchemeFactory {
      public writeData_argsStandardScheme getScheme() {
        return new writeData_argsStandardScheme();
      }
    }

    private static class writeData_argsStandardScheme extends StandardScheme<writeData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.portNumber = iprot.readString();
                struct.setPortNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.data = new ArrayList<Byte>(_list104.size);
                  for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                  {
                    byte _elem106; // required
                    _elem106 = iprot.readByte();
                    struct.data.add(_elem106);
                  }
                  iprot.readListEnd();
                }
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.portNumber != null) {
          oprot.writeFieldBegin(PORT_NUMBER_FIELD_DESC);
          oprot.writeString(struct.portNumber);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.data.size()));
            for (byte _iter107 : struct.data)
            {
              oprot.writeByte(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeData_argsTupleSchemeFactory implements SchemeFactory {
      public writeData_argsTupleScheme getScheme() {
        return new writeData_argsTupleScheme();
      }
    }

    private static class writeData_argsTupleScheme extends TupleScheme<writeData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetPortNumber()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetPortNumber()) {
          oprot.writeString(struct.portNumber);
        }
        if (struct.isSetData()) {
          {
            oprot.writeI32(struct.data.size());
            for (byte _iter108 : struct.data)
            {
              oprot.writeByte(_iter108);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.portNumber = iprot.readString();
          struct.setPortNumberIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
            struct.data = new ArrayList<Byte>(_list109.size);
            for (int _i110 = 0; _i110 < _list109.size; ++_i110)
            {
              byte _elem111; // required
              _elem111 = iprot.readByte();
              struct.data.add(_elem111);
            }
          }
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class writeData_result implements org.apache.thrift.TBase<writeData_result, writeData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeData_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeData_result.class, metaDataMap);
    }

    public writeData_result() {
    }

    public writeData_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeData_result(writeData_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public writeData_result deepCopy() {
      return new writeData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public writeData_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public writeData_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeData_result)
        return this.equals((writeData_result)that);
      return false;
    }

    public boolean equals(writeData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(writeData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      writeData_result typedOther = (writeData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeData_resultStandardSchemeFactory implements SchemeFactory {
      public writeData_resultStandardScheme getScheme() {
        return new writeData_resultStandardScheme();
      }
    }

    private static class writeData_resultStandardScheme extends StandardScheme<writeData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeData_resultTupleSchemeFactory implements SchemeFactory {
      public writeData_resultTupleScheme getScheme() {
        return new writeData_resultTupleScheme();
      }
    }

    private static class writeData_resultTupleScheme extends TupleScheme<writeData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class readData_args implements org.apache.thrift.TBase<readData_args, readData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readData_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("portNumber", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readData_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String portNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      PORT_NUMBER((short)2, "portNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // PORT_NUMBER
            return PORT_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("portNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readData_args.class, metaDataMap);
    }

    public readData_args() {
    }

    public readData_args(
      String deviceId,
      String portNumber)
    {
      this();
      this.deviceId = deviceId;
      this.portNumber = portNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readData_args(readData_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetPortNumber()) {
        this.portNumber = other.portNumber;
      }
    }

    public readData_args deepCopy() {
      return new readData_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.portNumber = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public readData_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getPortNumber() {
      return this.portNumber;
    }

    public readData_args setPortNumber(String portNumber) {
      this.portNumber = portNumber;
      return this;
    }

    public void unsetPortNumber() {
      this.portNumber = null;
    }

    /** Returns true if field portNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPortNumber() {
      return this.portNumber != null;
    }

    public void setPortNumberIsSet(boolean value) {
      if (!value) {
        this.portNumber = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case PORT_NUMBER:
        if (value == null) {
          unsetPortNumber();
        } else {
          setPortNumber((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case PORT_NUMBER:
        return getPortNumber();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case PORT_NUMBER:
        return isSetPortNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readData_args)
        return this.equals((readData_args)that);
      return false;
    }

    public boolean equals(readData_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_portNumber = true && this.isSetPortNumber();
      boolean that_present_portNumber = true && that.isSetPortNumber();
      if (this_present_portNumber || that_present_portNumber) {
        if (!(this_present_portNumber && that_present_portNumber))
          return false;
        if (!this.portNumber.equals(that.portNumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readData_args typedOther = (readData_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPortNumber()).compareTo(typedOther.isSetPortNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portNumber, typedOther.portNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readData_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("portNumber:");
      if (this.portNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.portNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readData_argsStandardSchemeFactory implements SchemeFactory {
      public readData_argsStandardScheme getScheme() {
        return new readData_argsStandardScheme();
      }
    }

    private static class readData_argsStandardScheme extends StandardScheme<readData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.portNumber = iprot.readString();
                struct.setPortNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.portNumber != null) {
          oprot.writeFieldBegin(PORT_NUMBER_FIELD_DESC);
          oprot.writeString(struct.portNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readData_argsTupleSchemeFactory implements SchemeFactory {
      public readData_argsTupleScheme getScheme() {
        return new readData_argsTupleScheme();
      }
    }

    private static class readData_argsTupleScheme extends TupleScheme<readData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetPortNumber()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetPortNumber()) {
          oprot.writeString(struct.portNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.portNumber = iprot.readString();
          struct.setPortNumberIsSet(true);
        }
      }
    }

  }

  public static class readData_result implements org.apache.thrift.TBase<readData_result, readData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readData_resultTupleSchemeFactory());
    }

    public List<Byte> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readData_result.class, metaDataMap);
    }

    public readData_result() {
    }

    public readData_result(
      List<Byte> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readData_result(readData_result other) {
      if (other.isSetSuccess()) {
        List<Byte> __this__success = new ArrayList<Byte>();
        for (Byte other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public readData_result deepCopy() {
      return new readData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Byte> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(byte elem) {
      if (this.success == null) {
        this.success = new ArrayList<Byte>();
      }
      this.success.add(elem);
    }

    public List<Byte> getSuccess() {
      return this.success;
    }

    public readData_result setSuccess(List<Byte> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public readData_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Byte>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readData_result)
        return this.equals((readData_result)that);
      return false;
    }

    public boolean equals(readData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(readData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      readData_result typedOther = (readData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readData_resultStandardSchemeFactory implements SchemeFactory {
      public readData_resultStandardScheme getScheme() {
        return new readData_resultStandardScheme();
      }
    }

    private static class readData_resultStandardScheme extends StandardScheme<readData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new ArrayList<Byte>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    byte _elem114; // required
                    _elem114 = iprot.readByte();
                    struct.success.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, struct.success.size()));
            for (byte _iter115 : struct.success)
            {
              oprot.writeByte(_iter115);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readData_resultTupleSchemeFactory implements SchemeFactory {
      public readData_resultTupleScheme getScheme() {
        return new readData_resultTupleScheme();
      }
    }

    private static class readData_resultTupleScheme extends TupleScheme<readData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (byte _iter116 : struct.success)
            {
              oprot.writeByte(_iter116);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BYTE, iprot.readI32());
            struct.success = new ArrayList<Byte>(_list117.size);
            for (int _i118 = 0; _i118 < _list117.size; ++_i118)
            {
              byte _elem119; // required
              _elem119 = iprot.readByte();
              struct.success.add(_elem119);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

}
