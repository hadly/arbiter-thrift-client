/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Stream Client Info
 * (1) clientIp - IP address of the client connected to this stream
 * (2) clientPort - Port number of the client connected to this stream
 */
public class StreamClientInfo implements org.apache.thrift.TBase<StreamClientInfo, StreamClientInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StreamClientInfo");

  private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIp", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("clientPort", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StreamClientInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StreamClientInfoTupleSchemeFactory());
  }

  public String clientIp; // required
  public String clientPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLIENT_IP((short)1, "clientIp"),
    CLIENT_PORT((short)2, "clientPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_IP
          return CLIENT_IP;
        case 2: // CLIENT_PORT
          return CLIENT_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("clientIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_PORT, new org.apache.thrift.meta_data.FieldMetaData("clientPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StreamClientInfo.class, metaDataMap);
  }

  public StreamClientInfo() {
  }

  public StreamClientInfo(
    String clientIp,
    String clientPort)
  {
    this();
    this.clientIp = clientIp;
    this.clientPort = clientPort;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StreamClientInfo(StreamClientInfo other) {
    if (other.isSetClientIp()) {
      this.clientIp = other.clientIp;
    }
    if (other.isSetClientPort()) {
      this.clientPort = other.clientPort;
    }
  }

  public StreamClientInfo deepCopy() {
    return new StreamClientInfo(this);
  }

  @Override
  public void clear() {
    this.clientIp = null;
    this.clientPort = null;
  }

  public String getClientIp() {
    return this.clientIp;
  }

  public StreamClientInfo setClientIp(String clientIp) {
    this.clientIp = clientIp;
    return this;
  }

  public void unsetClientIp() {
    this.clientIp = null;
  }

  /** Returns true if field clientIp is set (has been assigned a value) and false otherwise */
  public boolean isSetClientIp() {
    return this.clientIp != null;
  }

  public void setClientIpIsSet(boolean value) {
    if (!value) {
      this.clientIp = null;
    }
  }

  public String getClientPort() {
    return this.clientPort;
  }

  public StreamClientInfo setClientPort(String clientPort) {
    this.clientPort = clientPort;
    return this;
  }

  public void unsetClientPort() {
    this.clientPort = null;
  }

  /** Returns true if field clientPort is set (has been assigned a value) and false otherwise */
  public boolean isSetClientPort() {
    return this.clientPort != null;
  }

  public void setClientPortIsSet(boolean value) {
    if (!value) {
      this.clientPort = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLIENT_IP:
      if (value == null) {
        unsetClientIp();
      } else {
        setClientIp((String)value);
      }
      break;

    case CLIENT_PORT:
      if (value == null) {
        unsetClientPort();
      } else {
        setClientPort((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_IP:
      return getClientIp();

    case CLIENT_PORT:
      return getClientPort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_IP:
      return isSetClientIp();
    case CLIENT_PORT:
      return isSetClientPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StreamClientInfo)
      return this.equals((StreamClientInfo)that);
    return false;
  }

  public boolean equals(StreamClientInfo that) {
    if (that == null)
      return false;

    boolean this_present_clientIp = true && this.isSetClientIp();
    boolean that_present_clientIp = true && that.isSetClientIp();
    if (this_present_clientIp || that_present_clientIp) {
      if (!(this_present_clientIp && that_present_clientIp))
        return false;
      if (!this.clientIp.equals(that.clientIp))
        return false;
    }

    boolean this_present_clientPort = true && this.isSetClientPort();
    boolean that_present_clientPort = true && that.isSetClientPort();
    if (this_present_clientPort || that_present_clientPort) {
      if (!(this_present_clientPort && that_present_clientPort))
        return false;
      if (!this.clientPort.equals(that.clientPort))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StreamClientInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StreamClientInfo typedOther = (StreamClientInfo)other;

    lastComparison = Boolean.valueOf(isSetClientIp()).compareTo(typedOther.isSetClientIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIp, typedOther.clientIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientPort()).compareTo(typedOther.isSetClientPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientPort, typedOther.clientPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StreamClientInfo(");
    boolean first = true;

    sb.append("clientIp:");
    if (this.clientIp == null) {
      sb.append("null");
    } else {
      sb.append(this.clientIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientPort:");
    if (this.clientPort == null) {
      sb.append("null");
    } else {
      sb.append(this.clientPort);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StreamClientInfoStandardSchemeFactory implements SchemeFactory {
    public StreamClientInfoStandardScheme getScheme() {
      return new StreamClientInfoStandardScheme();
    }
  }

  private static class StreamClientInfoStandardScheme extends StandardScheme<StreamClientInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StreamClientInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientIp = iprot.readString();
              struct.setClientIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientPort = iprot.readString();
              struct.setClientPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StreamClientInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.clientIp != null) {
        oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
        oprot.writeString(struct.clientIp);
        oprot.writeFieldEnd();
      }
      if (struct.clientPort != null) {
        oprot.writeFieldBegin(CLIENT_PORT_FIELD_DESC);
        oprot.writeString(struct.clientPort);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StreamClientInfoTupleSchemeFactory implements SchemeFactory {
    public StreamClientInfoTupleScheme getScheme() {
      return new StreamClientInfoTupleScheme();
    }
  }

  private static class StreamClientInfoTupleScheme extends TupleScheme<StreamClientInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StreamClientInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClientIp()) {
        optionals.set(0);
      }
      if (struct.isSetClientPort()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetClientIp()) {
        oprot.writeString(struct.clientIp);
      }
      if (struct.isSetClientPort()) {
        oprot.writeString(struct.clientPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StreamClientInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.clientIp = iprot.readString();
        struct.setClientIpIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientPort = iprot.readString();
        struct.setClientPortIsSet(true);
      }
    }
  }

}

