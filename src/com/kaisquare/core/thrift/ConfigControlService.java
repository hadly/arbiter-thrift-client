/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ConfigControlService {

  /**
   * ConfigControlService - this service provides interface for management
   * of configurations. Platform use this interface to set parameters for
   * core engine.
   */
  public interface Iface {

    /**
     * Set device storage limit size for each channel.
     * (1) deviceId - Unique ID of the device.
     * (2) channelId - The specified channel number.
     * (3) storageLimit - Max storage size of this stream, default value is 102400. unit: MB.
     * 
     * @param deviceId
     * @param channelId
     * @param storageLimit
     */
    public boolean setStreamStorageLimit(String deviceId, String channelId, long storageLimit) throws CoreException, org.apache.thrift.TException;

    /**
     * Set device storage keep time for each channel.
     * (1) deviceId - Unique ID of the device.
     * (2) channelId - The specified channel number.
     * (3) keepDays - Storage keep days of this stream, default value is 30. unit: Day.
     * 
     * @param deviceId
     * @param channelId
     * @param keepDays
     */
    public boolean setStorageKeepDays(String deviceId, String channelId, long keepDays) throws CoreException, org.apache.thrift.TException;

    /**
     * Set the length of segment file for stream storage.
     * (1) chunkSize - Segment file duration, default value is 15. unit: Minute.
     * 
     * @param chunkSize
     */
    public boolean setChunkSize(long chunkSize) throws CoreException, org.apache.thrift.TException;

    /**
     * Set reserved disk space for storage.
     * (1) reservedSpace - Reserved disk space for storage, default value is 5120. unit: MB.
     * 
     * @param reservedSpace
     */
    public boolean setReservedSpace(long reservedSpace) throws CoreException, org.apache.thrift.TException;

    /**
     * Set cloud server for node.
     * Cloud server here indicates kup core engine arbiter server.
     * NOTE 1: For node only.
     * (1) cloudServerHost - IP address or hostname of cloud arbiter server, default is "localhost".
     * 
     * @param cloudServerHost
     */
    public boolean setCloudServer(String cloudServerHost) throws CoreException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void setStreamStorageLimit(String deviceId, String channelId, long storageLimit, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setStreamStorageLimit_call> resultHandler) throws org.apache.thrift.TException;

    public void setStorageKeepDays(String deviceId, String channelId, long keepDays, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setStorageKeepDays_call> resultHandler) throws org.apache.thrift.TException;

    public void setChunkSize(long chunkSize, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setChunkSize_call> resultHandler) throws org.apache.thrift.TException;

    public void setReservedSpace(long reservedSpace, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setReservedSpace_call> resultHandler) throws org.apache.thrift.TException;

    public void setCloudServer(String cloudServerHost, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setCloudServer_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean setStreamStorageLimit(String deviceId, String channelId, long storageLimit) throws CoreException, org.apache.thrift.TException
    {
      send_setStreamStorageLimit(deviceId, channelId, storageLimit);
      return recv_setStreamStorageLimit();
    }

    public void send_setStreamStorageLimit(String deviceId, String channelId, long storageLimit) throws org.apache.thrift.TException
    {
      setStreamStorageLimit_args args = new setStreamStorageLimit_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setStorageLimit(storageLimit);
      sendBase("setStreamStorageLimit", args);
    }

    public boolean recv_setStreamStorageLimit() throws CoreException, org.apache.thrift.TException
    {
      setStreamStorageLimit_result result = new setStreamStorageLimit_result();
      receiveBase(result, "setStreamStorageLimit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setStreamStorageLimit failed: unknown result");
    }

    public boolean setStorageKeepDays(String deviceId, String channelId, long keepDays) throws CoreException, org.apache.thrift.TException
    {
      send_setStorageKeepDays(deviceId, channelId, keepDays);
      return recv_setStorageKeepDays();
    }

    public void send_setStorageKeepDays(String deviceId, String channelId, long keepDays) throws org.apache.thrift.TException
    {
      setStorageKeepDays_args args = new setStorageKeepDays_args();
      args.setDeviceId(deviceId);
      args.setChannelId(channelId);
      args.setKeepDays(keepDays);
      sendBase("setStorageKeepDays", args);
    }

    public boolean recv_setStorageKeepDays() throws CoreException, org.apache.thrift.TException
    {
      setStorageKeepDays_result result = new setStorageKeepDays_result();
      receiveBase(result, "setStorageKeepDays");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setStorageKeepDays failed: unknown result");
    }

    public boolean setChunkSize(long chunkSize) throws CoreException, org.apache.thrift.TException
    {
      send_setChunkSize(chunkSize);
      return recv_setChunkSize();
    }

    public void send_setChunkSize(long chunkSize) throws org.apache.thrift.TException
    {
      setChunkSize_args args = new setChunkSize_args();
      args.setChunkSize(chunkSize);
      sendBase("setChunkSize", args);
    }

    public boolean recv_setChunkSize() throws CoreException, org.apache.thrift.TException
    {
      setChunkSize_result result = new setChunkSize_result();
      receiveBase(result, "setChunkSize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setChunkSize failed: unknown result");
    }

    public boolean setReservedSpace(long reservedSpace) throws CoreException, org.apache.thrift.TException
    {
      send_setReservedSpace(reservedSpace);
      return recv_setReservedSpace();
    }

    public void send_setReservedSpace(long reservedSpace) throws org.apache.thrift.TException
    {
      setReservedSpace_args args = new setReservedSpace_args();
      args.setReservedSpace(reservedSpace);
      sendBase("setReservedSpace", args);
    }

    public boolean recv_setReservedSpace() throws CoreException, org.apache.thrift.TException
    {
      setReservedSpace_result result = new setReservedSpace_result();
      receiveBase(result, "setReservedSpace");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setReservedSpace failed: unknown result");
    }

    public boolean setCloudServer(String cloudServerHost) throws CoreException, org.apache.thrift.TException
    {
      send_setCloudServer(cloudServerHost);
      return recv_setCloudServer();
    }

    public void send_setCloudServer(String cloudServerHost) throws org.apache.thrift.TException
    {
      setCloudServer_args args = new setCloudServer_args();
      args.setCloudServerHost(cloudServerHost);
      sendBase("setCloudServer", args);
    }

    public boolean recv_setCloudServer() throws CoreException, org.apache.thrift.TException
    {
      setCloudServer_result result = new setCloudServer_result();
      receiveBase(result, "setCloudServer");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setCloudServer failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setStreamStorageLimit(String deviceId, String channelId, long storageLimit, org.apache.thrift.async.AsyncMethodCallback<setStreamStorageLimit_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setStreamStorageLimit_call method_call = new setStreamStorageLimit_call(deviceId, channelId, storageLimit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setStreamStorageLimit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String channelId;
      private long storageLimit;
      public setStreamStorageLimit_call(String deviceId, String channelId, long storageLimit, org.apache.thrift.async.AsyncMethodCallback<setStreamStorageLimit_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.storageLimit = storageLimit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setStreamStorageLimit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setStreamStorageLimit_args args = new setStreamStorageLimit_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setStorageLimit(storageLimit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setStreamStorageLimit();
      }
    }

    public void setStorageKeepDays(String deviceId, String channelId, long keepDays, org.apache.thrift.async.AsyncMethodCallback<setStorageKeepDays_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setStorageKeepDays_call method_call = new setStorageKeepDays_call(deviceId, channelId, keepDays, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setStorageKeepDays_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String channelId;
      private long keepDays;
      public setStorageKeepDays_call(String deviceId, String channelId, long keepDays, org.apache.thrift.async.AsyncMethodCallback<setStorageKeepDays_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.channelId = channelId;
        this.keepDays = keepDays;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setStorageKeepDays", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setStorageKeepDays_args args = new setStorageKeepDays_args();
        args.setDeviceId(deviceId);
        args.setChannelId(channelId);
        args.setKeepDays(keepDays);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setStorageKeepDays();
      }
    }

    public void setChunkSize(long chunkSize, org.apache.thrift.async.AsyncMethodCallback<setChunkSize_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setChunkSize_call method_call = new setChunkSize_call(chunkSize, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setChunkSize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long chunkSize;
      public setChunkSize_call(long chunkSize, org.apache.thrift.async.AsyncMethodCallback<setChunkSize_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chunkSize = chunkSize;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setChunkSize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setChunkSize_args args = new setChunkSize_args();
        args.setChunkSize(chunkSize);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setChunkSize();
      }
    }

    public void setReservedSpace(long reservedSpace, org.apache.thrift.async.AsyncMethodCallback<setReservedSpace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setReservedSpace_call method_call = new setReservedSpace_call(reservedSpace, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setReservedSpace_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long reservedSpace;
      public setReservedSpace_call(long reservedSpace, org.apache.thrift.async.AsyncMethodCallback<setReservedSpace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.reservedSpace = reservedSpace;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setReservedSpace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setReservedSpace_args args = new setReservedSpace_args();
        args.setReservedSpace(reservedSpace);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setReservedSpace();
      }
    }

    public void setCloudServer(String cloudServerHost, org.apache.thrift.async.AsyncMethodCallback<setCloudServer_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setCloudServer_call method_call = new setCloudServer_call(cloudServerHost, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setCloudServer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String cloudServerHost;
      public setCloudServer_call(String cloudServerHost, org.apache.thrift.async.AsyncMethodCallback<setCloudServer_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudServerHost = cloudServerHost;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCloudServer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setCloudServer_args args = new setCloudServer_args();
        args.setCloudServerHost(cloudServerHost);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setCloudServer();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setStreamStorageLimit", new setStreamStorageLimit());
      processMap.put("setStorageKeepDays", new setStorageKeepDays());
      processMap.put("setChunkSize", new setChunkSize());
      processMap.put("setReservedSpace", new setReservedSpace());
      processMap.put("setCloudServer", new setCloudServer());
      return processMap;
    }

    private static class setStreamStorageLimit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setStreamStorageLimit_args> {
      public setStreamStorageLimit() {
        super("setStreamStorageLimit");
      }

      protected setStreamStorageLimit_args getEmptyArgsInstance() {
        return new setStreamStorageLimit_args();
      }

      protected setStreamStorageLimit_result getResult(I iface, setStreamStorageLimit_args args) throws org.apache.thrift.TException {
        setStreamStorageLimit_result result = new setStreamStorageLimit_result();
        try {
          result.success = iface.setStreamStorageLimit(args.deviceId, args.channelId, args.storageLimit);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class setStorageKeepDays<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setStorageKeepDays_args> {
      public setStorageKeepDays() {
        super("setStorageKeepDays");
      }

      protected setStorageKeepDays_args getEmptyArgsInstance() {
        return new setStorageKeepDays_args();
      }

      protected setStorageKeepDays_result getResult(I iface, setStorageKeepDays_args args) throws org.apache.thrift.TException {
        setStorageKeepDays_result result = new setStorageKeepDays_result();
        try {
          result.success = iface.setStorageKeepDays(args.deviceId, args.channelId, args.keepDays);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class setChunkSize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setChunkSize_args> {
      public setChunkSize() {
        super("setChunkSize");
      }

      protected setChunkSize_args getEmptyArgsInstance() {
        return new setChunkSize_args();
      }

      protected setChunkSize_result getResult(I iface, setChunkSize_args args) throws org.apache.thrift.TException {
        setChunkSize_result result = new setChunkSize_result();
        try {
          result.success = iface.setChunkSize(args.chunkSize);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class setReservedSpace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setReservedSpace_args> {
      public setReservedSpace() {
        super("setReservedSpace");
      }

      protected setReservedSpace_args getEmptyArgsInstance() {
        return new setReservedSpace_args();
      }

      protected setReservedSpace_result getResult(I iface, setReservedSpace_args args) throws org.apache.thrift.TException {
        setReservedSpace_result result = new setReservedSpace_result();
        try {
          result.success = iface.setReservedSpace(args.reservedSpace);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class setCloudServer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCloudServer_args> {
      public setCloudServer() {
        super("setCloudServer");
      }

      protected setCloudServer_args getEmptyArgsInstance() {
        return new setCloudServer_args();
      }

      protected setCloudServer_result getResult(I iface, setCloudServer_args args) throws org.apache.thrift.TException {
        setCloudServer_result result = new setCloudServer_result();
        try {
          result.success = iface.setCloudServer(args.cloudServerHost);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

  }

  public static class setStreamStorageLimit_args implements org.apache.thrift.TBase<setStreamStorageLimit_args, setStreamStorageLimit_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setStreamStorageLimit_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STORAGE_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("storageLimit", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setStreamStorageLimit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setStreamStorageLimit_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String channelId; // required
    public long storageLimit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId"),
      STORAGE_LIMIT((short)3, "storageLimit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          case 3: // STORAGE_LIMIT
            return STORAGE_LIMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STORAGELIMIT_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STORAGE_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("storageLimit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setStreamStorageLimit_args.class, metaDataMap);
    }

    public setStreamStorageLimit_args() {
    }

    public setStreamStorageLimit_args(
      String deviceId,
      String channelId,
      long storageLimit)
    {
      this();
      this.deviceId = deviceId;
      this.channelId = channelId;
      this.storageLimit = storageLimit;
      setStorageLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setStreamStorageLimit_args(setStreamStorageLimit_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      this.storageLimit = other.storageLimit;
    }

    public setStreamStorageLimit_args deepCopy() {
      return new setStreamStorageLimit_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.channelId = null;
      setStorageLimitIsSet(false);
      this.storageLimit = 0;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public setStreamStorageLimit_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public setStreamStorageLimit_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public long getStorageLimit() {
      return this.storageLimit;
    }

    public setStreamStorageLimit_args setStorageLimit(long storageLimit) {
      this.storageLimit = storageLimit;
      setStorageLimitIsSet(true);
      return this;
    }

    public void unsetStorageLimit() {
      __isset_bit_vector.clear(__STORAGELIMIT_ISSET_ID);
    }

    /** Returns true if field storageLimit is set (has been assigned a value) and false otherwise */
    public boolean isSetStorageLimit() {
      return __isset_bit_vector.get(__STORAGELIMIT_ISSET_ID);
    }

    public void setStorageLimitIsSet(boolean value) {
      __isset_bit_vector.set(__STORAGELIMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case STORAGE_LIMIT:
        if (value == null) {
          unsetStorageLimit();
        } else {
          setStorageLimit((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      case STORAGE_LIMIT:
        return Long.valueOf(getStorageLimit());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case STORAGE_LIMIT:
        return isSetStorageLimit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setStreamStorageLimit_args)
        return this.equals((setStreamStorageLimit_args)that);
      return false;
    }

    public boolean equals(setStreamStorageLimit_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_storageLimit = true;
      boolean that_present_storageLimit = true;
      if (this_present_storageLimit || that_present_storageLimit) {
        if (!(this_present_storageLimit && that_present_storageLimit))
          return false;
        if (this.storageLimit != that.storageLimit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setStreamStorageLimit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setStreamStorageLimit_args typedOther = (setStreamStorageLimit_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStorageLimit()).compareTo(typedOther.isSetStorageLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStorageLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storageLimit, typedOther.storageLimit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setStreamStorageLimit_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("storageLimit:");
      sb.append(this.storageLimit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setStreamStorageLimit_argsStandardSchemeFactory implements SchemeFactory {
      public setStreamStorageLimit_argsStandardScheme getScheme() {
        return new setStreamStorageLimit_argsStandardScheme();
      }
    }

    private static class setStreamStorageLimit_argsStandardScheme extends StandardScheme<setStreamStorageLimit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setStreamStorageLimit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STORAGE_LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.storageLimit = iprot.readI64();
                struct.setStorageLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setStreamStorageLimit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STORAGE_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.storageLimit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setStreamStorageLimit_argsTupleSchemeFactory implements SchemeFactory {
      public setStreamStorageLimit_argsTupleScheme getScheme() {
        return new setStreamStorageLimit_argsTupleScheme();
      }
    }

    private static class setStreamStorageLimit_argsTupleScheme extends TupleScheme<setStreamStorageLimit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setStreamStorageLimit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        if (struct.isSetStorageLimit()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetStorageLimit()) {
          oprot.writeI64(struct.storageLimit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setStreamStorageLimit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.storageLimit = iprot.readI64();
          struct.setStorageLimitIsSet(true);
        }
      }
    }

  }

  public static class setStreamStorageLimit_result implements org.apache.thrift.TBase<setStreamStorageLimit_result, setStreamStorageLimit_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setStreamStorageLimit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setStreamStorageLimit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setStreamStorageLimit_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setStreamStorageLimit_result.class, metaDataMap);
    }

    public setStreamStorageLimit_result() {
    }

    public setStreamStorageLimit_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setStreamStorageLimit_result(setStreamStorageLimit_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public setStreamStorageLimit_result deepCopy() {
      return new setStreamStorageLimit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setStreamStorageLimit_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public setStreamStorageLimit_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setStreamStorageLimit_result)
        return this.equals((setStreamStorageLimit_result)that);
      return false;
    }

    public boolean equals(setStreamStorageLimit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setStreamStorageLimit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setStreamStorageLimit_result typedOther = (setStreamStorageLimit_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setStreamStorageLimit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setStreamStorageLimit_resultStandardSchemeFactory implements SchemeFactory {
      public setStreamStorageLimit_resultStandardScheme getScheme() {
        return new setStreamStorageLimit_resultStandardScheme();
      }
    }

    private static class setStreamStorageLimit_resultStandardScheme extends StandardScheme<setStreamStorageLimit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setStreamStorageLimit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setStreamStorageLimit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setStreamStorageLimit_resultTupleSchemeFactory implements SchemeFactory {
      public setStreamStorageLimit_resultTupleScheme getScheme() {
        return new setStreamStorageLimit_resultTupleScheme();
      }
    }

    private static class setStreamStorageLimit_resultTupleScheme extends TupleScheme<setStreamStorageLimit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setStreamStorageLimit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setStreamStorageLimit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class setStorageKeepDays_args implements org.apache.thrift.TBase<setStorageKeepDays_args, setStorageKeepDays_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setStorageKeepDays_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField KEEP_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keepDays", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setStorageKeepDays_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setStorageKeepDays_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String channelId; // required
    public long keepDays; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      CHANNEL_ID((short)2, "channelId"),
      KEEP_DAYS((short)3, "keepDays");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // CHANNEL_ID
            return CHANNEL_ID;
          case 3: // KEEP_DAYS
            return KEEP_DAYS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __KEEPDAYS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEEP_DAYS, new org.apache.thrift.meta_data.FieldMetaData("keepDays", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setStorageKeepDays_args.class, metaDataMap);
    }

    public setStorageKeepDays_args() {
    }

    public setStorageKeepDays_args(
      String deviceId,
      String channelId,
      long keepDays)
    {
      this();
      this.deviceId = deviceId;
      this.channelId = channelId;
      this.keepDays = keepDays;
      setKeepDaysIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setStorageKeepDays_args(setStorageKeepDays_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      this.keepDays = other.keepDays;
    }

    public setStorageKeepDays_args deepCopy() {
      return new setStorageKeepDays_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.channelId = null;
      setKeepDaysIsSet(false);
      this.keepDays = 0;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public setStorageKeepDays_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getChannelId() {
      return this.channelId;
    }

    public setStorageKeepDays_args setChannelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public long getKeepDays() {
      return this.keepDays;
    }

    public setStorageKeepDays_args setKeepDays(long keepDays) {
      this.keepDays = keepDays;
      setKeepDaysIsSet(true);
      return this;
    }

    public void unsetKeepDays() {
      __isset_bit_vector.clear(__KEEPDAYS_ISSET_ID);
    }

    /** Returns true if field keepDays is set (has been assigned a value) and false otherwise */
    public boolean isSetKeepDays() {
      return __isset_bit_vector.get(__KEEPDAYS_ISSET_ID);
    }

    public void setKeepDaysIsSet(boolean value) {
      __isset_bit_vector.set(__KEEPDAYS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case CHANNEL_ID:
        if (value == null) {
          unsetChannelId();
        } else {
          setChannelId((String)value);
        }
        break;

      case KEEP_DAYS:
        if (value == null) {
          unsetKeepDays();
        } else {
          setKeepDays((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case CHANNEL_ID:
        return getChannelId();

      case KEEP_DAYS:
        return Long.valueOf(getKeepDays());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case CHANNEL_ID:
        return isSetChannelId();
      case KEEP_DAYS:
        return isSetKeepDays();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setStorageKeepDays_args)
        return this.equals((setStorageKeepDays_args)that);
      return false;
    }

    public boolean equals(setStorageKeepDays_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_keepDays = true;
      boolean that_present_keepDays = true;
      if (this_present_keepDays || that_present_keepDays) {
        if (!(this_present_keepDays && that_present_keepDays))
          return false;
        if (this.keepDays != that.keepDays)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setStorageKeepDays_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setStorageKeepDays_args typedOther = (setStorageKeepDays_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(typedOther.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, typedOther.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeepDays()).compareTo(typedOther.isSetKeepDays());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeepDays()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keepDays, typedOther.keepDays);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setStorageKeepDays_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keepDays:");
      sb.append(this.keepDays);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setStorageKeepDays_argsStandardSchemeFactory implements SchemeFactory {
      public setStorageKeepDays_argsStandardScheme getScheme() {
        return new setStorageKeepDays_argsStandardScheme();
      }
    }

    private static class setStorageKeepDays_argsStandardScheme extends StandardScheme<setStorageKeepDays_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setStorageKeepDays_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.channelId = iprot.readString();
                struct.setChannelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // KEEP_DAYS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.keepDays = iprot.readI64();
                struct.setKeepDaysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setStorageKeepDays_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.channelId != null) {
          oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.channelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(KEEP_DAYS_FIELD_DESC);
        oprot.writeI64(struct.keepDays);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setStorageKeepDays_argsTupleSchemeFactory implements SchemeFactory {
      public setStorageKeepDays_argsTupleScheme getScheme() {
        return new setStorageKeepDays_argsTupleScheme();
      }
    }

    private static class setStorageKeepDays_argsTupleScheme extends TupleScheme<setStorageKeepDays_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setStorageKeepDays_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetChannelId()) {
          optionals.set(1);
        }
        if (struct.isSetKeepDays()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetChannelId()) {
          oprot.writeString(struct.channelId);
        }
        if (struct.isSetKeepDays()) {
          oprot.writeI64(struct.keepDays);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setStorageKeepDays_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.channelId = iprot.readString();
          struct.setChannelIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.keepDays = iprot.readI64();
          struct.setKeepDaysIsSet(true);
        }
      }
    }

  }

  public static class setStorageKeepDays_result implements org.apache.thrift.TBase<setStorageKeepDays_result, setStorageKeepDays_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setStorageKeepDays_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setStorageKeepDays_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setStorageKeepDays_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setStorageKeepDays_result.class, metaDataMap);
    }

    public setStorageKeepDays_result() {
    }

    public setStorageKeepDays_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setStorageKeepDays_result(setStorageKeepDays_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public setStorageKeepDays_result deepCopy() {
      return new setStorageKeepDays_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setStorageKeepDays_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public setStorageKeepDays_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setStorageKeepDays_result)
        return this.equals((setStorageKeepDays_result)that);
      return false;
    }

    public boolean equals(setStorageKeepDays_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setStorageKeepDays_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setStorageKeepDays_result typedOther = (setStorageKeepDays_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setStorageKeepDays_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setStorageKeepDays_resultStandardSchemeFactory implements SchemeFactory {
      public setStorageKeepDays_resultStandardScheme getScheme() {
        return new setStorageKeepDays_resultStandardScheme();
      }
    }

    private static class setStorageKeepDays_resultStandardScheme extends StandardScheme<setStorageKeepDays_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setStorageKeepDays_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setStorageKeepDays_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setStorageKeepDays_resultTupleSchemeFactory implements SchemeFactory {
      public setStorageKeepDays_resultTupleScheme getScheme() {
        return new setStorageKeepDays_resultTupleScheme();
      }
    }

    private static class setStorageKeepDays_resultTupleScheme extends TupleScheme<setStorageKeepDays_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setStorageKeepDays_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setStorageKeepDays_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class setChunkSize_args implements org.apache.thrift.TBase<setChunkSize_args, setChunkSize_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setChunkSize_args");

    private static final org.apache.thrift.protocol.TField CHUNK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("chunkSize", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setChunkSize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setChunkSize_argsTupleSchemeFactory());
    }

    public long chunkSize; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHUNK_SIZE((short)1, "chunkSize");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHUNK_SIZE
            return CHUNK_SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHUNKSIZE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHUNK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("chunkSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setChunkSize_args.class, metaDataMap);
    }

    public setChunkSize_args() {
    }

    public setChunkSize_args(
      long chunkSize)
    {
      this();
      this.chunkSize = chunkSize;
      setChunkSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setChunkSize_args(setChunkSize_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.chunkSize = other.chunkSize;
    }

    public setChunkSize_args deepCopy() {
      return new setChunkSize_args(this);
    }

    @Override
    public void clear() {
      setChunkSizeIsSet(false);
      this.chunkSize = 0;
    }

    public long getChunkSize() {
      return this.chunkSize;
    }

    public setChunkSize_args setChunkSize(long chunkSize) {
      this.chunkSize = chunkSize;
      setChunkSizeIsSet(true);
      return this;
    }

    public void unsetChunkSize() {
      __isset_bit_vector.clear(__CHUNKSIZE_ISSET_ID);
    }

    /** Returns true if field chunkSize is set (has been assigned a value) and false otherwise */
    public boolean isSetChunkSize() {
      return __isset_bit_vector.get(__CHUNKSIZE_ISSET_ID);
    }

    public void setChunkSizeIsSet(boolean value) {
      __isset_bit_vector.set(__CHUNKSIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHUNK_SIZE:
        if (value == null) {
          unsetChunkSize();
        } else {
          setChunkSize((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHUNK_SIZE:
        return Long.valueOf(getChunkSize());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHUNK_SIZE:
        return isSetChunkSize();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setChunkSize_args)
        return this.equals((setChunkSize_args)that);
      return false;
    }

    public boolean equals(setChunkSize_args that) {
      if (that == null)
        return false;

      boolean this_present_chunkSize = true;
      boolean that_present_chunkSize = true;
      if (this_present_chunkSize || that_present_chunkSize) {
        if (!(this_present_chunkSize && that_present_chunkSize))
          return false;
        if (this.chunkSize != that.chunkSize)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setChunkSize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setChunkSize_args typedOther = (setChunkSize_args)other;

      lastComparison = Boolean.valueOf(isSetChunkSize()).compareTo(typedOther.isSetChunkSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunkSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunkSize, typedOther.chunkSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setChunkSize_args(");
      boolean first = true;

      sb.append("chunkSize:");
      sb.append(this.chunkSize);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setChunkSize_argsStandardSchemeFactory implements SchemeFactory {
      public setChunkSize_argsStandardScheme getScheme() {
        return new setChunkSize_argsStandardScheme();
      }
    }

    private static class setChunkSize_argsStandardScheme extends StandardScheme<setChunkSize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setChunkSize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHUNK_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.chunkSize = iprot.readI64();
                struct.setChunkSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setChunkSize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CHUNK_SIZE_FIELD_DESC);
        oprot.writeI64(struct.chunkSize);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setChunkSize_argsTupleSchemeFactory implements SchemeFactory {
      public setChunkSize_argsTupleScheme getScheme() {
        return new setChunkSize_argsTupleScheme();
      }
    }

    private static class setChunkSize_argsTupleScheme extends TupleScheme<setChunkSize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setChunkSize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChunkSize()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChunkSize()) {
          oprot.writeI64(struct.chunkSize);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setChunkSize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.chunkSize = iprot.readI64();
          struct.setChunkSizeIsSet(true);
        }
      }
    }

  }

  public static class setChunkSize_result implements org.apache.thrift.TBase<setChunkSize_result, setChunkSize_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setChunkSize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setChunkSize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setChunkSize_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setChunkSize_result.class, metaDataMap);
    }

    public setChunkSize_result() {
    }

    public setChunkSize_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setChunkSize_result(setChunkSize_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public setChunkSize_result deepCopy() {
      return new setChunkSize_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setChunkSize_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public setChunkSize_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setChunkSize_result)
        return this.equals((setChunkSize_result)that);
      return false;
    }

    public boolean equals(setChunkSize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setChunkSize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setChunkSize_result typedOther = (setChunkSize_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setChunkSize_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setChunkSize_resultStandardSchemeFactory implements SchemeFactory {
      public setChunkSize_resultStandardScheme getScheme() {
        return new setChunkSize_resultStandardScheme();
      }
    }

    private static class setChunkSize_resultStandardScheme extends StandardScheme<setChunkSize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setChunkSize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setChunkSize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setChunkSize_resultTupleSchemeFactory implements SchemeFactory {
      public setChunkSize_resultTupleScheme getScheme() {
        return new setChunkSize_resultTupleScheme();
      }
    }

    private static class setChunkSize_resultTupleScheme extends TupleScheme<setChunkSize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setChunkSize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setChunkSize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class setReservedSpace_args implements org.apache.thrift.TBase<setReservedSpace_args, setReservedSpace_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setReservedSpace_args");

    private static final org.apache.thrift.protocol.TField RESERVED_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("reservedSpace", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setReservedSpace_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setReservedSpace_argsTupleSchemeFactory());
    }

    public long reservedSpace; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RESERVED_SPACE((short)1, "reservedSpace");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RESERVED_SPACE
            return RESERVED_SPACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RESERVEDSPACE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RESERVED_SPACE, new org.apache.thrift.meta_data.FieldMetaData("reservedSpace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setReservedSpace_args.class, metaDataMap);
    }

    public setReservedSpace_args() {
    }

    public setReservedSpace_args(
      long reservedSpace)
    {
      this();
      this.reservedSpace = reservedSpace;
      setReservedSpaceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setReservedSpace_args(setReservedSpace_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.reservedSpace = other.reservedSpace;
    }

    public setReservedSpace_args deepCopy() {
      return new setReservedSpace_args(this);
    }

    @Override
    public void clear() {
      setReservedSpaceIsSet(false);
      this.reservedSpace = 0;
    }

    public long getReservedSpace() {
      return this.reservedSpace;
    }

    public setReservedSpace_args setReservedSpace(long reservedSpace) {
      this.reservedSpace = reservedSpace;
      setReservedSpaceIsSet(true);
      return this;
    }

    public void unsetReservedSpace() {
      __isset_bit_vector.clear(__RESERVEDSPACE_ISSET_ID);
    }

    /** Returns true if field reservedSpace is set (has been assigned a value) and false otherwise */
    public boolean isSetReservedSpace() {
      return __isset_bit_vector.get(__RESERVEDSPACE_ISSET_ID);
    }

    public void setReservedSpaceIsSet(boolean value) {
      __isset_bit_vector.set(__RESERVEDSPACE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RESERVED_SPACE:
        if (value == null) {
          unsetReservedSpace();
        } else {
          setReservedSpace((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RESERVED_SPACE:
        return Long.valueOf(getReservedSpace());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RESERVED_SPACE:
        return isSetReservedSpace();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setReservedSpace_args)
        return this.equals((setReservedSpace_args)that);
      return false;
    }

    public boolean equals(setReservedSpace_args that) {
      if (that == null)
        return false;

      boolean this_present_reservedSpace = true;
      boolean that_present_reservedSpace = true;
      if (this_present_reservedSpace || that_present_reservedSpace) {
        if (!(this_present_reservedSpace && that_present_reservedSpace))
          return false;
        if (this.reservedSpace != that.reservedSpace)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setReservedSpace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setReservedSpace_args typedOther = (setReservedSpace_args)other;

      lastComparison = Boolean.valueOf(isSetReservedSpace()).compareTo(typedOther.isSetReservedSpace());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReservedSpace()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reservedSpace, typedOther.reservedSpace);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setReservedSpace_args(");
      boolean first = true;

      sb.append("reservedSpace:");
      sb.append(this.reservedSpace);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setReservedSpace_argsStandardSchemeFactory implements SchemeFactory {
      public setReservedSpace_argsStandardScheme getScheme() {
        return new setReservedSpace_argsStandardScheme();
      }
    }

    private static class setReservedSpace_argsStandardScheme extends StandardScheme<setReservedSpace_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setReservedSpace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RESERVED_SPACE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.reservedSpace = iprot.readI64();
                struct.setReservedSpaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setReservedSpace_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RESERVED_SPACE_FIELD_DESC);
        oprot.writeI64(struct.reservedSpace);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setReservedSpace_argsTupleSchemeFactory implements SchemeFactory {
      public setReservedSpace_argsTupleScheme getScheme() {
        return new setReservedSpace_argsTupleScheme();
      }
    }

    private static class setReservedSpace_argsTupleScheme extends TupleScheme<setReservedSpace_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setReservedSpace_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReservedSpace()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReservedSpace()) {
          oprot.writeI64(struct.reservedSpace);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setReservedSpace_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.reservedSpace = iprot.readI64();
          struct.setReservedSpaceIsSet(true);
        }
      }
    }

  }

  public static class setReservedSpace_result implements org.apache.thrift.TBase<setReservedSpace_result, setReservedSpace_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setReservedSpace_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setReservedSpace_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setReservedSpace_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setReservedSpace_result.class, metaDataMap);
    }

    public setReservedSpace_result() {
    }

    public setReservedSpace_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setReservedSpace_result(setReservedSpace_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public setReservedSpace_result deepCopy() {
      return new setReservedSpace_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setReservedSpace_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public setReservedSpace_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setReservedSpace_result)
        return this.equals((setReservedSpace_result)that);
      return false;
    }

    public boolean equals(setReservedSpace_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setReservedSpace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setReservedSpace_result typedOther = (setReservedSpace_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setReservedSpace_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setReservedSpace_resultStandardSchemeFactory implements SchemeFactory {
      public setReservedSpace_resultStandardScheme getScheme() {
        return new setReservedSpace_resultStandardScheme();
      }
    }

    private static class setReservedSpace_resultStandardScheme extends StandardScheme<setReservedSpace_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setReservedSpace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setReservedSpace_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setReservedSpace_resultTupleSchemeFactory implements SchemeFactory {
      public setReservedSpace_resultTupleScheme getScheme() {
        return new setReservedSpace_resultTupleScheme();
      }
    }

    private static class setReservedSpace_resultTupleScheme extends TupleScheme<setReservedSpace_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setReservedSpace_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setReservedSpace_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class setCloudServer_args implements org.apache.thrift.TBase<setCloudServer_args, setCloudServer_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCloudServer_args");

    private static final org.apache.thrift.protocol.TField CLOUD_SERVER_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudServerHost", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCloudServer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCloudServer_argsTupleSchemeFactory());
    }

    public String cloudServerHost; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_SERVER_HOST((short)1, "cloudServerHost");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_SERVER_HOST
            return CLOUD_SERVER_HOST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_SERVER_HOST, new org.apache.thrift.meta_data.FieldMetaData("cloudServerHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCloudServer_args.class, metaDataMap);
    }

    public setCloudServer_args() {
    }

    public setCloudServer_args(
      String cloudServerHost)
    {
      this();
      this.cloudServerHost = cloudServerHost;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCloudServer_args(setCloudServer_args other) {
      if (other.isSetCloudServerHost()) {
        this.cloudServerHost = other.cloudServerHost;
      }
    }

    public setCloudServer_args deepCopy() {
      return new setCloudServer_args(this);
    }

    @Override
    public void clear() {
      this.cloudServerHost = null;
    }

    public String getCloudServerHost() {
      return this.cloudServerHost;
    }

    public setCloudServer_args setCloudServerHost(String cloudServerHost) {
      this.cloudServerHost = cloudServerHost;
      return this;
    }

    public void unsetCloudServerHost() {
      this.cloudServerHost = null;
    }

    /** Returns true if field cloudServerHost is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudServerHost() {
      return this.cloudServerHost != null;
    }

    public void setCloudServerHostIsSet(boolean value) {
      if (!value) {
        this.cloudServerHost = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CLOUD_SERVER_HOST:
        if (value == null) {
          unsetCloudServerHost();
        } else {
          setCloudServerHost((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_SERVER_HOST:
        return getCloudServerHost();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_SERVER_HOST:
        return isSetCloudServerHost();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCloudServer_args)
        return this.equals((setCloudServer_args)that);
      return false;
    }

    public boolean equals(setCloudServer_args that) {
      if (that == null)
        return false;

      boolean this_present_cloudServerHost = true && this.isSetCloudServerHost();
      boolean that_present_cloudServerHost = true && that.isSetCloudServerHost();
      if (this_present_cloudServerHost || that_present_cloudServerHost) {
        if (!(this_present_cloudServerHost && that_present_cloudServerHost))
          return false;
        if (!this.cloudServerHost.equals(that.cloudServerHost))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setCloudServer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setCloudServer_args typedOther = (setCloudServer_args)other;

      lastComparison = Boolean.valueOf(isSetCloudServerHost()).compareTo(typedOther.isSetCloudServerHost());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudServerHost()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudServerHost, typedOther.cloudServerHost);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCloudServer_args(");
      boolean first = true;

      sb.append("cloudServerHost:");
      if (this.cloudServerHost == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudServerHost);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCloudServer_argsStandardSchemeFactory implements SchemeFactory {
      public setCloudServer_argsStandardScheme getScheme() {
        return new setCloudServer_argsStandardScheme();
      }
    }

    private static class setCloudServer_argsStandardScheme extends StandardScheme<setCloudServer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCloudServer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_SERVER_HOST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudServerHost = iprot.readString();
                struct.setCloudServerHostIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCloudServer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudServerHost != null) {
          oprot.writeFieldBegin(CLOUD_SERVER_HOST_FIELD_DESC);
          oprot.writeString(struct.cloudServerHost);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCloudServer_argsTupleSchemeFactory implements SchemeFactory {
      public setCloudServer_argsTupleScheme getScheme() {
        return new setCloudServer_argsTupleScheme();
      }
    }

    private static class setCloudServer_argsTupleScheme extends TupleScheme<setCloudServer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCloudServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCloudServerHost()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloudServerHost()) {
          oprot.writeString(struct.cloudServerHost);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCloudServer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cloudServerHost = iprot.readString();
          struct.setCloudServerHostIsSet(true);
        }
      }
    }

  }

  public static class setCloudServer_result implements org.apache.thrift.TBase<setCloudServer_result, setCloudServer_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setCloudServer_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setCloudServer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setCloudServer_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCloudServer_result.class, metaDataMap);
    }

    public setCloudServer_result() {
    }

    public setCloudServer_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setCloudServer_result(setCloudServer_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public setCloudServer_result deepCopy() {
      return new setCloudServer_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setCloudServer_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public setCloudServer_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setCloudServer_result)
        return this.equals((setCloudServer_result)that);
      return false;
    }

    public boolean equals(setCloudServer_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setCloudServer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setCloudServer_result typedOther = (setCloudServer_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setCloudServer_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setCloudServer_resultStandardSchemeFactory implements SchemeFactory {
      public setCloudServer_resultStandardScheme getScheme() {
        return new setCloudServer_resultStandardScheme();
      }
    }

    private static class setCloudServer_resultStandardScheme extends StandardScheme<setCloudServer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setCloudServer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setCloudServer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setCloudServer_resultTupleSchemeFactory implements SchemeFactory {
      public setCloudServer_resultTupleScheme getScheme() {
        return new setCloudServer_resultTupleScheme();
      }
    }

    private static class setCloudServer_resultTupleScheme extends TupleScheme<setCloudServer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setCloudServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setCloudServer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

}
