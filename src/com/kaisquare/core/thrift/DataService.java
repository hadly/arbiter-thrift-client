/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataService {

  /**
   * DataService - this service provides various data retrieval API.
   */
  public interface Iface {

    /**
     * Retrieve GPS location data.
     * 
     * (1) deviceId - ID of the device whose GPS data is requested
     * (2) startTimestamp - start time, ddMMyyyyHHmmss
     * (3) endTimeStamp - end time, ddMMyyyyHHmmss
     * 
     * Note: Set start and end timestamps to "" or null to get last known location.
     * 
     * @param deviceId
     * @param startTimestamp
     * @param endTimestamp
     */
    public List<LocationDataPoint> getGPSData(String deviceId, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException;

    /**
     * Retrieve events that occured for specified device within the
     * given time frame.
     * 
     * (1) deviceId - ID of the device whose GPS data is requested
     * (2) startTimestamp - start time, ddMMyyyyHHmmss
     * (3) endTimeStamp - end time, ddMMyyyyHHmmss
     * (4) type - the type of events to be fetched
     * 
     * 
     * @param deviceId
     * @param startTimestamp
     * @param endTimestamp
     * @param type
     */
    public List<com.kaisquare.events.thrift.EventDetails> getEvents(String deviceId, String startTimestamp, String endTimestamp, String type) throws CoreException, org.apache.thrift.TException;

    /**
     * Retrieve GSensor data.
     * 
     * (1) deviceId - ID of the device whose GSensor data is requested
     * (2) startTimestamp - start time, ddMMyyyyHHmmss
     * (3) endTimeStamp - end time, ddMMyyyyHHmmss
     * 
     * Note: Set start and end timestamps to "" or null to get last known gsensor data.
     * 
     * @param deviceId
     * @param startTimestamp
     * @param endTimestamp
     */
    public List<GSensorDataPoint> getGSensorData(String deviceId, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getGPSData(String deviceId, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getGPSData_call> resultHandler) throws org.apache.thrift.TException;

    public void getEvents(String deviceId, String startTimestamp, String endTimestamp, String type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getEvents_call> resultHandler) throws org.apache.thrift.TException;

    public void getGSensorData(String deviceId, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getGSensorData_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<LocationDataPoint> getGPSData(String deviceId, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException
    {
      send_getGPSData(deviceId, startTimestamp, endTimestamp);
      return recv_getGPSData();
    }

    public void send_getGPSData(String deviceId, String startTimestamp, String endTimestamp) throws org.apache.thrift.TException
    {
      getGPSData_args args = new getGPSData_args();
      args.setDeviceId(deviceId);
      args.setStartTimestamp(startTimestamp);
      args.setEndTimestamp(endTimestamp);
      sendBase("getGPSData", args);
    }

    public List<LocationDataPoint> recv_getGPSData() throws CoreException, org.apache.thrift.TException
    {
      getGPSData_result result = new getGPSData_result();
      receiveBase(result, "getGPSData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGPSData failed: unknown result");
    }

    public List<com.kaisquare.events.thrift.EventDetails> getEvents(String deviceId, String startTimestamp, String endTimestamp, String type) throws CoreException, org.apache.thrift.TException
    {
      send_getEvents(deviceId, startTimestamp, endTimestamp, type);
      return recv_getEvents();
    }

    public void send_getEvents(String deviceId, String startTimestamp, String endTimestamp, String type) throws org.apache.thrift.TException
    {
      getEvents_args args = new getEvents_args();
      args.setDeviceId(deviceId);
      args.setStartTimestamp(startTimestamp);
      args.setEndTimestamp(endTimestamp);
      args.setType(type);
      sendBase("getEvents", args);
    }

    public List<com.kaisquare.events.thrift.EventDetails> recv_getEvents() throws CoreException, org.apache.thrift.TException
    {
      getEvents_result result = new getEvents_result();
      receiveBase(result, "getEvents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEvents failed: unknown result");
    }

    public List<GSensorDataPoint> getGSensorData(String deviceId, String startTimestamp, String endTimestamp) throws CoreException, org.apache.thrift.TException
    {
      send_getGSensorData(deviceId, startTimestamp, endTimestamp);
      return recv_getGSensorData();
    }

    public void send_getGSensorData(String deviceId, String startTimestamp, String endTimestamp) throws org.apache.thrift.TException
    {
      getGSensorData_args args = new getGSensorData_args();
      args.setDeviceId(deviceId);
      args.setStartTimestamp(startTimestamp);
      args.setEndTimestamp(endTimestamp);
      sendBase("getGSensorData", args);
    }

    public List<GSensorDataPoint> recv_getGSensorData() throws CoreException, org.apache.thrift.TException
    {
      getGSensorData_result result = new getGSensorData_result();
      receiveBase(result, "getGSensorData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGSensorData failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getGPSData(String deviceId, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<getGPSData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGPSData_call method_call = new getGPSData_call(deviceId, startTimestamp, endTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGPSData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String startTimestamp;
      private String endTimestamp;
      public getGPSData_call(String deviceId, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<getGPSData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGPSData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGPSData_args args = new getGPSData_args();
        args.setDeviceId(deviceId);
        args.setStartTimestamp(startTimestamp);
        args.setEndTimestamp(endTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<LocationDataPoint> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGPSData();
      }
    }

    public void getEvents(String deviceId, String startTimestamp, String endTimestamp, String type, org.apache.thrift.async.AsyncMethodCallback<getEvents_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEvents_call method_call = new getEvents_call(deviceId, startTimestamp, endTimestamp, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEvents_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String startTimestamp;
      private String endTimestamp;
      private String type;
      public getEvents_call(String deviceId, String startTimestamp, String endTimestamp, String type, org.apache.thrift.async.AsyncMethodCallback<getEvents_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEvents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEvents_args args = new getEvents_args();
        args.setDeviceId(deviceId);
        args.setStartTimestamp(startTimestamp);
        args.setEndTimestamp(endTimestamp);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.kaisquare.events.thrift.EventDetails> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEvents();
      }
    }

    public void getGSensorData(String deviceId, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<getGSensorData_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGSensorData_call method_call = new getGSensorData_call(deviceId, startTimestamp, endTimestamp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGSensorData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      private String startTimestamp;
      private String endTimestamp;
      public getGSensorData_call(String deviceId, String startTimestamp, String endTimestamp, org.apache.thrift.async.AsyncMethodCallback<getGSensorData_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
        this.startTimestamp = startTimestamp;
        this.endTimestamp = endTimestamp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGSensorData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGSensorData_args args = new getGSensorData_args();
        args.setDeviceId(deviceId);
        args.setStartTimestamp(startTimestamp);
        args.setEndTimestamp(endTimestamp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<GSensorDataPoint> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGSensorData();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getGPSData", new getGPSData());
      processMap.put("getEvents", new getEvents());
      processMap.put("getGSensorData", new getGSensorData());
      return processMap;
    }

    private static class getGPSData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGPSData_args> {
      public getGPSData() {
        super("getGPSData");
      }

      protected getGPSData_args getEmptyArgsInstance() {
        return new getGPSData_args();
      }

      protected getGPSData_result getResult(I iface, getGPSData_args args) throws org.apache.thrift.TException {
        getGPSData_result result = new getGPSData_result();
        try {
          result.success = iface.getGPSData(args.deviceId, args.startTimestamp, args.endTimestamp);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class getEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEvents_args> {
      public getEvents() {
        super("getEvents");
      }

      protected getEvents_args getEmptyArgsInstance() {
        return new getEvents_args();
      }

      protected getEvents_result getResult(I iface, getEvents_args args) throws org.apache.thrift.TException {
        getEvents_result result = new getEvents_result();
        try {
          result.success = iface.getEvents(args.deviceId, args.startTimestamp, args.endTimestamp, args.type);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class getGSensorData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGSensorData_args> {
      public getGSensorData() {
        super("getGSensorData");
      }

      protected getGSensorData_args getEmptyArgsInstance() {
        return new getGSensorData_args();
      }

      protected getGSensorData_result getResult(I iface, getGSensorData_args args) throws org.apache.thrift.TException {
        getGSensorData_result result = new getGSensorData_result();
        try {
          result.success = iface.getGSensorData(args.deviceId, args.startTimestamp, args.endTimestamp);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

  }

  public static class getGPSData_args implements org.apache.thrift.TBase<getGPSData_args, getGPSData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGPSData_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestamp", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGPSData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGPSData_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String startTimestamp; // required
    public String endTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      START_TIMESTAMP((short)2, "startTimestamp"),
      END_TIMESTAMP((short)3, "endTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // START_TIMESTAMP
            return START_TIMESTAMP;
          case 3: // END_TIMESTAMP
            return END_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("endTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGPSData_args.class, metaDataMap);
    }

    public getGPSData_args() {
    }

    public getGPSData_args(
      String deviceId,
      String startTimestamp,
      String endTimestamp)
    {
      this();
      this.deviceId = deviceId;
      this.startTimestamp = startTimestamp;
      this.endTimestamp = endTimestamp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGPSData_args(getGPSData_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetStartTimestamp()) {
        this.startTimestamp = other.startTimestamp;
      }
      if (other.isSetEndTimestamp()) {
        this.endTimestamp = other.endTimestamp;
      }
    }

    public getGPSData_args deepCopy() {
      return new getGPSData_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.startTimestamp = null;
      this.endTimestamp = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public getGPSData_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getStartTimestamp() {
      return this.startTimestamp;
    }

    public getGPSData_args setStartTimestamp(String startTimestamp) {
      this.startTimestamp = startTimestamp;
      return this;
    }

    public void unsetStartTimestamp() {
      this.startTimestamp = null;
    }

    /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTimestamp() {
      return this.startTimestamp != null;
    }

    public void setStartTimestampIsSet(boolean value) {
      if (!value) {
        this.startTimestamp = null;
      }
    }

    public String getEndTimestamp() {
      return this.endTimestamp;
    }

    public getGPSData_args setEndTimestamp(String endTimestamp) {
      this.endTimestamp = endTimestamp;
      return this;
    }

    public void unsetEndTimestamp() {
      this.endTimestamp = null;
    }

    /** Returns true if field endTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTimestamp() {
      return this.endTimestamp != null;
    }

    public void setEndTimestampIsSet(boolean value) {
      if (!value) {
        this.endTimestamp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case START_TIMESTAMP:
        if (value == null) {
          unsetStartTimestamp();
        } else {
          setStartTimestamp((String)value);
        }
        break;

      case END_TIMESTAMP:
        if (value == null) {
          unsetEndTimestamp();
        } else {
          setEndTimestamp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case START_TIMESTAMP:
        return getStartTimestamp();

      case END_TIMESTAMP:
        return getEndTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case START_TIMESTAMP:
        return isSetStartTimestamp();
      case END_TIMESTAMP:
        return isSetEndTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGPSData_args)
        return this.equals((getGPSData_args)that);
      return false;
    }

    public boolean equals(getGPSData_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
      boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
      if (this_present_startTimestamp || that_present_startTimestamp) {
        if (!(this_present_startTimestamp && that_present_startTimestamp))
          return false;
        if (!this.startTimestamp.equals(that.startTimestamp))
          return false;
      }

      boolean this_present_endTimestamp = true && this.isSetEndTimestamp();
      boolean that_present_endTimestamp = true && that.isSetEndTimestamp();
      if (this_present_endTimestamp || that_present_endTimestamp) {
        if (!(this_present_endTimestamp && that_present_endTimestamp))
          return false;
        if (!this.endTimestamp.equals(that.endTimestamp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGPSData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGPSData_args typedOther = (getGPSData_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTimestamp()).compareTo(typedOther.isSetEndTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestamp, typedOther.endTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGPSData_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      if (this.startTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.startTimestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTimestamp:");
      if (this.endTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.endTimestamp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGPSData_argsStandardSchemeFactory implements SchemeFactory {
      public getGPSData_argsStandardScheme getScheme() {
        return new getGPSData_argsStandardScheme();
      }
    }

    private static class getGPSData_argsStandardScheme extends StandardScheme<getGPSData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGPSData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTimestamp = iprot.readString();
                struct.setStartTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTimestamp = iprot.readString();
                struct.setEndTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGPSData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.startTimestamp != null) {
          oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.startTimestamp);
          oprot.writeFieldEnd();
        }
        if (struct.endTimestamp != null) {
          oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.endTimestamp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGPSData_argsTupleSchemeFactory implements SchemeFactory {
      public getGPSData_argsTupleScheme getScheme() {
        return new getGPSData_argsTupleScheme();
      }
    }

    private static class getGPSData_argsTupleScheme extends TupleScheme<getGPSData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGPSData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetStartTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetEndTimestamp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetStartTimestamp()) {
          oprot.writeString(struct.startTimestamp);
        }
        if (struct.isSetEndTimestamp()) {
          oprot.writeString(struct.endTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGPSData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTimestamp = iprot.readString();
          struct.setStartTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endTimestamp = iprot.readString();
          struct.setEndTimestampIsSet(true);
        }
      }
    }

  }

  public static class getGPSData_result implements org.apache.thrift.TBase<getGPSData_result, getGPSData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGPSData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGPSData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGPSData_resultTupleSchemeFactory());
    }

    public List<LocationDataPoint> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LocationDataPoint.class))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGPSData_result.class, metaDataMap);
    }

    public getGPSData_result() {
    }

    public getGPSData_result(
      List<LocationDataPoint> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGPSData_result(getGPSData_result other) {
      if (other.isSetSuccess()) {
        List<LocationDataPoint> __this__success = new ArrayList<LocationDataPoint>();
        for (LocationDataPoint other_element : other.success) {
          __this__success.add(new LocationDataPoint(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public getGPSData_result deepCopy() {
      return new getGPSData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<LocationDataPoint> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(LocationDataPoint elem) {
      if (this.success == null) {
        this.success = new ArrayList<LocationDataPoint>();
      }
      this.success.add(elem);
    }

    public List<LocationDataPoint> getSuccess() {
      return this.success;
    }

    public getGPSData_result setSuccess(List<LocationDataPoint> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public getGPSData_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<LocationDataPoint>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGPSData_result)
        return this.equals((getGPSData_result)that);
      return false;
    }

    public boolean equals(getGPSData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGPSData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGPSData_result typedOther = (getGPSData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGPSData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGPSData_resultStandardSchemeFactory implements SchemeFactory {
      public getGPSData_resultStandardScheme getScheme() {
        return new getGPSData_resultStandardScheme();
      }
    }

    private static class getGPSData_resultStandardScheme extends StandardScheme<getGPSData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGPSData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<LocationDataPoint>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    LocationDataPoint _elem66; // required
                    _elem66 = new LocationDataPoint();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGPSData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (LocationDataPoint _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGPSData_resultTupleSchemeFactory implements SchemeFactory {
      public getGPSData_resultTupleScheme getScheme() {
        return new getGPSData_resultTupleScheme();
      }
    }

    private static class getGPSData_resultTupleScheme extends TupleScheme<getGPSData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGPSData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (LocationDataPoint _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGPSData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<LocationDataPoint>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              LocationDataPoint _elem71; // required
              _elem71 = new LocationDataPoint();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class getEvents_args implements org.apache.thrift.TBase<getEvents_args, getEvents_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvents_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestamp", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEvents_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEvents_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String startTimestamp; // required
    public String endTimestamp; // required
    public String type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      START_TIMESTAMP((short)2, "startTimestamp"),
      END_TIMESTAMP((short)3, "endTimestamp"),
      TYPE((short)4, "type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // START_TIMESTAMP
            return START_TIMESTAMP;
          case 3: // END_TIMESTAMP
            return END_TIMESTAMP;
          case 4: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("endTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvents_args.class, metaDataMap);
    }

    public getEvents_args() {
    }

    public getEvents_args(
      String deviceId,
      String startTimestamp,
      String endTimestamp,
      String type)
    {
      this();
      this.deviceId = deviceId;
      this.startTimestamp = startTimestamp;
      this.endTimestamp = endTimestamp;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEvents_args(getEvents_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetStartTimestamp()) {
        this.startTimestamp = other.startTimestamp;
      }
      if (other.isSetEndTimestamp()) {
        this.endTimestamp = other.endTimestamp;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public getEvents_args deepCopy() {
      return new getEvents_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.startTimestamp = null;
      this.endTimestamp = null;
      this.type = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public getEvents_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getStartTimestamp() {
      return this.startTimestamp;
    }

    public getEvents_args setStartTimestamp(String startTimestamp) {
      this.startTimestamp = startTimestamp;
      return this;
    }

    public void unsetStartTimestamp() {
      this.startTimestamp = null;
    }

    /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTimestamp() {
      return this.startTimestamp != null;
    }

    public void setStartTimestampIsSet(boolean value) {
      if (!value) {
        this.startTimestamp = null;
      }
    }

    public String getEndTimestamp() {
      return this.endTimestamp;
    }

    public getEvents_args setEndTimestamp(String endTimestamp) {
      this.endTimestamp = endTimestamp;
      return this;
    }

    public void unsetEndTimestamp() {
      this.endTimestamp = null;
    }

    /** Returns true if field endTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTimestamp() {
      return this.endTimestamp != null;
    }

    public void setEndTimestampIsSet(boolean value) {
      if (!value) {
        this.endTimestamp = null;
      }
    }

    public String getType() {
      return this.type;
    }

    public getEvents_args setType(String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case START_TIMESTAMP:
        if (value == null) {
          unsetStartTimestamp();
        } else {
          setStartTimestamp((String)value);
        }
        break;

      case END_TIMESTAMP:
        if (value == null) {
          unsetEndTimestamp();
        } else {
          setEndTimestamp((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case START_TIMESTAMP:
        return getStartTimestamp();

      case END_TIMESTAMP:
        return getEndTimestamp();

      case TYPE:
        return getType();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case START_TIMESTAMP:
        return isSetStartTimestamp();
      case END_TIMESTAMP:
        return isSetEndTimestamp();
      case TYPE:
        return isSetType();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEvents_args)
        return this.equals((getEvents_args)that);
      return false;
    }

    public boolean equals(getEvents_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
      boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
      if (this_present_startTimestamp || that_present_startTimestamp) {
        if (!(this_present_startTimestamp && that_present_startTimestamp))
          return false;
        if (!this.startTimestamp.equals(that.startTimestamp))
          return false;
      }

      boolean this_present_endTimestamp = true && this.isSetEndTimestamp();
      boolean that_present_endTimestamp = true && that.isSetEndTimestamp();
      if (this_present_endTimestamp || that_present_endTimestamp) {
        if (!(this_present_endTimestamp && that_present_endTimestamp))
          return false;
        if (!this.endTimestamp.equals(that.endTimestamp))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEvents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEvents_args typedOther = (getEvents_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTimestamp()).compareTo(typedOther.isSetEndTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestamp, typedOther.endTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEvents_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      if (this.startTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.startTimestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTimestamp:");
      if (this.endTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.endTimestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEvents_argsStandardSchemeFactory implements SchemeFactory {
      public getEvents_argsStandardScheme getScheme() {
        return new getEvents_argsStandardScheme();
      }
    }

    private static class getEvents_argsStandardScheme extends StandardScheme<getEvents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTimestamp = iprot.readString();
                struct.setStartTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTimestamp = iprot.readString();
                struct.setEndTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEvents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.startTimestamp != null) {
          oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.startTimestamp);
          oprot.writeFieldEnd();
        }
        if (struct.endTimestamp != null) {
          oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.endTimestamp);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEvents_argsTupleSchemeFactory implements SchemeFactory {
      public getEvents_argsTupleScheme getScheme() {
        return new getEvents_argsTupleScheme();
      }
    }

    private static class getEvents_argsTupleScheme extends TupleScheme<getEvents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEvents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetStartTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetEndTimestamp()) {
          optionals.set(2);
        }
        if (struct.isSetType()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetStartTimestamp()) {
          oprot.writeString(struct.startTimestamp);
        }
        if (struct.isSetEndTimestamp()) {
          oprot.writeString(struct.endTimestamp);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEvents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTimestamp = iprot.readString();
          struct.setStartTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endTimestamp = iprot.readString();
          struct.setEndTimestampIsSet(true);
        }
        if (incoming.get(3)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
      }
    }

  }

  public static class getEvents_result implements org.apache.thrift.TBase<getEvents_result, getEvents_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEvents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEvents_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEvents_resultTupleSchemeFactory());
    }

    public List<com.kaisquare.events.thrift.EventDetails> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.kaisquare.events.thrift.EventDetails.class))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEvents_result.class, metaDataMap);
    }

    public getEvents_result() {
    }

    public getEvents_result(
      List<com.kaisquare.events.thrift.EventDetails> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEvents_result(getEvents_result other) {
      if (other.isSetSuccess()) {
        List<com.kaisquare.events.thrift.EventDetails> __this__success = new ArrayList<com.kaisquare.events.thrift.EventDetails>();
        for (com.kaisquare.events.thrift.EventDetails other_element : other.success) {
          __this__success.add(new com.kaisquare.events.thrift.EventDetails(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public getEvents_result deepCopy() {
      return new getEvents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.kaisquare.events.thrift.EventDetails> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.kaisquare.events.thrift.EventDetails elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.kaisquare.events.thrift.EventDetails>();
      }
      this.success.add(elem);
    }

    public List<com.kaisquare.events.thrift.EventDetails> getSuccess() {
      return this.success;
    }

    public getEvents_result setSuccess(List<com.kaisquare.events.thrift.EventDetails> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public getEvents_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.kaisquare.events.thrift.EventDetails>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEvents_result)
        return this.equals((getEvents_result)that);
      return false;
    }

    public boolean equals(getEvents_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getEvents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getEvents_result typedOther = (getEvents_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEvents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEvents_resultStandardSchemeFactory implements SchemeFactory {
      public getEvents_resultStandardScheme getScheme() {
        return new getEvents_resultStandardScheme();
      }
    }

    private static class getEvents_resultStandardScheme extends StandardScheme<getEvents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<com.kaisquare.events.thrift.EventDetails>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    com.kaisquare.events.thrift.EventDetails _elem74; // required
                    _elem74 = new com.kaisquare.events.thrift.EventDetails();
                    _elem74.read(iprot);
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEvents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.kaisquare.events.thrift.EventDetails _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEvents_resultTupleSchemeFactory implements SchemeFactory {
      public getEvents_resultTupleScheme getScheme() {
        return new getEvents_resultTupleScheme();
      }
    }

    private static class getEvents_resultTupleScheme extends TupleScheme<getEvents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEvents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.kaisquare.events.thrift.EventDetails _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEvents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.kaisquare.events.thrift.EventDetails>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              com.kaisquare.events.thrift.EventDetails _elem79; // required
              _elem79 = new com.kaisquare.events.thrift.EventDetails();
              _elem79.read(iprot);
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class getGSensorData_args implements org.apache.thrift.TBase<getGSensorData_args, getGSensorData_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGSensorData_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestamp", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGSensorData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGSensorData_argsTupleSchemeFactory());
    }

    public String deviceId; // required
    public String startTimestamp; // required
    public String endTimestamp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId"),
      START_TIMESTAMP((short)2, "startTimestamp"),
      END_TIMESTAMP((short)3, "endTimestamp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          case 2: // START_TIMESTAMP
            return START_TIMESTAMP;
          case 3: // END_TIMESTAMP
            return END_TIMESTAMP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("endTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGSensorData_args.class, metaDataMap);
    }

    public getGSensorData_args() {
    }

    public getGSensorData_args(
      String deviceId,
      String startTimestamp,
      String endTimestamp)
    {
      this();
      this.deviceId = deviceId;
      this.startTimestamp = startTimestamp;
      this.endTimestamp = endTimestamp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGSensorData_args(getGSensorData_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
      if (other.isSetStartTimestamp()) {
        this.startTimestamp = other.startTimestamp;
      }
      if (other.isSetEndTimestamp()) {
        this.endTimestamp = other.endTimestamp;
      }
    }

    public getGSensorData_args deepCopy() {
      return new getGSensorData_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
      this.startTimestamp = null;
      this.endTimestamp = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public getGSensorData_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public String getStartTimestamp() {
      return this.startTimestamp;
    }

    public getGSensorData_args setStartTimestamp(String startTimestamp) {
      this.startTimestamp = startTimestamp;
      return this;
    }

    public void unsetStartTimestamp() {
      this.startTimestamp = null;
    }

    /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetStartTimestamp() {
      return this.startTimestamp != null;
    }

    public void setStartTimestampIsSet(boolean value) {
      if (!value) {
        this.startTimestamp = null;
      }
    }

    public String getEndTimestamp() {
      return this.endTimestamp;
    }

    public getGSensorData_args setEndTimestamp(String endTimestamp) {
      this.endTimestamp = endTimestamp;
      return this;
    }

    public void unsetEndTimestamp() {
      this.endTimestamp = null;
    }

    /** Returns true if field endTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetEndTimestamp() {
      return this.endTimestamp != null;
    }

    public void setEndTimestampIsSet(boolean value) {
      if (!value) {
        this.endTimestamp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      case START_TIMESTAMP:
        if (value == null) {
          unsetStartTimestamp();
        } else {
          setStartTimestamp((String)value);
        }
        break;

      case END_TIMESTAMP:
        if (value == null) {
          unsetEndTimestamp();
        } else {
          setEndTimestamp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      case START_TIMESTAMP:
        return getStartTimestamp();

      case END_TIMESTAMP:
        return getEndTimestamp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      case START_TIMESTAMP:
        return isSetStartTimestamp();
      case END_TIMESTAMP:
        return isSetEndTimestamp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGSensorData_args)
        return this.equals((getGSensorData_args)that);
      return false;
    }

    public boolean equals(getGSensorData_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
      boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
      if (this_present_startTimestamp || that_present_startTimestamp) {
        if (!(this_present_startTimestamp && that_present_startTimestamp))
          return false;
        if (!this.startTimestamp.equals(that.startTimestamp))
          return false;
      }

      boolean this_present_endTimestamp = true && this.isSetEndTimestamp();
      boolean that_present_endTimestamp = true && that.isSetEndTimestamp();
      if (this_present_endTimestamp || that_present_endTimestamp) {
        if (!(this_present_endTimestamp && that_present_endTimestamp))
          return false;
        if (!this.endTimestamp.equals(that.endTimestamp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGSensorData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGSensorData_args typedOther = (getGSensorData_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEndTimestamp()).compareTo(typedOther.isSetEndTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestamp, typedOther.endTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGSensorData_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      if (this.startTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.startTimestamp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endTimestamp:");
      if (this.endTimestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.endTimestamp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGSensorData_argsStandardSchemeFactory implements SchemeFactory {
      public getGSensorData_argsStandardScheme getScheme() {
        return new getGSensorData_argsStandardScheme();
      }
    }

    private static class getGSensorData_argsStandardScheme extends StandardScheme<getGSensorData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGSensorData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startTimestamp = iprot.readString();
                struct.setStartTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endTimestamp = iprot.readString();
                struct.setEndTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGSensorData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        if (struct.startTimestamp != null) {
          oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.startTimestamp);
          oprot.writeFieldEnd();
        }
        if (struct.endTimestamp != null) {
          oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
          oprot.writeString(struct.endTimestamp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGSensorData_argsTupleSchemeFactory implements SchemeFactory {
      public getGSensorData_argsTupleScheme getScheme() {
        return new getGSensorData_argsTupleScheme();
      }
    }

    private static class getGSensorData_argsTupleScheme extends TupleScheme<getGSensorData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGSensorData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        if (struct.isSetStartTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetEndTimestamp()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
        if (struct.isSetStartTimestamp()) {
          oprot.writeString(struct.startTimestamp);
        }
        if (struct.isSetEndTimestamp()) {
          oprot.writeString(struct.endTimestamp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGSensorData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.startTimestamp = iprot.readString();
          struct.setStartTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.endTimestamp = iprot.readString();
          struct.setEndTimestampIsSet(true);
        }
      }
    }

  }

  public static class getGSensorData_result implements org.apache.thrift.TBase<getGSensorData_result, getGSensorData_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGSensorData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGSensorData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGSensorData_resultTupleSchemeFactory());
    }

    public List<GSensorDataPoint> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GSensorDataPoint.class))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGSensorData_result.class, metaDataMap);
    }

    public getGSensorData_result() {
    }

    public getGSensorData_result(
      List<GSensorDataPoint> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGSensorData_result(getGSensorData_result other) {
      if (other.isSetSuccess()) {
        List<GSensorDataPoint> __this__success = new ArrayList<GSensorDataPoint>();
        for (GSensorDataPoint other_element : other.success) {
          __this__success.add(new GSensorDataPoint(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public getGSensorData_result deepCopy() {
      return new getGSensorData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<GSensorDataPoint> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(GSensorDataPoint elem) {
      if (this.success == null) {
        this.success = new ArrayList<GSensorDataPoint>();
      }
      this.success.add(elem);
    }

    public List<GSensorDataPoint> getSuccess() {
      return this.success;
    }

    public getGSensorData_result setSuccess(List<GSensorDataPoint> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public getGSensorData_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<GSensorDataPoint>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGSensorData_result)
        return this.equals((getGSensorData_result)that);
      return false;
    }

    public boolean equals(getGSensorData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getGSensorData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getGSensorData_result typedOther = (getGSensorData_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGSensorData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGSensorData_resultStandardSchemeFactory implements SchemeFactory {
      public getGSensorData_resultStandardScheme getScheme() {
        return new getGSensorData_resultStandardScheme();
      }
    }

    private static class getGSensorData_resultStandardScheme extends StandardScheme<getGSensorData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGSensorData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<GSensorDataPoint>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    GSensorDataPoint _elem82; // required
                    _elem82 = new GSensorDataPoint();
                    _elem82.read(iprot);
                    struct.success.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGSensorData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (GSensorDataPoint _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGSensorData_resultTupleSchemeFactory implements SchemeFactory {
      public getGSensorData_resultTupleScheme getScheme() {
        return new getGSensorData_resultTupleScheme();
      }
    }

    private static class getGSensorData_resultTupleScheme extends TupleScheme<getGSensorData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGSensorData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (GSensorDataPoint _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGSensorData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<GSensorDataPoint>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              GSensorDataPoint _elem87; // required
              _elem87 = new GSensorDataPoint();
              _elem87.read(iprot);
              struct.success.add(_elem87);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

}
