/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DeviceManagementService {

  /**
   * DeviceManagementService - this service provides API for management of devices
   */
  public interface Iface {

    /**
     * Add a new device model to the system. This function will be typically called
     * from an administrative user interface. This happens when a new model of
     * devices is about to be introduced.
     * 
     * Model should be added to database and model ID should be assigned. This
     * device is not yet "activated". When a user buys this device, they will log
     * in to the system and activate this device.
     * 
     * (1) model - The model object/structure with the modelId field empty. The
     *              modelId is generated by Core Engine/RMS+.
     * 
     * Returns the "model ID" generated by Core Engine/RMS+.
     * 
     * @param model
     */
    public String addModel(DeviceModel model) throws CoreException, org.apache.thrift.TException;

    /**
     * Update model.
     * 
     * (1) model - The model object/structure with a valid modelId. The
     *              corresponding model gets updated in database.
     * 
     * Returns TRUE on success, FALSE otherwise.
     * 
     * @param model
     */
    public boolean updateModel(DeviceModel model) throws CoreException, org.apache.thrift.TException;

    /**
     * Delete model.
     * 
     * (1) modelId - ID of the model to be deleted.
     * 
     * Returns TRUE on success, FALSE otherwise.
     * 
     * @param modelId
     */
    public boolean deleteModel(String modelId) throws CoreException, org.apache.thrift.TException;

    /**
     * Get list of models.
     * 
     * Returns a list of all models in the system.
     */
    public List<DeviceModel> listModels() throws CoreException, org.apache.thrift.TException;

    /**
     * Add a new device to the system. This function will be typically called
     * from an administrative user interface. This happens when a new batch of
     * devices is about to be shipped out to market.
     * 
     * Device should be added to database and device ID should be assigned. This
     * device is not yet "activated". When a user buys this device, they will log
     * in to the system and activate this device.
     * 
     * If the 'key' field contains MAC address and modelId contains a valid model ID,
     * rest of the fields can be empty and backend should accept this. In this situation
     * the backend should set rest of the fields to their default values. The defaults
     * could be different for different device models.
     * 
     * (1) device - The device object/structure with the deviceId field empty. The
     *              deviceId is generated by Core Engine/RMS+.
     * 
     * Returns the "device ID" generated by Core Engine/RMS+.
     * 
     * @param device
     */
    public String addDevice(DeviceDetails device) throws CoreException, org.apache.thrift.TException;

    /**
     * Update device.
     * 
     * (1) device - The device object/structure with a valid deviceId. The
     *              corresponding device gets updated in database.
     * 
     * Returns TRUE on success, FALSE otherwise.
     * 
     * @param device
     */
    public boolean updateDevice(DeviceDetails device) throws CoreException, org.apache.thrift.TException;

    /**
     * Delete device.
     * 
     * (1) deviceId - ID of the device to be deleted.
     * 
     * Returns TRUE on success, FALSE otherwise.
     * 
     * @param deviceId
     */
    public boolean deleteDevice(String deviceId) throws CoreException, org.apache.thrift.TException;

    /**
     * Get list of devices.
     * 
     * (1) filter - "all" for all devices, "pending" for devices which are
     *              not yet activated, "active" for all active devices.
     * 
     * Returns a list of devices in the system.
     * 
     * @param filter
     */
    public List<DeviceDetails> listDevices(String filter) throws CoreException, org.apache.thrift.TException;

    /**
     * Get details of a device.
     * 
     * (1) deviceId - ID of the device.
     * 
     * Returns details of the specified device.
     * 
     * @param deviceId
     */
    public DeviceDetails getDevice(String deviceId) throws CoreException, org.apache.thrift.TException;

    /**
     * Activate device. This function will typically be called from user
     * account interface.
     * 
     * (1) device - The device to be activated.
     * 
     * Returns TRUE on success, FALSE otherwise.
     * 
     * @param device
     */
    public boolean activateDevice(DeviceDetails device) throws CoreException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void addModel(DeviceModel model, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addModel_call> resultHandler) throws org.apache.thrift.TException;

    public void updateModel(DeviceModel model, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateModel_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteModel(String modelId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteModel_call> resultHandler) throws org.apache.thrift.TException;

    public void listModels(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listModels_call> resultHandler) throws org.apache.thrift.TException;

    public void addDevice(DeviceDetails device, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.addDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void updateDevice(DeviceDetails device, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.updateDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteDevice(String deviceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void listDevices(String filter, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.listDevices_call> resultHandler) throws org.apache.thrift.TException;

    public void getDevice(String deviceId, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDevice_call> resultHandler) throws org.apache.thrift.TException;

    public void activateDevice(DeviceDetails device, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.activateDevice_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String addModel(DeviceModel model) throws CoreException, org.apache.thrift.TException
    {
      send_addModel(model);
      return recv_addModel();
    }

    public void send_addModel(DeviceModel model) throws org.apache.thrift.TException
    {
      addModel_args args = new addModel_args();
      args.setModel(model);
      sendBase("addModel", args);
    }

    public String recv_addModel() throws CoreException, org.apache.thrift.TException
    {
      addModel_result result = new addModel_result();
      receiveBase(result, "addModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addModel failed: unknown result");
    }

    public boolean updateModel(DeviceModel model) throws CoreException, org.apache.thrift.TException
    {
      send_updateModel(model);
      return recv_updateModel();
    }

    public void send_updateModel(DeviceModel model) throws org.apache.thrift.TException
    {
      updateModel_args args = new updateModel_args();
      args.setModel(model);
      sendBase("updateModel", args);
    }

    public boolean recv_updateModel() throws CoreException, org.apache.thrift.TException
    {
      updateModel_result result = new updateModel_result();
      receiveBase(result, "updateModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateModel failed: unknown result");
    }

    public boolean deleteModel(String modelId) throws CoreException, org.apache.thrift.TException
    {
      send_deleteModel(modelId);
      return recv_deleteModel();
    }

    public void send_deleteModel(String modelId) throws org.apache.thrift.TException
    {
      deleteModel_args args = new deleteModel_args();
      args.setModelId(modelId);
      sendBase("deleteModel", args);
    }

    public boolean recv_deleteModel() throws CoreException, org.apache.thrift.TException
    {
      deleteModel_result result = new deleteModel_result();
      receiveBase(result, "deleteModel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteModel failed: unknown result");
    }

    public List<DeviceModel> listModels() throws CoreException, org.apache.thrift.TException
    {
      send_listModels();
      return recv_listModels();
    }

    public void send_listModels() throws org.apache.thrift.TException
    {
      listModels_args args = new listModels_args();
      sendBase("listModels", args);
    }

    public List<DeviceModel> recv_listModels() throws CoreException, org.apache.thrift.TException
    {
      listModels_result result = new listModels_result();
      receiveBase(result, "listModels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listModels failed: unknown result");
    }

    public String addDevice(DeviceDetails device) throws CoreException, org.apache.thrift.TException
    {
      send_addDevice(device);
      return recv_addDevice();
    }

    public void send_addDevice(DeviceDetails device) throws org.apache.thrift.TException
    {
      addDevice_args args = new addDevice_args();
      args.setDevice(device);
      sendBase("addDevice", args);
    }

    public String recv_addDevice() throws CoreException, org.apache.thrift.TException
    {
      addDevice_result result = new addDevice_result();
      receiveBase(result, "addDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addDevice failed: unknown result");
    }

    public boolean updateDevice(DeviceDetails device) throws CoreException, org.apache.thrift.TException
    {
      send_updateDevice(device);
      return recv_updateDevice();
    }

    public void send_updateDevice(DeviceDetails device) throws org.apache.thrift.TException
    {
      updateDevice_args args = new updateDevice_args();
      args.setDevice(device);
      sendBase("updateDevice", args);
    }

    public boolean recv_updateDevice() throws CoreException, org.apache.thrift.TException
    {
      updateDevice_result result = new updateDevice_result();
      receiveBase(result, "updateDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateDevice failed: unknown result");
    }

    public boolean deleteDevice(String deviceId) throws CoreException, org.apache.thrift.TException
    {
      send_deleteDevice(deviceId);
      return recv_deleteDevice();
    }

    public void send_deleteDevice(String deviceId) throws org.apache.thrift.TException
    {
      deleteDevice_args args = new deleteDevice_args();
      args.setDeviceId(deviceId);
      sendBase("deleteDevice", args);
    }

    public boolean recv_deleteDevice() throws CoreException, org.apache.thrift.TException
    {
      deleteDevice_result result = new deleteDevice_result();
      receiveBase(result, "deleteDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteDevice failed: unknown result");
    }

    public List<DeviceDetails> listDevices(String filter) throws CoreException, org.apache.thrift.TException
    {
      send_listDevices(filter);
      return recv_listDevices();
    }

    public void send_listDevices(String filter) throws org.apache.thrift.TException
    {
      listDevices_args args = new listDevices_args();
      args.setFilter(filter);
      sendBase("listDevices", args);
    }

    public List<DeviceDetails> recv_listDevices() throws CoreException, org.apache.thrift.TException
    {
      listDevices_result result = new listDevices_result();
      receiveBase(result, "listDevices");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listDevices failed: unknown result");
    }

    public DeviceDetails getDevice(String deviceId) throws CoreException, org.apache.thrift.TException
    {
      send_getDevice(deviceId);
      return recv_getDevice();
    }

    public void send_getDevice(String deviceId) throws org.apache.thrift.TException
    {
      getDevice_args args = new getDevice_args();
      args.setDeviceId(deviceId);
      sendBase("getDevice", args);
    }

    public DeviceDetails recv_getDevice() throws CoreException, org.apache.thrift.TException
    {
      getDevice_result result = new getDevice_result();
      receiveBase(result, "getDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDevice failed: unknown result");
    }

    public boolean activateDevice(DeviceDetails device) throws CoreException, org.apache.thrift.TException
    {
      send_activateDevice(device);
      return recv_activateDevice();
    }

    public void send_activateDevice(DeviceDetails device) throws org.apache.thrift.TException
    {
      activateDevice_args args = new activateDevice_args();
      args.setDevice(device);
      sendBase("activateDevice", args);
    }

    public boolean recv_activateDevice() throws CoreException, org.apache.thrift.TException
    {
      activateDevice_result result = new activateDevice_result();
      receiveBase(result, "activateDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.coreExp != null) {
        throw result.coreExp;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activateDevice failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void addModel(DeviceModel model, org.apache.thrift.async.AsyncMethodCallback<addModel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addModel_call method_call = new addModel_call(model, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addModel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DeviceModel model;
      public addModel_call(DeviceModel model, org.apache.thrift.async.AsyncMethodCallback<addModel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.model = model;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addModel_args args = new addModel_args();
        args.setModel(model);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addModel();
      }
    }

    public void updateModel(DeviceModel model, org.apache.thrift.async.AsyncMethodCallback<updateModel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateModel_call method_call = new updateModel_call(model, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateModel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DeviceModel model;
      public updateModel_call(DeviceModel model, org.apache.thrift.async.AsyncMethodCallback<updateModel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.model = model;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateModel_args args = new updateModel_args();
        args.setModel(model);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateModel();
      }
    }

    public void deleteModel(String modelId, org.apache.thrift.async.AsyncMethodCallback<deleteModel_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteModel_call method_call = new deleteModel_call(modelId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteModel_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String modelId;
      public deleteModel_call(String modelId, org.apache.thrift.async.AsyncMethodCallback<deleteModel_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.modelId = modelId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteModel_args args = new deleteModel_args();
        args.setModelId(modelId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteModel();
      }
    }

    public void listModels(org.apache.thrift.async.AsyncMethodCallback<listModels_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listModels_call method_call = new listModels_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listModels_call extends org.apache.thrift.async.TAsyncMethodCall {
      public listModels_call(org.apache.thrift.async.AsyncMethodCallback<listModels_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listModels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listModels_args args = new listModels_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DeviceModel> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listModels();
      }
    }

    public void addDevice(DeviceDetails device, org.apache.thrift.async.AsyncMethodCallback<addDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addDevice_call method_call = new addDevice_call(device, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DeviceDetails device;
      public addDevice_call(DeviceDetails device, org.apache.thrift.async.AsyncMethodCallback<addDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device = device;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addDevice_args args = new addDevice_args();
        args.setDevice(device);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addDevice();
      }
    }

    public void updateDevice(DeviceDetails device, org.apache.thrift.async.AsyncMethodCallback<updateDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDevice_call method_call = new updateDevice_call(device, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DeviceDetails device;
      public updateDevice_call(DeviceDetails device, org.apache.thrift.async.AsyncMethodCallback<updateDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device = device;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDevice_args args = new updateDevice_args();
        args.setDevice(device);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateDevice();
      }
    }

    public void deleteDevice(String deviceId, org.apache.thrift.async.AsyncMethodCallback<deleteDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteDevice_call method_call = new deleteDevice_call(deviceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      public deleteDevice_call(String deviceId, org.apache.thrift.async.AsyncMethodCallback<deleteDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteDevice_args args = new deleteDevice_args();
        args.setDeviceId(deviceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteDevice();
      }
    }

    public void listDevices(String filter, org.apache.thrift.async.AsyncMethodCallback<listDevices_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listDevices_call method_call = new listDevices_call(filter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listDevices_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filter;
      public listDevices_call(String filter, org.apache.thrift.async.AsyncMethodCallback<listDevices_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filter = filter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listDevices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listDevices_args args = new listDevices_args();
        args.setFilter(filter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DeviceDetails> getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listDevices();
      }
    }

    public void getDevice(String deviceId, org.apache.thrift.async.AsyncMethodCallback<getDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDevice_call method_call = new getDevice_call(deviceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String deviceId;
      public getDevice_call(String deviceId, org.apache.thrift.async.AsyncMethodCallback<getDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.deviceId = deviceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDevice_args args = new getDevice_args();
        args.setDeviceId(deviceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DeviceDetails getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDevice();
      }
    }

    public void activateDevice(DeviceDetails device, org.apache.thrift.async.AsyncMethodCallback<activateDevice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activateDevice_call method_call = new activateDevice_call(device, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DeviceDetails device;
      public activateDevice_call(DeviceDetails device, org.apache.thrift.async.AsyncMethodCallback<activateDevice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.device = device;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateDevice_args args = new activateDevice_args();
        args.setDevice(device);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws CoreException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activateDevice();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("addModel", new addModel());
      processMap.put("updateModel", new updateModel());
      processMap.put("deleteModel", new deleteModel());
      processMap.put("listModels", new listModels());
      processMap.put("addDevice", new addDevice());
      processMap.put("updateDevice", new updateDevice());
      processMap.put("deleteDevice", new deleteDevice());
      processMap.put("listDevices", new listDevices());
      processMap.put("getDevice", new getDevice());
      processMap.put("activateDevice", new activateDevice());
      return processMap;
    }

    private static class addModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addModel_args> {
      public addModel() {
        super("addModel");
      }

      protected addModel_args getEmptyArgsInstance() {
        return new addModel_args();
      }

      protected addModel_result getResult(I iface, addModel_args args) throws org.apache.thrift.TException {
        addModel_result result = new addModel_result();
        try {
          result.success = iface.addModel(args.model);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class updateModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateModel_args> {
      public updateModel() {
        super("updateModel");
      }

      protected updateModel_args getEmptyArgsInstance() {
        return new updateModel_args();
      }

      protected updateModel_result getResult(I iface, updateModel_args args) throws org.apache.thrift.TException {
        updateModel_result result = new updateModel_result();
        try {
          result.success = iface.updateModel(args.model);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class deleteModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteModel_args> {
      public deleteModel() {
        super("deleteModel");
      }

      protected deleteModel_args getEmptyArgsInstance() {
        return new deleteModel_args();
      }

      protected deleteModel_result getResult(I iface, deleteModel_args args) throws org.apache.thrift.TException {
        deleteModel_result result = new deleteModel_result();
        try {
          result.success = iface.deleteModel(args.modelId);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class listModels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listModels_args> {
      public listModels() {
        super("listModels");
      }

      protected listModels_args getEmptyArgsInstance() {
        return new listModels_args();
      }

      protected listModels_result getResult(I iface, listModels_args args) throws org.apache.thrift.TException {
        listModels_result result = new listModels_result();
        try {
          result.success = iface.listModels();
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class addDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addDevice_args> {
      public addDevice() {
        super("addDevice");
      }

      protected addDevice_args getEmptyArgsInstance() {
        return new addDevice_args();
      }

      protected addDevice_result getResult(I iface, addDevice_args args) throws org.apache.thrift.TException {
        addDevice_result result = new addDevice_result();
        try {
          result.success = iface.addDevice(args.device);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class updateDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDevice_args> {
      public updateDevice() {
        super("updateDevice");
      }

      protected updateDevice_args getEmptyArgsInstance() {
        return new updateDevice_args();
      }

      protected updateDevice_result getResult(I iface, updateDevice_args args) throws org.apache.thrift.TException {
        updateDevice_result result = new updateDevice_result();
        try {
          result.success = iface.updateDevice(args.device);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class deleteDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteDevice_args> {
      public deleteDevice() {
        super("deleteDevice");
      }

      protected deleteDevice_args getEmptyArgsInstance() {
        return new deleteDevice_args();
      }

      protected deleteDevice_result getResult(I iface, deleteDevice_args args) throws org.apache.thrift.TException {
        deleteDevice_result result = new deleteDevice_result();
        try {
          result.success = iface.deleteDevice(args.deviceId);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class listDevices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listDevices_args> {
      public listDevices() {
        super("listDevices");
      }

      protected listDevices_args getEmptyArgsInstance() {
        return new listDevices_args();
      }

      protected listDevices_result getResult(I iface, listDevices_args args) throws org.apache.thrift.TException {
        listDevices_result result = new listDevices_result();
        try {
          result.success = iface.listDevices(args.filter);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class getDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDevice_args> {
      public getDevice() {
        super("getDevice");
      }

      protected getDevice_args getEmptyArgsInstance() {
        return new getDevice_args();
      }

      protected getDevice_result getResult(I iface, getDevice_args args) throws org.apache.thrift.TException {
        getDevice_result result = new getDevice_result();
        try {
          result.success = iface.getDevice(args.deviceId);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

    private static class activateDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateDevice_args> {
      public activateDevice() {
        super("activateDevice");
      }

      protected activateDevice_args getEmptyArgsInstance() {
        return new activateDevice_args();
      }

      protected activateDevice_result getResult(I iface, activateDevice_args args) throws org.apache.thrift.TException {
        activateDevice_result result = new activateDevice_result();
        try {
          result.success = iface.activateDevice(args.device);
          result.setSuccessIsSet(true);
        } catch (CoreException coreExp) {
          result.coreExp = coreExp;
        }
        return result;
      }
    }

  }

  public static class addModel_args implements org.apache.thrift.TBase<addModel_args, addModel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addModel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addModel_argsTupleSchemeFactory());
    }

    public DeviceModel model; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL((short)1, "model");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL
            return MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addModel_args.class, metaDataMap);
    }

    public addModel_args() {
    }

    public addModel_args(
      DeviceModel model)
    {
      this();
      this.model = model;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addModel_args(addModel_args other) {
      if (other.isSetModel()) {
        this.model = new DeviceModel(other.model);
      }
    }

    public addModel_args deepCopy() {
      return new addModel_args(this);
    }

    @Override
    public void clear() {
      this.model = null;
    }

    public DeviceModel getModel() {
      return this.model;
    }

    public addModel_args setModel(DeviceModel model) {
      this.model = model;
      return this;
    }

    public void unsetModel() {
      this.model = null;
    }

    /** Returns true if field model is set (has been assigned a value) and false otherwise */
    public boolean isSetModel() {
      return this.model != null;
    }

    public void setModelIsSet(boolean value) {
      if (!value) {
        this.model = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL:
        if (value == null) {
          unsetModel();
        } else {
          setModel((DeviceModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL:
        return getModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL:
        return isSetModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addModel_args)
        return this.equals((addModel_args)that);
      return false;
    }

    public boolean equals(addModel_args that) {
      if (that == null)
        return false;

      boolean this_present_model = true && this.isSetModel();
      boolean that_present_model = true && that.isSetModel();
      if (this_present_model || that_present_model) {
        if (!(this_present_model && that_present_model))
          return false;
        if (!this.model.equals(that.model))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addModel_args typedOther = (addModel_args)other;

      lastComparison = Boolean.valueOf(isSetModel()).compareTo(typedOther.isSetModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, typedOther.model);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addModel_args(");
      boolean first = true;

      sb.append("model:");
      if (this.model == null) {
        sb.append("null");
      } else {
        sb.append(this.model);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addModel_argsStandardSchemeFactory implements SchemeFactory {
      public addModel_argsStandardScheme getScheme() {
        return new addModel_argsStandardScheme();
      }
    }

    private static class addModel_argsStandardScheme extends StandardScheme<addModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.model = new DeviceModel();
                struct.model.read(iprot);
                struct.setModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.model != null) {
          oprot.writeFieldBegin(MODEL_FIELD_DESC);
          struct.model.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addModel_argsTupleSchemeFactory implements SchemeFactory {
      public addModel_argsTupleScheme getScheme() {
        return new addModel_argsTupleScheme();
      }
    }

    private static class addModel_argsTupleScheme extends TupleScheme<addModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModel()) {
          struct.model.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.model = new DeviceModel();
          struct.model.read(iprot);
          struct.setModelIsSet(true);
        }
      }
    }

  }

  public static class addModel_result implements org.apache.thrift.TBase<addModel_result, addModel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addModel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addModel_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addModel_result.class, metaDataMap);
    }

    public addModel_result() {
    }

    public addModel_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addModel_result(addModel_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public addModel_result deepCopy() {
      return new addModel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addModel_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public addModel_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addModel_result)
        return this.equals((addModel_result)that);
      return false;
    }

    public boolean equals(addModel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addModel_result typedOther = (addModel_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addModel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addModel_resultStandardSchemeFactory implements SchemeFactory {
      public addModel_resultStandardScheme getScheme() {
        return new addModel_resultStandardScheme();
      }
    }

    private static class addModel_resultStandardScheme extends StandardScheme<addModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addModel_resultTupleSchemeFactory implements SchemeFactory {
      public addModel_resultTupleScheme getScheme() {
        return new addModel_resultTupleScheme();
      }
    }

    private static class addModel_resultTupleScheme extends TupleScheme<addModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class updateModel_args implements org.apache.thrift.TBase<updateModel_args, updateModel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateModel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateModel_argsTupleSchemeFactory());
    }

    public DeviceModel model; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL((short)1, "model");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL
            return MODEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceModel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateModel_args.class, metaDataMap);
    }

    public updateModel_args() {
    }

    public updateModel_args(
      DeviceModel model)
    {
      this();
      this.model = model;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateModel_args(updateModel_args other) {
      if (other.isSetModel()) {
        this.model = new DeviceModel(other.model);
      }
    }

    public updateModel_args deepCopy() {
      return new updateModel_args(this);
    }

    @Override
    public void clear() {
      this.model = null;
    }

    public DeviceModel getModel() {
      return this.model;
    }

    public updateModel_args setModel(DeviceModel model) {
      this.model = model;
      return this;
    }

    public void unsetModel() {
      this.model = null;
    }

    /** Returns true if field model is set (has been assigned a value) and false otherwise */
    public boolean isSetModel() {
      return this.model != null;
    }

    public void setModelIsSet(boolean value) {
      if (!value) {
        this.model = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL:
        if (value == null) {
          unsetModel();
        } else {
          setModel((DeviceModel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL:
        return getModel();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL:
        return isSetModel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateModel_args)
        return this.equals((updateModel_args)that);
      return false;
    }

    public boolean equals(updateModel_args that) {
      if (that == null)
        return false;

      boolean this_present_model = true && this.isSetModel();
      boolean that_present_model = true && that.isSetModel();
      if (this_present_model || that_present_model) {
        if (!(this_present_model && that_present_model))
          return false;
        if (!this.model.equals(that.model))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateModel_args typedOther = (updateModel_args)other;

      lastComparison = Boolean.valueOf(isSetModel()).compareTo(typedOther.isSetModel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, typedOther.model);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateModel_args(");
      boolean first = true;

      sb.append("model:");
      if (this.model == null) {
        sb.append("null");
      } else {
        sb.append(this.model);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateModel_argsStandardSchemeFactory implements SchemeFactory {
      public updateModel_argsStandardScheme getScheme() {
        return new updateModel_argsStandardScheme();
      }
    }

    private static class updateModel_argsStandardScheme extends StandardScheme<updateModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.model = new DeviceModel();
                struct.model.read(iprot);
                struct.setModelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.model != null) {
          oprot.writeFieldBegin(MODEL_FIELD_DESC);
          struct.model.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateModel_argsTupleSchemeFactory implements SchemeFactory {
      public updateModel_argsTupleScheme getScheme() {
        return new updateModel_argsTupleScheme();
      }
    }

    private static class updateModel_argsTupleScheme extends TupleScheme<updateModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModel()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModel()) {
          struct.model.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.model = new DeviceModel();
          struct.model.read(iprot);
          struct.setModelIsSet(true);
        }
      }
    }

  }

  public static class updateModel_result implements org.apache.thrift.TBase<updateModel_result, updateModel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateModel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateModel_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateModel_result.class, metaDataMap);
    }

    public updateModel_result() {
    }

    public updateModel_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateModel_result(updateModel_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public updateModel_result deepCopy() {
      return new updateModel_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateModel_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public updateModel_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateModel_result)
        return this.equals((updateModel_result)that);
      return false;
    }

    public boolean equals(updateModel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateModel_result typedOther = (updateModel_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateModel_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateModel_resultStandardSchemeFactory implements SchemeFactory {
      public updateModel_resultStandardScheme getScheme() {
        return new updateModel_resultStandardScheme();
      }
    }

    private static class updateModel_resultStandardScheme extends StandardScheme<updateModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateModel_resultTupleSchemeFactory implements SchemeFactory {
      public updateModel_resultTupleScheme getScheme() {
        return new updateModel_resultTupleScheme();
      }
    }

    private static class updateModel_resultTupleScheme extends TupleScheme<updateModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class deleteModel_args implements org.apache.thrift.TBase<deleteModel_args, deleteModel_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteModel_args");

    private static final org.apache.thrift.protocol.TField MODEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("modelId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteModel_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteModel_argsTupleSchemeFactory());
    }

    public String modelId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MODEL_ID((short)1, "modelId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MODEL_ID
            return MODEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MODEL_ID, new org.apache.thrift.meta_data.FieldMetaData("modelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteModel_args.class, metaDataMap);
    }

    public deleteModel_args() {
    }

    public deleteModel_args(
      String modelId)
    {
      this();
      this.modelId = modelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteModel_args(deleteModel_args other) {
      if (other.isSetModelId()) {
        this.modelId = other.modelId;
      }
    }

    public deleteModel_args deepCopy() {
      return new deleteModel_args(this);
    }

    @Override
    public void clear() {
      this.modelId = null;
    }

    public String getModelId() {
      return this.modelId;
    }

    public deleteModel_args setModelId(String modelId) {
      this.modelId = modelId;
      return this;
    }

    public void unsetModelId() {
      this.modelId = null;
    }

    /** Returns true if field modelId is set (has been assigned a value) and false otherwise */
    public boolean isSetModelId() {
      return this.modelId != null;
    }

    public void setModelIdIsSet(boolean value) {
      if (!value) {
        this.modelId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MODEL_ID:
        if (value == null) {
          unsetModelId();
        } else {
          setModelId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MODEL_ID:
        return getModelId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MODEL_ID:
        return isSetModelId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteModel_args)
        return this.equals((deleteModel_args)that);
      return false;
    }

    public boolean equals(deleteModel_args that) {
      if (that == null)
        return false;

      boolean this_present_modelId = true && this.isSetModelId();
      boolean that_present_modelId = true && that.isSetModelId();
      if (this_present_modelId || that_present_modelId) {
        if (!(this_present_modelId && that_present_modelId))
          return false;
        if (!this.modelId.equals(that.modelId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteModel_args typedOther = (deleteModel_args)other;

      lastComparison = Boolean.valueOf(isSetModelId()).compareTo(typedOther.isSetModelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelId, typedOther.modelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteModel_args(");
      boolean first = true;

      sb.append("modelId:");
      if (this.modelId == null) {
        sb.append("null");
      } else {
        sb.append(this.modelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteModel_argsStandardSchemeFactory implements SchemeFactory {
      public deleteModel_argsStandardScheme getScheme() {
        return new deleteModel_argsStandardScheme();
      }
    }

    private static class deleteModel_argsStandardScheme extends StandardScheme<deleteModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MODEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelId = iprot.readString();
                struct.setModelIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.modelId != null) {
          oprot.writeFieldBegin(MODEL_ID_FIELD_DESC);
          oprot.writeString(struct.modelId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteModel_argsTupleSchemeFactory implements SchemeFactory {
      public deleteModel_argsTupleScheme getScheme() {
        return new deleteModel_argsTupleScheme();
      }
    }

    private static class deleteModel_argsTupleScheme extends TupleScheme<deleteModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetModelId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetModelId()) {
          oprot.writeString(struct.modelId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteModel_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.modelId = iprot.readString();
          struct.setModelIdIsSet(true);
        }
      }
    }

  }

  public static class deleteModel_result implements org.apache.thrift.TBase<deleteModel_result, deleteModel_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteModel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteModel_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteModel_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteModel_result.class, metaDataMap);
    }

    public deleteModel_result() {
    }

    public deleteModel_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteModel_result(deleteModel_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public deleteModel_result deepCopy() {
      return new deleteModel_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteModel_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public deleteModel_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteModel_result)
        return this.equals((deleteModel_result)that);
      return false;
    }

    public boolean equals(deleteModel_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteModel_result typedOther = (deleteModel_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteModel_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteModel_resultStandardSchemeFactory implements SchemeFactory {
      public deleteModel_resultStandardScheme getScheme() {
        return new deleteModel_resultStandardScheme();
      }
    }

    private static class deleteModel_resultStandardScheme extends StandardScheme<deleteModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteModel_resultTupleSchemeFactory implements SchemeFactory {
      public deleteModel_resultTupleScheme getScheme() {
        return new deleteModel_resultTupleScheme();
      }
    }

    private static class deleteModel_resultTupleScheme extends TupleScheme<deleteModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteModel_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class listModels_args implements org.apache.thrift.TBase<listModels_args, listModels_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listModels_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listModels_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listModels_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listModels_args.class, metaDataMap);
    }

    public listModels_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listModels_args(listModels_args other) {
    }

    public listModels_args deepCopy() {
      return new listModels_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listModels_args)
        return this.equals((listModels_args)that);
      return false;
    }

    public boolean equals(listModels_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listModels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listModels_args typedOther = (listModels_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listModels_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listModels_argsStandardSchemeFactory implements SchemeFactory {
      public listModels_argsStandardScheme getScheme() {
        return new listModels_argsStandardScheme();
      }
    }

    private static class listModels_argsStandardScheme extends StandardScheme<listModels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listModels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listModels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listModels_argsTupleSchemeFactory implements SchemeFactory {
      public listModels_argsTupleScheme getScheme() {
        return new listModels_argsTupleScheme();
      }
    }

    private static class listModels_argsTupleScheme extends TupleScheme<listModels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listModels_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class listModels_result implements org.apache.thrift.TBase<listModels_result, listModels_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listModels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listModels_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listModels_resultTupleSchemeFactory());
    }

    public List<DeviceModel> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceModel.class))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listModels_result.class, metaDataMap);
    }

    public listModels_result() {
    }

    public listModels_result(
      List<DeviceModel> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listModels_result(listModels_result other) {
      if (other.isSetSuccess()) {
        List<DeviceModel> __this__success = new ArrayList<DeviceModel>();
        for (DeviceModel other_element : other.success) {
          __this__success.add(new DeviceModel(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public listModels_result deepCopy() {
      return new listModels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DeviceModel> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DeviceModel elem) {
      if (this.success == null) {
        this.success = new ArrayList<DeviceModel>();
      }
      this.success.add(elem);
    }

    public List<DeviceModel> getSuccess() {
      return this.success;
    }

    public listModels_result setSuccess(List<DeviceModel> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public listModels_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DeviceModel>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listModels_result)
        return this.equals((listModels_result)that);
      return false;
    }

    public boolean equals(listModels_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listModels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listModels_result typedOther = (listModels_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listModels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listModels_resultStandardSchemeFactory implements SchemeFactory {
      public listModels_resultStandardScheme getScheme() {
        return new listModels_resultStandardScheme();
      }
    }

    private static class listModels_resultStandardScheme extends StandardScheme<listModels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listModels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<DeviceModel>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    DeviceModel _elem90; // required
                    _elem90 = new DeviceModel();
                    _elem90.read(iprot);
                    struct.success.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listModels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DeviceModel _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listModels_resultTupleSchemeFactory implements SchemeFactory {
      public listModels_resultTupleScheme getScheme() {
        return new listModels_resultTupleScheme();
      }
    }

    private static class listModels_resultTupleScheme extends TupleScheme<listModels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DeviceModel _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listModels_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DeviceModel>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              DeviceModel _elem95; // required
              _elem95 = new DeviceModel();
              _elem95.read(iprot);
              struct.success.add(_elem95);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class addDevice_args implements org.apache.thrift.TBase<addDevice_args, addDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDevice_argsTupleSchemeFactory());
    }

    public DeviceDetails device; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE((short)1, "device");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE
            return DEVICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceDetails.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDevice_args.class, metaDataMap);
    }

    public addDevice_args() {
    }

    public addDevice_args(
      DeviceDetails device)
    {
      this();
      this.device = device;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDevice_args(addDevice_args other) {
      if (other.isSetDevice()) {
        this.device = new DeviceDetails(other.device);
      }
    }

    public addDevice_args deepCopy() {
      return new addDevice_args(this);
    }

    @Override
    public void clear() {
      this.device = null;
    }

    public DeviceDetails getDevice() {
      return this.device;
    }

    public addDevice_args setDevice(DeviceDetails device) {
      this.device = device;
      return this;
    }

    public void unsetDevice() {
      this.device = null;
    }

    /** Returns true if field device is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice() {
      return this.device != null;
    }

    public void setDeviceIsSet(boolean value) {
      if (!value) {
        this.device = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE:
        if (value == null) {
          unsetDevice();
        } else {
          setDevice((DeviceDetails)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE:
        return getDevice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE:
        return isSetDevice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDevice_args)
        return this.equals((addDevice_args)that);
      return false;
    }

    public boolean equals(addDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_device = true && this.isSetDevice();
      boolean that_present_device = true && that.isSetDevice();
      if (this_present_device || that_present_device) {
        if (!(this_present_device && that_present_device))
          return false;
        if (!this.device.equals(that.device))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addDevice_args typedOther = (addDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDevice()).compareTo(typedOther.isSetDevice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, typedOther.device);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDevice_args(");
      boolean first = true;

      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDevice_argsStandardSchemeFactory implements SchemeFactory {
      public addDevice_argsStandardScheme getScheme() {
        return new addDevice_argsStandardScheme();
      }
    }

    private static class addDevice_argsStandardScheme extends StandardScheme<addDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device = new DeviceDetails();
                struct.device.read(iprot);
                struct.setDeviceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device != null) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          struct.device.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDevice_argsTupleSchemeFactory implements SchemeFactory {
      public addDevice_argsTupleScheme getScheme() {
        return new addDevice_argsTupleScheme();
      }
    }

    private static class addDevice_argsTupleScheme extends TupleScheme<addDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice()) {
          struct.device.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device = new DeviceDetails();
          struct.device.read(iprot);
          struct.setDeviceIsSet(true);
        }
      }
    }

  }

  public static class addDevice_result implements org.apache.thrift.TBase<addDevice_result, addDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addDevice_resultTupleSchemeFactory());
    }

    public String success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addDevice_result.class, metaDataMap);
    }

    public addDevice_result() {
    }

    public addDevice_result(
      String success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addDevice_result(addDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public addDevice_result deepCopy() {
      return new addDevice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addDevice_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public addDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addDevice_result)
        return this.equals((addDevice_result)that);
      return false;
    }

    public boolean equals(addDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(addDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      addDevice_result typedOther = (addDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addDevice_resultStandardSchemeFactory implements SchemeFactory {
      public addDevice_resultStandardScheme getScheme() {
        return new addDevice_resultStandardScheme();
      }
    }

    private static class addDevice_resultStandardScheme extends StandardScheme<addDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addDevice_resultTupleSchemeFactory implements SchemeFactory {
      public addDevice_resultTupleScheme getScheme() {
        return new addDevice_resultTupleScheme();
      }
    }

    private static class addDevice_resultTupleScheme extends TupleScheme<addDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class updateDevice_args implements org.apache.thrift.TBase<updateDevice_args, updateDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDevice_argsTupleSchemeFactory());
    }

    public DeviceDetails device; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE((short)1, "device");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE
            return DEVICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceDetails.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDevice_args.class, metaDataMap);
    }

    public updateDevice_args() {
    }

    public updateDevice_args(
      DeviceDetails device)
    {
      this();
      this.device = device;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDevice_args(updateDevice_args other) {
      if (other.isSetDevice()) {
        this.device = new DeviceDetails(other.device);
      }
    }

    public updateDevice_args deepCopy() {
      return new updateDevice_args(this);
    }

    @Override
    public void clear() {
      this.device = null;
    }

    public DeviceDetails getDevice() {
      return this.device;
    }

    public updateDevice_args setDevice(DeviceDetails device) {
      this.device = device;
      return this;
    }

    public void unsetDevice() {
      this.device = null;
    }

    /** Returns true if field device is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice() {
      return this.device != null;
    }

    public void setDeviceIsSet(boolean value) {
      if (!value) {
        this.device = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE:
        if (value == null) {
          unsetDevice();
        } else {
          setDevice((DeviceDetails)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE:
        return getDevice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE:
        return isSetDevice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDevice_args)
        return this.equals((updateDevice_args)that);
      return false;
    }

    public boolean equals(updateDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_device = true && this.isSetDevice();
      boolean that_present_device = true && that.isSetDevice();
      if (this_present_device || that_present_device) {
        if (!(this_present_device && that_present_device))
          return false;
        if (!this.device.equals(that.device))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateDevice_args typedOther = (updateDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDevice()).compareTo(typedOther.isSetDevice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, typedOther.device);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDevice_args(");
      boolean first = true;

      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDevice_argsStandardSchemeFactory implements SchemeFactory {
      public updateDevice_argsStandardScheme getScheme() {
        return new updateDevice_argsStandardScheme();
      }
    }

    private static class updateDevice_argsStandardScheme extends StandardScheme<updateDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device = new DeviceDetails();
                struct.device.read(iprot);
                struct.setDeviceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device != null) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          struct.device.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDevice_argsTupleSchemeFactory implements SchemeFactory {
      public updateDevice_argsTupleScheme getScheme() {
        return new updateDevice_argsTupleScheme();
      }
    }

    private static class updateDevice_argsTupleScheme extends TupleScheme<updateDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice()) {
          struct.device.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device = new DeviceDetails();
          struct.device.read(iprot);
          struct.setDeviceIsSet(true);
        }
      }
    }

  }

  public static class updateDevice_result implements org.apache.thrift.TBase<updateDevice_result, updateDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDevice_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDevice_result.class, metaDataMap);
    }

    public updateDevice_result() {
    }

    public updateDevice_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDevice_result(updateDevice_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public updateDevice_result deepCopy() {
      return new updateDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateDevice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public updateDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDevice_result)
        return this.equals((updateDevice_result)that);
      return false;
    }

    public boolean equals(updateDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(updateDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      updateDevice_result typedOther = (updateDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDevice_resultStandardSchemeFactory implements SchemeFactory {
      public updateDevice_resultStandardScheme getScheme() {
        return new updateDevice_resultStandardScheme();
      }
    }

    private static class updateDevice_resultStandardScheme extends StandardScheme<updateDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDevice_resultTupleSchemeFactory implements SchemeFactory {
      public updateDevice_resultTupleScheme getScheme() {
        return new updateDevice_resultTupleScheme();
      }
    }

    private static class updateDevice_resultTupleScheme extends TupleScheme<updateDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class deleteDevice_args implements org.apache.thrift.TBase<deleteDevice_args, deleteDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteDevice_argsTupleSchemeFactory());
    }

    public String deviceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDevice_args.class, metaDataMap);
    }

    public deleteDevice_args() {
    }

    public deleteDevice_args(
      String deviceId)
    {
      this();
      this.deviceId = deviceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDevice_args(deleteDevice_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
    }

    public deleteDevice_args deepCopy() {
      return new deleteDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public deleteDevice_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDevice_args)
        return this.equals((deleteDevice_args)that);
      return false;
    }

    public boolean equals(deleteDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteDevice_args typedOther = (deleteDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteDevice_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDevice_argsStandardSchemeFactory implements SchemeFactory {
      public deleteDevice_argsStandardScheme getScheme() {
        return new deleteDevice_argsStandardScheme();
      }
    }

    private static class deleteDevice_argsStandardScheme extends StandardScheme<deleteDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDevice_argsTupleSchemeFactory implements SchemeFactory {
      public deleteDevice_argsTupleScheme getScheme() {
        return new deleteDevice_argsTupleScheme();
      }
    }

    private static class deleteDevice_argsTupleScheme extends TupleScheme<deleteDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
      }
    }

  }

  public static class deleteDevice_result implements org.apache.thrift.TBase<deleteDevice_result, deleteDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteDevice_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDevice_result.class, metaDataMap);
    }

    public deleteDevice_result() {
    }

    public deleteDevice_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteDevice_result(deleteDevice_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public deleteDevice_result deepCopy() {
      return new deleteDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteDevice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public deleteDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteDevice_result)
        return this.equals((deleteDevice_result)that);
      return false;
    }

    public boolean equals(deleteDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteDevice_result typedOther = (deleteDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteDevice_resultStandardSchemeFactory implements SchemeFactory {
      public deleteDevice_resultStandardScheme getScheme() {
        return new deleteDevice_resultStandardScheme();
      }
    }

    private static class deleteDevice_resultStandardScheme extends StandardScheme<deleteDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteDevice_resultTupleSchemeFactory implements SchemeFactory {
      public deleteDevice_resultTupleScheme getScheme() {
        return new deleteDevice_resultTupleScheme();
      }
    }

    private static class deleteDevice_resultTupleScheme extends TupleScheme<deleteDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class listDevices_args implements org.apache.thrift.TBase<listDevices_args, listDevices_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDevices_args");

    private static final org.apache.thrift.protocol.TField FILTER_FIELD_DESC = new org.apache.thrift.protocol.TField("filter", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDevices_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDevices_argsTupleSchemeFactory());
    }

    public String filter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILTER((short)1, "filter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILTER
            return FILTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILTER, new org.apache.thrift.meta_data.FieldMetaData("filter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDevices_args.class, metaDataMap);
    }

    public listDevices_args() {
    }

    public listDevices_args(
      String filter)
    {
      this();
      this.filter = filter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDevices_args(listDevices_args other) {
      if (other.isSetFilter()) {
        this.filter = other.filter;
      }
    }

    public listDevices_args deepCopy() {
      return new listDevices_args(this);
    }

    @Override
    public void clear() {
      this.filter = null;
    }

    public String getFilter() {
      return this.filter;
    }

    public listDevices_args setFilter(String filter) {
      this.filter = filter;
      return this;
    }

    public void unsetFilter() {
      this.filter = null;
    }

    /** Returns true if field filter is set (has been assigned a value) and false otherwise */
    public boolean isSetFilter() {
      return this.filter != null;
    }

    public void setFilterIsSet(boolean value) {
      if (!value) {
        this.filter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILTER:
        if (value == null) {
          unsetFilter();
        } else {
          setFilter((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILTER:
        return getFilter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILTER:
        return isSetFilter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDevices_args)
        return this.equals((listDevices_args)that);
      return false;
    }

    public boolean equals(listDevices_args that) {
      if (that == null)
        return false;

      boolean this_present_filter = true && this.isSetFilter();
      boolean that_present_filter = true && that.isSetFilter();
      if (this_present_filter || that_present_filter) {
        if (!(this_present_filter && that_present_filter))
          return false;
        if (!this.filter.equals(that.filter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listDevices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listDevices_args typedOther = (listDevices_args)other;

      lastComparison = Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filter, typedOther.filter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDevices_args(");
      boolean first = true;

      sb.append("filter:");
      if (this.filter == null) {
        sb.append("null");
      } else {
        sb.append(this.filter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDevices_argsStandardSchemeFactory implements SchemeFactory {
      public listDevices_argsStandardScheme getScheme() {
        return new listDevices_argsStandardScheme();
      }
    }

    private static class listDevices_argsStandardScheme extends StandardScheme<listDevices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDevices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filter = iprot.readString();
                struct.setFilterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDevices_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filter != null) {
          oprot.writeFieldBegin(FILTER_FIELD_DESC);
          oprot.writeString(struct.filter);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDevices_argsTupleSchemeFactory implements SchemeFactory {
      public listDevices_argsTupleScheme getScheme() {
        return new listDevices_argsTupleScheme();
      }
    }

    private static class listDevices_argsTupleScheme extends TupleScheme<listDevices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDevices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFilter()) {
          oprot.writeString(struct.filter);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDevices_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.filter = iprot.readString();
          struct.setFilterIsSet(true);
        }
      }
    }

  }

  public static class listDevices_result implements org.apache.thrift.TBase<listDevices_result, listDevices_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listDevices_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listDevices_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listDevices_resultTupleSchemeFactory());
    }

    public List<DeviceDetails> success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceDetails.class))));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listDevices_result.class, metaDataMap);
    }

    public listDevices_result() {
    }

    public listDevices_result(
      List<DeviceDetails> success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listDevices_result(listDevices_result other) {
      if (other.isSetSuccess()) {
        List<DeviceDetails> __this__success = new ArrayList<DeviceDetails>();
        for (DeviceDetails other_element : other.success) {
          __this__success.add(new DeviceDetails(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public listDevices_result deepCopy() {
      return new listDevices_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DeviceDetails> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DeviceDetails elem) {
      if (this.success == null) {
        this.success = new ArrayList<DeviceDetails>();
      }
      this.success.add(elem);
    }

    public List<DeviceDetails> getSuccess() {
      return this.success;
    }

    public listDevices_result setSuccess(List<DeviceDetails> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public listDevices_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DeviceDetails>)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listDevices_result)
        return this.equals((listDevices_result)that);
      return false;
    }

    public boolean equals(listDevices_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(listDevices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      listDevices_result typedOther = (listDevices_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listDevices_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listDevices_resultStandardSchemeFactory implements SchemeFactory {
      public listDevices_resultStandardScheme getScheme() {
        return new listDevices_resultStandardScheme();
      }
    }

    private static class listDevices_resultStandardScheme extends StandardScheme<listDevices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listDevices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<DeviceDetails>(_list96.size);
                  for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                  {
                    DeviceDetails _elem98; // required
                    _elem98 = new DeviceDetails();
                    _elem98.read(iprot);
                    struct.success.add(_elem98);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listDevices_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DeviceDetails _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listDevices_resultTupleSchemeFactory implements SchemeFactory {
      public listDevices_resultTupleScheme getScheme() {
        return new listDevices_resultTupleScheme();
      }
    }

    private static class listDevices_resultTupleScheme extends TupleScheme<listDevices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listDevices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DeviceDetails _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listDevices_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DeviceDetails>(_list101.size);
            for (int _i102 = 0; _i102 < _list101.size; ++_i102)
            {
              DeviceDetails _elem103; // required
              _elem103 = new DeviceDetails();
              _elem103.read(iprot);
              struct.success.add(_elem103);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class getDevice_args implements org.apache.thrift.TBase<getDevice_args, getDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDevice_argsTupleSchemeFactory());
    }

    public String deviceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_ID((short)1, "deviceId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_ID
            return DEVICE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_ID, new org.apache.thrift.meta_data.FieldMetaData("deviceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDevice_args.class, metaDataMap);
    }

    public getDevice_args() {
    }

    public getDevice_args(
      String deviceId)
    {
      this();
      this.deviceId = deviceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDevice_args(getDevice_args other) {
      if (other.isSetDeviceId()) {
        this.deviceId = other.deviceId;
      }
    }

    public getDevice_args deepCopy() {
      return new getDevice_args(this);
    }

    @Override
    public void clear() {
      this.deviceId = null;
    }

    public String getDeviceId() {
      return this.deviceId;
    }

    public getDevice_args setDeviceId(String deviceId) {
      this.deviceId = deviceId;
      return this;
    }

    public void unsetDeviceId() {
      this.deviceId = null;
    }

    /** Returns true if field deviceId is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceId() {
      return this.deviceId != null;
    }

    public void setDeviceIdIsSet(boolean value) {
      if (!value) {
        this.deviceId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_ID:
        if (value == null) {
          unsetDeviceId();
        } else {
          setDeviceId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_ID:
        return getDeviceId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_ID:
        return isSetDeviceId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDevice_args)
        return this.equals((getDevice_args)that);
      return false;
    }

    public boolean equals(getDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_deviceId = true && this.isSetDeviceId();
      boolean that_present_deviceId = true && that.isSetDeviceId();
      if (this_present_deviceId || that_present_deviceId) {
        if (!(this_present_deviceId && that_present_deviceId))
          return false;
        if (!this.deviceId.equals(that.deviceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDevice_args typedOther = (getDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDeviceId()).compareTo(typedOther.isSetDeviceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceId, typedOther.deviceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDevice_args(");
      boolean first = true;

      sb.append("deviceId:");
      if (this.deviceId == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDevice_argsStandardSchemeFactory implements SchemeFactory {
      public getDevice_argsStandardScheme getScheme() {
        return new getDevice_argsStandardScheme();
      }
    }

    private static class getDevice_argsStandardScheme extends StandardScheme<getDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceId = iprot.readString();
                struct.setDeviceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.deviceId != null) {
          oprot.writeFieldBegin(DEVICE_ID_FIELD_DESC);
          oprot.writeString(struct.deviceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDevice_argsTupleSchemeFactory implements SchemeFactory {
      public getDevice_argsTupleScheme getScheme() {
        return new getDevice_argsTupleScheme();
      }
    }

    private static class getDevice_argsTupleScheme extends TupleScheme<getDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDeviceId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDeviceId()) {
          oprot.writeString(struct.deviceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.deviceId = iprot.readString();
          struct.setDeviceIdIsSet(true);
        }
      }
    }

  }

  public static class getDevice_result implements org.apache.thrift.TBase<getDevice_result, getDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDevice_resultTupleSchemeFactory());
    }

    public DeviceDetails success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceDetails.class)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDevice_result.class, metaDataMap);
    }

    public getDevice_result() {
    }

    public getDevice_result(
      DeviceDetails success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDevice_result(getDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = new DeviceDetails(other.success);
      }
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public getDevice_result deepCopy() {
      return new getDevice_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.coreExp = null;
    }

    public DeviceDetails getSuccess() {
      return this.success;
    }

    public getDevice_result setSuccess(DeviceDetails success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public getDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DeviceDetails)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDevice_result)
        return this.equals((getDevice_result)that);
      return false;
    }

    public boolean equals(getDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDevice_result typedOther = (getDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDevice_resultStandardSchemeFactory implements SchemeFactory {
      public getDevice_resultStandardScheme getScheme() {
        return new getDevice_resultStandardScheme();
      }
    }

    private static class getDevice_resultStandardScheme extends StandardScheme<getDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DeviceDetails();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDevice_resultTupleSchemeFactory implements SchemeFactory {
      public getDevice_resultTupleScheme getScheme() {
        return new getDevice_resultTupleScheme();
      }
    }

    private static class getDevice_resultTupleScheme extends TupleScheme<getDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DeviceDetails();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

  public static class activateDevice_args implements org.apache.thrift.TBase<activateDevice_args, activateDevice_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateDevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC = new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateDevice_argsTupleSchemeFactory());
    }

    public DeviceDetails device; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE((short)1, "device");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE
            return DEVICE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE, new org.apache.thrift.meta_data.FieldMetaData("device", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DeviceDetails.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateDevice_args.class, metaDataMap);
    }

    public activateDevice_args() {
    }

    public activateDevice_args(
      DeviceDetails device)
    {
      this();
      this.device = device;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateDevice_args(activateDevice_args other) {
      if (other.isSetDevice()) {
        this.device = new DeviceDetails(other.device);
      }
    }

    public activateDevice_args deepCopy() {
      return new activateDevice_args(this);
    }

    @Override
    public void clear() {
      this.device = null;
    }

    public DeviceDetails getDevice() {
      return this.device;
    }

    public activateDevice_args setDevice(DeviceDetails device) {
      this.device = device;
      return this;
    }

    public void unsetDevice() {
      this.device = null;
    }

    /** Returns true if field device is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice() {
      return this.device != null;
    }

    public void setDeviceIsSet(boolean value) {
      if (!value) {
        this.device = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE:
        if (value == null) {
          unsetDevice();
        } else {
          setDevice((DeviceDetails)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE:
        return getDevice();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE:
        return isSetDevice();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateDevice_args)
        return this.equals((activateDevice_args)that);
      return false;
    }

    public boolean equals(activateDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_device = true && this.isSetDevice();
      boolean that_present_device = true && that.isSetDevice();
      if (this_present_device || that_present_device) {
        if (!(this_present_device && that_present_device))
          return false;
        if (!this.device.equals(that.device))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(activateDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      activateDevice_args typedOther = (activateDevice_args)other;

      lastComparison = Boolean.valueOf(isSetDevice()).compareTo(typedOther.isSetDevice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, typedOther.device);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateDevice_args(");
      boolean first = true;

      sb.append("device:");
      if (this.device == null) {
        sb.append("null");
      } else {
        sb.append(this.device);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateDevice_argsStandardSchemeFactory implements SchemeFactory {
      public activateDevice_argsStandardScheme getScheme() {
        return new activateDevice_argsStandardScheme();
      }
    }

    private static class activateDevice_argsStandardScheme extends StandardScheme<activateDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device = new DeviceDetails();
                struct.device.read(iprot);
                struct.setDeviceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.device != null) {
          oprot.writeFieldBegin(DEVICE_FIELD_DESC);
          struct.device.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateDevice_argsTupleSchemeFactory implements SchemeFactory {
      public activateDevice_argsTupleScheme getScheme() {
        return new activateDevice_argsTupleScheme();
      }
    }

    private static class activateDevice_argsTupleScheme extends TupleScheme<activateDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDevice()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDevice()) {
          struct.device.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.device = new DeviceDetails();
          struct.device.read(iprot);
          struct.setDeviceIsSet(true);
        }
      }
    }

  }

  public static class activateDevice_result implements org.apache.thrift.TBase<activateDevice_result, activateDevice_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField CORE_EXP_FIELD_DESC = new org.apache.thrift.protocol.TField("coreExp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateDevice_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public CoreException coreExp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CORE_EXP((short)1, "coreExp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CORE_EXP
            return CORE_EXP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.CORE_EXP, new org.apache.thrift.meta_data.FieldMetaData("coreExp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateDevice_result.class, metaDataMap);
    }

    public activateDevice_result() {
    }

    public activateDevice_result(
      boolean success,
      CoreException coreExp)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.coreExp = coreExp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateDevice_result(activateDevice_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
      if (other.isSetCoreExp()) {
        this.coreExp = new CoreException(other.coreExp);
      }
    }

    public activateDevice_result deepCopy() {
      return new activateDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.coreExp = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public activateDevice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public CoreException getCoreExp() {
      return this.coreExp;
    }

    public activateDevice_result setCoreExp(CoreException coreExp) {
      this.coreExp = coreExp;
      return this;
    }

    public void unsetCoreExp() {
      this.coreExp = null;
    }

    /** Returns true if field coreExp is set (has been assigned a value) and false otherwise */
    public boolean isSetCoreExp() {
      return this.coreExp != null;
    }

    public void setCoreExpIsSet(boolean value) {
      if (!value) {
        this.coreExp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case CORE_EXP:
        if (value == null) {
          unsetCoreExp();
        } else {
          setCoreExp((CoreException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case CORE_EXP:
        return getCoreExp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CORE_EXP:
        return isSetCoreExp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateDevice_result)
        return this.equals((activateDevice_result)that);
      return false;
    }

    public boolean equals(activateDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_coreExp = true && this.isSetCoreExp();
      boolean that_present_coreExp = true && that.isSetCoreExp();
      if (this_present_coreExp || that_present_coreExp) {
        if (!(this_present_coreExp && that_present_coreExp))
          return false;
        if (!this.coreExp.equals(that.coreExp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(activateDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      activateDevice_result typedOther = (activateDevice_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCoreExp()).compareTo(typedOther.isSetCoreExp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCoreExp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coreExp, typedOther.coreExp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("coreExp:");
      if (this.coreExp == null) {
        sb.append("null");
      } else {
        sb.append(this.coreExp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateDevice_resultStandardSchemeFactory implements SchemeFactory {
      public activateDevice_resultStandardScheme getScheme() {
        return new activateDevice_resultStandardScheme();
      }
    }

    private static class activateDevice_resultStandardScheme extends StandardScheme<activateDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CORE_EXP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.coreExp = new CoreException();
                struct.coreExp.read(iprot);
                struct.setCoreExpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        if (struct.coreExp != null) {
          oprot.writeFieldBegin(CORE_EXP_FIELD_DESC);
          struct.coreExp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateDevice_resultTupleSchemeFactory implements SchemeFactory {
      public activateDevice_resultTupleScheme getScheme() {
        return new activateDevice_resultTupleScheme();
      }
    }

    private static class activateDevice_resultTupleScheme extends TupleScheme<activateDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCoreExp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetCoreExp()) {
          struct.coreExp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.coreExp = new CoreException();
          struct.coreExp.read(iprot);
          struct.setCoreExpIsSet(true);
        }
      }
    }

  }

}
