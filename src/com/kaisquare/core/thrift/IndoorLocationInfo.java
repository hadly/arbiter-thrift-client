/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kaisquare.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Indoor location
 * (1) mapId - ID of the indoor map on which this location is present
 * (2) x - x coordinate on the map
 * (3) y - y coordinate on the map
 * (4) timestamp - timestamp of this location, in DDMMYYYYhhmmss format
 */
public class IndoorLocationInfo implements org.apache.thrift.TBase<IndoorLocationInfo, IndoorLocationInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IndoorLocationInfo");

  private static final org.apache.thrift.protocol.TField MAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mapId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField X_FIELD_DESC = new org.apache.thrift.protocol.TField("x", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField Y_FIELD_DESC = new org.apache.thrift.protocol.TField("y", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IndoorLocationInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IndoorLocationInfoTupleSchemeFactory());
  }

  public String mapId; // required
  public String x; // required
  public String y; // required
  public String timestamp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAP_ID((short)1, "mapId"),
    X((short)2, "x"),
    Y((short)3, "y"),
    TIMESTAMP((short)4, "timestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAP_ID
          return MAP_ID;
        case 2: // X
          return X;
        case 3: // Y
          return Y;
        case 4: // TIMESTAMP
          return TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAP_ID, new org.apache.thrift.meta_data.FieldMetaData("mapId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.X, new org.apache.thrift.meta_data.FieldMetaData("x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.Y, new org.apache.thrift.meta_data.FieldMetaData("y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndoorLocationInfo.class, metaDataMap);
  }

  public IndoorLocationInfo() {
  }

  public IndoorLocationInfo(
    String mapId,
    String x,
    String y,
    String timestamp)
  {
    this();
    this.mapId = mapId;
    this.x = x;
    this.y = y;
    this.timestamp = timestamp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IndoorLocationInfo(IndoorLocationInfo other) {
    if (other.isSetMapId()) {
      this.mapId = other.mapId;
    }
    if (other.isSetX()) {
      this.x = other.x;
    }
    if (other.isSetY()) {
      this.y = other.y;
    }
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
  }

  public IndoorLocationInfo deepCopy() {
    return new IndoorLocationInfo(this);
  }

  @Override
  public void clear() {
    this.mapId = null;
    this.x = null;
    this.y = null;
    this.timestamp = null;
  }

  public String getMapId() {
    return this.mapId;
  }

  public IndoorLocationInfo setMapId(String mapId) {
    this.mapId = mapId;
    return this;
  }

  public void unsetMapId() {
    this.mapId = null;
  }

  /** Returns true if field mapId is set (has been assigned a value) and false otherwise */
  public boolean isSetMapId() {
    return this.mapId != null;
  }

  public void setMapIdIsSet(boolean value) {
    if (!value) {
      this.mapId = null;
    }
  }

  public String getX() {
    return this.x;
  }

  public IndoorLocationInfo setX(String x) {
    this.x = x;
    return this;
  }

  public void unsetX() {
    this.x = null;
  }

  /** Returns true if field x is set (has been assigned a value) and false otherwise */
  public boolean isSetX() {
    return this.x != null;
  }

  public void setXIsSet(boolean value) {
    if (!value) {
      this.x = null;
    }
  }

  public String getY() {
    return this.y;
  }

  public IndoorLocationInfo setY(String y) {
    this.y = y;
    return this;
  }

  public void unsetY() {
    this.y = null;
  }

  /** Returns true if field y is set (has been assigned a value) and false otherwise */
  public boolean isSetY() {
    return this.y != null;
  }

  public void setYIsSet(boolean value) {
    if (!value) {
      this.y = null;
    }
  }

  public String getTimestamp() {
    return this.timestamp;
  }

  public IndoorLocationInfo setTimestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAP_ID:
      if (value == null) {
        unsetMapId();
      } else {
        setMapId((String)value);
      }
      break;

    case X:
      if (value == null) {
        unsetX();
      } else {
        setX((String)value);
      }
      break;

    case Y:
      if (value == null) {
        unsetY();
      } else {
        setY((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAP_ID:
      return getMapId();

    case X:
      return getX();

    case Y:
      return getY();

    case TIMESTAMP:
      return getTimestamp();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAP_ID:
      return isSetMapId();
    case X:
      return isSetX();
    case Y:
      return isSetY();
    case TIMESTAMP:
      return isSetTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IndoorLocationInfo)
      return this.equals((IndoorLocationInfo)that);
    return false;
  }

  public boolean equals(IndoorLocationInfo that) {
    if (that == null)
      return false;

    boolean this_present_mapId = true && this.isSetMapId();
    boolean that_present_mapId = true && that.isSetMapId();
    if (this_present_mapId || that_present_mapId) {
      if (!(this_present_mapId && that_present_mapId))
        return false;
      if (!this.mapId.equals(that.mapId))
        return false;
    }

    boolean this_present_x = true && this.isSetX();
    boolean that_present_x = true && that.isSetX();
    if (this_present_x || that_present_x) {
      if (!(this_present_x && that_present_x))
        return false;
      if (!this.x.equals(that.x))
        return false;
    }

    boolean this_present_y = true && this.isSetY();
    boolean that_present_y = true && that.isSetY();
    if (this_present_y || that_present_y) {
      if (!(this_present_y && that_present_y))
        return false;
      if (!this.y.equals(that.y))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(IndoorLocationInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    IndoorLocationInfo typedOther = (IndoorLocationInfo)other;

    lastComparison = Boolean.valueOf(isSetMapId()).compareTo(typedOther.isSetMapId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapId, typedOther.mapId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetX()).compareTo(typedOther.isSetX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x, typedOther.x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY()).compareTo(typedOther.isSetY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y, typedOther.y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IndoorLocationInfo(");
    boolean first = true;

    sb.append("mapId:");
    if (this.mapId == null) {
      sb.append("null");
    } else {
      sb.append(this.mapId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("x:");
    if (this.x == null) {
      sb.append("null");
    } else {
      sb.append(this.x);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("y:");
    if (this.y == null) {
      sb.append("null");
    } else {
      sb.append(this.y);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    if (this.timestamp == null) {
      sb.append("null");
    } else {
      sb.append(this.timestamp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IndoorLocationInfoStandardSchemeFactory implements SchemeFactory {
    public IndoorLocationInfoStandardScheme getScheme() {
      return new IndoorLocationInfoStandardScheme();
    }
  }

  private static class IndoorLocationInfoStandardScheme extends StandardScheme<IndoorLocationInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IndoorLocationInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mapId = iprot.readString();
              struct.setMapIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // X
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.x = iprot.readString();
              struct.setXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // Y
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.y = iprot.readString();
              struct.setYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timestamp = iprot.readString();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IndoorLocationInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mapId != null) {
        oprot.writeFieldBegin(MAP_ID_FIELD_DESC);
        oprot.writeString(struct.mapId);
        oprot.writeFieldEnd();
      }
      if (struct.x != null) {
        oprot.writeFieldBegin(X_FIELD_DESC);
        oprot.writeString(struct.x);
        oprot.writeFieldEnd();
      }
      if (struct.y != null) {
        oprot.writeFieldBegin(Y_FIELD_DESC);
        oprot.writeString(struct.y);
        oprot.writeFieldEnd();
      }
      if (struct.timestamp != null) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeString(struct.timestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IndoorLocationInfoTupleSchemeFactory implements SchemeFactory {
    public IndoorLocationInfoTupleScheme getScheme() {
      return new IndoorLocationInfoTupleScheme();
    }
  }

  private static class IndoorLocationInfoTupleScheme extends TupleScheme<IndoorLocationInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IndoorLocationInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMapId()) {
        optionals.set(0);
      }
      if (struct.isSetX()) {
        optionals.set(1);
      }
      if (struct.isSetY()) {
        optionals.set(2);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMapId()) {
        oprot.writeString(struct.mapId);
      }
      if (struct.isSetX()) {
        oprot.writeString(struct.x);
      }
      if (struct.isSetY()) {
        oprot.writeString(struct.y);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeString(struct.timestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IndoorLocationInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.mapId = iprot.readString();
        struct.setMapIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.x = iprot.readString();
        struct.setXIsSet(true);
      }
      if (incoming.get(2)) {
        struct.y = iprot.readString();
        struct.setYIsSet(true);
      }
      if (incoming.get(3)) {
        struct.timestamp = iprot.readString();
        struct.setTimestampIsSet(true);
      }
    }
  }

}

